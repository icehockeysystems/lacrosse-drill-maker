{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { useRef, useEffect } from 'react';\nimport invariant from 'tiny-invariant';\nvar useBeforeunload = function useBeforeunload(handler) {\n  !(handler == null || typeof handler === 'function') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected `handler` to be a function') : invariant(false) : void 0;\n  var eventListenerRef = useRef();\n  useEffect(function () {\n    eventListenerRef.current = function (event) {\n      var returnValue = handler === null || handler === void 0 ? void 0 : handler(event); // Handle legacy `event.returnValue` property\n      // https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event\n\n      if (typeof returnValue === 'string') {\n        return event.returnValue = returnValue;\n      } // Chrome doesn't support `event.preventDefault()` on `BeforeUnloadEvent`,\n      // instead it requires `event.returnValue` to be set\n      // https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload#browser_compatibility\n\n      if (event.defaultPrevented) {\n        return event.returnValue = '';\n      }\n    };\n  }, [handler]);\n  useEffect(function () {\n    var eventListener = function eventListener(event) {\n      return eventListenerRef.current(event);\n    };\n    window.addEventListener('beforeunload', eventListener);\n    return function () {\n      window.removeEventListener('beforeunload', eventListener);\n    };\n  }, []);\n};\nvar Beforeunload = function Beforeunload(_ref) {\n  var _ref$children = _ref.children,\n    children = _ref$children === void 0 ? null : _ref$children,\n    onBeforeunload = _ref.onBeforeunload;\n  useBeforeunload(onBeforeunload);\n  return children;\n};\nBeforeunload.propTypes\n/* remove-proptypes */ = process.env.NODE_ENV !== \"production\" ? {\n  children: PropTypes.any,\n  onBeforeunload: PropTypes.func.isRequired\n} : {};\nexport { Beforeunload, useBeforeunload };","map":{"version":3,"names":["useBeforeunload","handler","process","env","NODE_ENV","invariant","eventListenerRef","useRef","useEffect","current","event","returnValue","defaultPrevented","eventListener","window","addEventListener","removeEventListener","Beforeunload","_ref","_ref$children","children","onBeforeunload","propTypes","PropTypes","any","func","isRequired"],"sources":["C:\\Users\\nilss\\Desktop\\Drill Maker\\20241211-Lacross-Drill-Maker\\lacross-drill-maker\\node_modules\\react-beforeunload\\src\\useBeforeunload.js","C:\\Users\\nilss\\Desktop\\Drill Maker\\20241211-Lacross-Drill-Maker\\lacross-drill-maker\\node_modules\\react-beforeunload\\src\\Beforeunload.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport invariant from 'tiny-invariant';\n\nconst useBeforeunload = (handler) => {\n  invariant(\n    handler == null || typeof handler === 'function',\n    'Expected `handler` to be a function'\n  );\n\n  const eventListenerRef = useRef();\n\n  useEffect(() => {\n    eventListenerRef.current = (event) => {\n      const returnValue = handler?.(event);\n      // Handle legacy `event.returnValue` property\n      // https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event\n      if (typeof returnValue === 'string') {\n        return (event.returnValue = returnValue);\n      }\n      // Chrome doesn't support `event.preventDefault()` on `BeforeUnloadEvent`,\n      // instead it requires `event.returnValue` to be set\n      // https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload#browser_compatibility\n      if (event.defaultPrevented) {\n        return (event.returnValue = '');\n      }\n    };\n  }, [handler]);\n\n  useEffect(() => {\n    const eventListener = (event) => eventListenerRef.current(event);\n    window.addEventListener('beforeunload', eventListener);\n    return () => {\n      window.removeEventListener('beforeunload', eventListener);\n    };\n  }, []);\n};\n\nexport default useBeforeunload;\n","import PropTypes from 'prop-types';\nimport useBeforeunload from './useBeforeunload';\n\nconst Beforeunload = ({ children = null, onBeforeunload }) => {\n  useBeforeunload(onBeforeunload);\n  return children;\n};\n\nBeforeunload.propTypes /* remove-proptypes */ = {\n  children: PropTypes.any,\n  onBeforeunload: PropTypes.func.isRequired,\n};\n\nexport default Beforeunload;\n"],"mappings":";;;IAGMA,eAAe,GAAG,SAAlBA,eAAkBA,CAACC,OAAD,EAAa;EACnC,EACEA,OAAO,IAAI,IAAX,IAAmB,OAAOA,OAAP,KAAmB,UADxC,IAAAC,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAAC,SAAS,QAEP,qCAFO,CAAT,GAAAA,SAAS,OAAT;EAKA,IAAMC,gBAAgB,GAAGC,MAAM,EAA/B;EAEAC,SAAS,CAAC,YAAM;IACdF,gBAAgB,CAACG,OAAjB,GAA2B,UAACC,KAAD,EAAW;MACpC,IAAMC,WAAW,GAAGV,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAGS,KAAH,CAA3B,CADoC;MAGpC;;MACA,IAAI,OAAOC,WAAP,KAAuB,QAA3B,EAAqC;QACnC,OAAQD,KAAK,CAACC,WAAN,GAAoBA,WAA5B;MACD,CANmC;MAQpC;MACA;;MACA,IAAID,KAAK,CAACE,gBAAV,EAA4B;QAC1B,OAAQF,KAAK,CAACC,WAAN,GAAoB,EAA5B;MACD;IACF,CAbD;EAcD,CAfQ,EAeN,CAACV,OAAD,CAfM,CAAT;EAiBAO,SAAS,CAAC,YAAM;IACd,IAAMK,aAAa,GAAG,SAAhBA,aAAgBA,CAACH,KAAD;MAAA,OAAWJ,gBAAgB,CAACG,OAAjB,CAAyBC,KAAzB,CAAX;IAAA,CAAtB;IACAI,MAAM,CAACC,gBAAP,CAAwB,cAAxB,EAAwCF,aAAxC;IACA,OAAO,YAAM;MACXC,MAAM,CAACE,mBAAP,CAA2B,cAA3B,EAA2CH,aAA3C;IACD,CAFD;EAGD,CANQ,EAMN,EANM,CAAT;AAOD;IChCKI,YAAY,GAAG,SAAfA,YAAeA,CAAAC,IAAA,EAAyC;EAAA,IAAAC,aAAA,GAAAD,IAAA,CAAtCE,QAAsC;IAAtCA,QAAsC,GAAAD,aAAA,cAA3B,IAA2B,GAAAA,aAAA;IAArBE,cAAqB,GAAAH,IAAA,CAArBG,cAAqB;EAC5DrB,eAAe,CAACqB,cAAD,CAAf;EACA,OAAOD,QAAP;AACD;AAEDH,YAAY,CAACK;AAAU,yBAAvBpB,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAgD;EAC9CgB,QAAQ,EAAEG,SAAS,CAACC,GAD0B;EAE9CH,cAAc,EAAEE,SAAS,CAACE,IAAV,CAAeC;AAFe,CAAhD"},"metadata":{},"sourceType":"module","externalDependencies":[]}