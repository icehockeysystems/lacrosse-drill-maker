{"ast":null,"code":"/*!\n * Paper.js v0.12.15 - The Swiss Army Knife of Vector Graphics Scripting.\n * http://paperjs.org/\n *\n * Copyright (c) 2011 - 2020, Jürg Lehni & Jonathan Puckey\n * http://juerglehni.com/ & https://puckey.studio/\n *\n * Distributed under the MIT license. See LICENSE file for details.\n *\n * All rights reserved.\n *\n * Date: Wed Mar 17 10:49:48 2021 +0100\n *\n ***\n *\n * Straps.js - Class inheritance library with support for bean-style accessors\n *\n * Copyright (c) 2006 - 2020 Jürg Lehni\n * http://juerglehni.com/\n *\n * Distributed under the MIT license.\n *\n ***\n *\n * Acorn.js\n * https://marijnhaverbeke.nl/acorn/\n *\n * Acorn is a tiny, fast JavaScript parser written in JavaScript,\n * created by Marijn Haverbeke and released under an MIT license.\n *\n */\n\nvar paper = function (self, undefined) {\n  self = self || require('./node/self.js');\n  var window = self.window,\n    document = self.document;\n  var Base = new function () {\n    var hidden = /^(statics|enumerable|beans|preserve)$/,\n      array = [],\n      slice = array.slice,\n      create = Object.create,\n      describe = Object.getOwnPropertyDescriptor,\n      define = Object.defineProperty,\n      forEach = array.forEach || function (iter, bind) {\n        for (var i = 0, l = this.length; i < l; i++) {\n          iter.call(bind, this[i], i, this);\n        }\n      },\n      forIn = function (iter, bind) {\n        for (var i in this) {\n          if (this.hasOwnProperty(i)) iter.call(bind, this[i], i, this);\n        }\n      },\n      set = Object.assign || function (dst) {\n        for (var i = 1, l = arguments.length; i < l; i++) {\n          var src = arguments[i];\n          for (var key in src) {\n            if (src.hasOwnProperty(key)) dst[key] = src[key];\n          }\n        }\n        return dst;\n      },\n      each = function (obj, iter, bind) {\n        if (obj) {\n          var desc = describe(obj, 'length');\n          (desc && typeof desc.value === 'number' ? forEach : forIn).call(obj, iter, bind = bind || obj);\n        }\n        return bind;\n      };\n    function inject(dest, src, enumerable, beans, preserve) {\n      var beansNames = {};\n      function field(name, val) {\n        val = val || (val = describe(src, name)) && (val.get ? val : val.value);\n        if (typeof val === 'string' && val[0] === '#') val = dest[val.substring(1)] || val;\n        var isFunc = typeof val === 'function',\n          res = val,\n          prev = preserve || isFunc && !val.base ? val && val.get ? name in dest : dest[name] : null,\n          bean;\n        if (!preserve || !prev) {\n          if (isFunc && prev) val.base = prev;\n          if (isFunc && beans !== false && (bean = name.match(/^([gs]et|is)(([A-Z])(.*))$/))) beansNames[bean[3].toLowerCase() + bean[4]] = bean[2];\n          if (!res || isFunc || !res.get || typeof res.get !== 'function' || !Base.isPlainObject(res)) {\n            res = {\n              value: res,\n              writable: true\n            };\n          }\n          if ((describe(dest, name) || {\n            configurable: true\n          }).configurable) {\n            res.configurable = true;\n            res.enumerable = enumerable != null ? enumerable : !bean;\n          }\n          define(dest, name, res);\n        }\n      }\n      if (src) {\n        for (var name in src) {\n          if (src.hasOwnProperty(name) && !hidden.test(name)) field(name);\n        }\n        for (var name in beansNames) {\n          var part = beansNames[name],\n            set = dest['set' + part],\n            get = dest['get' + part] || set && dest['is' + part];\n          if (get && (beans === true || get.length === 0)) field(name, {\n            get: get,\n            set: set\n          });\n        }\n      }\n      return dest;\n    }\n    function Base() {\n      for (var i = 0, l = arguments.length; i < l; i++) {\n        var src = arguments[i];\n        if (src) set(this, src);\n      }\n      return this;\n    }\n    return inject(Base, {\n      inject: function (src) {\n        if (src) {\n          var statics = src.statics === true ? src : src.statics,\n            beans = src.beans,\n            preserve = src.preserve;\n          if (statics !== src) inject(this.prototype, src, src.enumerable, beans, preserve);\n          inject(this, statics, null, beans, preserve);\n        }\n        for (var i = 1, l = arguments.length; i < l; i++) this.inject(arguments[i]);\n        return this;\n      },\n      extend: function () {\n        var base = this,\n          ctor,\n          proto;\n        for (var i = 0, obj, l = arguments.length; i < l && !(ctor && proto); i++) {\n          obj = arguments[i];\n          ctor = ctor || obj.initialize;\n          proto = proto || obj.prototype;\n        }\n        ctor = ctor || function () {\n          base.apply(this, arguments);\n        };\n        proto = ctor.prototype = proto || create(this.prototype);\n        define(proto, 'constructor', {\n          value: ctor,\n          writable: true,\n          configurable: true\n        });\n        inject(ctor, this);\n        if (arguments.length) this.inject.apply(ctor, arguments);\n        ctor.base = base;\n        return ctor;\n      }\n    }).inject({\n      enumerable: false,\n      initialize: Base,\n      set: Base,\n      inject: function () {\n        for (var i = 0, l = arguments.length; i < l; i++) {\n          var src = arguments[i];\n          if (src) {\n            inject(this, src, src.enumerable, src.beans, src.preserve);\n          }\n        }\n        return this;\n      },\n      extend: function () {\n        var res = create(this);\n        return res.inject.apply(res, arguments);\n      },\n      each: function (iter, bind) {\n        return each(this, iter, bind);\n      },\n      clone: function () {\n        return new this.constructor(this);\n      },\n      statics: {\n        set: set,\n        each: each,\n        create: create,\n        define: define,\n        describe: describe,\n        clone: function (obj) {\n          return set(new obj.constructor(), obj);\n        },\n        isPlainObject: function (obj) {\n          var ctor = obj != null && obj.constructor;\n          return ctor && (ctor === Object || ctor === Base || ctor.name === 'Object');\n        },\n        pick: function (a, b) {\n          return a !== undefined ? a : b;\n        },\n        slice: function (list, begin, end) {\n          return slice.call(list, begin, end);\n        }\n      }\n    });\n  }();\n  if (typeof module !== 'undefined') module.exports = Base;\n  Base.inject({\n    enumerable: false,\n    toString: function () {\n      return this._id != null ? (this._class || 'Object') + (this._name ? \" '\" + this._name + \"'\" : ' @' + this._id) : '{ ' + Base.each(this, function (value, key) {\n        if (!/^_/.test(key)) {\n          var type = typeof value;\n          this.push(key + ': ' + (type === 'number' ? Formatter.instance.number(value) : type === 'string' ? \"'\" + value + \"'\" : value));\n        }\n      }, []).join(', ') + ' }';\n    },\n    getClassName: function () {\n      return this._class || '';\n    },\n    importJSON: function (json) {\n      return Base.importJSON(json, this);\n    },\n    exportJSON: function (options) {\n      return Base.exportJSON(this, options);\n    },\n    toJSON: function () {\n      return Base.serialize(this);\n    },\n    set: function (props, exclude) {\n      if (props) Base.filter(this, props, exclude, this._prioritize);\n      return this;\n    }\n  }, {\n    beans: false,\n    statics: {\n      exports: {},\n      extend: function extend() {\n        var res = extend.base.apply(this, arguments),\n          name = res.prototype._class;\n        if (name && !Base.exports[name]) Base.exports[name] = res;\n        return res;\n      },\n      equals: function (obj1, obj2) {\n        if (obj1 === obj2) return true;\n        if (obj1 && obj1.equals) return obj1.equals(obj2);\n        if (obj2 && obj2.equals) return obj2.equals(obj1);\n        if (obj1 && obj2 && typeof obj1 === 'object' && typeof obj2 === 'object') {\n          if (Array.isArray(obj1) && Array.isArray(obj2)) {\n            var length = obj1.length;\n            if (length !== obj2.length) return false;\n            while (length--) {\n              if (!Base.equals(obj1[length], obj2[length])) return false;\n            }\n          } else {\n            var keys = Object.keys(obj1),\n              length = keys.length;\n            if (length !== Object.keys(obj2).length) return false;\n            while (length--) {\n              var key = keys[length];\n              if (!(obj2.hasOwnProperty(key) && Base.equals(obj1[key], obj2[key]))) return false;\n            }\n          }\n          return true;\n        }\n        return false;\n      },\n      read: function (list, start, options, amount) {\n        if (this === Base) {\n          var value = this.peek(list, start);\n          list.__index++;\n          return value;\n        }\n        var proto = this.prototype,\n          readIndex = proto._readIndex,\n          begin = start || readIndex && list.__index || 0,\n          length = list.length,\n          obj = list[begin];\n        amount = amount || length - begin;\n        if (obj instanceof this || options && options.readNull && obj == null && amount <= 1) {\n          if (readIndex) list.__index = begin + 1;\n          return obj && options && options.clone ? obj.clone() : obj;\n        }\n        obj = Base.create(proto);\n        if (readIndex) obj.__read = true;\n        obj = obj.initialize.apply(obj, begin > 0 || begin + amount < length ? Base.slice(list, begin, begin + amount) : list) || obj;\n        if (readIndex) {\n          list.__index = begin + obj.__read;\n          var filtered = obj.__filtered;\n          if (filtered) {\n            list.__filtered = filtered;\n            obj.__filtered = undefined;\n          }\n          obj.__read = undefined;\n        }\n        return obj;\n      },\n      peek: function (list, start) {\n        return list[list.__index = start || list.__index || 0];\n      },\n      remain: function (list) {\n        return list.length - (list.__index || 0);\n      },\n      readList: function (list, start, options, amount) {\n        var res = [],\n          entry,\n          begin = start || 0,\n          end = amount ? begin + amount : list.length;\n        for (var i = begin; i < end; i++) {\n          res.push(Array.isArray(entry = list[i]) ? this.read(entry, 0, options) : this.read(list, i, options, 1));\n        }\n        return res;\n      },\n      readNamed: function (list, name, start, options, amount) {\n        var value = this.getNamed(list, name),\n          hasValue = value !== undefined;\n        if (hasValue) {\n          var filtered = list.__filtered;\n          if (!filtered) {\n            var source = this.getSource(list);\n            filtered = list.__filtered = Base.create(source);\n            filtered.__unfiltered = source;\n          }\n          filtered[name] = undefined;\n        }\n        return this.read(hasValue ? [value] : list, start, options, amount);\n      },\n      readSupported: function (list, dest) {\n        var source = this.getSource(list),\n          that = this,\n          read = false;\n        if (source) {\n          Object.keys(source).forEach(function (key) {\n            if (key in dest) {\n              var value = that.readNamed(list, key);\n              if (value !== undefined) {\n                dest[key] = value;\n              }\n              read = true;\n            }\n          });\n        }\n        return read;\n      },\n      getSource: function (list) {\n        var source = list.__source;\n        if (source === undefined) {\n          var arg = list.length === 1 && list[0];\n          source = list.__source = arg && Base.isPlainObject(arg) ? arg : null;\n        }\n        return source;\n      },\n      getNamed: function (list, name) {\n        var source = this.getSource(list);\n        if (source) {\n          return name ? source[name] : list.__filtered || source;\n        }\n      },\n      hasNamed: function (list, name) {\n        return !!this.getNamed(list, name);\n      },\n      filter: function (dest, source, exclude, prioritize) {\n        var processed;\n        function handleKey(key) {\n          if (!(exclude && key in exclude) && !(processed && key in processed)) {\n            var value = source[key];\n            if (value !== undefined) dest[key] = value;\n          }\n        }\n        if (prioritize) {\n          var keys = {};\n          for (var i = 0, key, l = prioritize.length; i < l; i++) {\n            if ((key = prioritize[i]) in source) {\n              handleKey(key);\n              keys[key] = true;\n            }\n          }\n          processed = keys;\n        }\n        Object.keys(source.__unfiltered || source).forEach(handleKey);\n        return dest;\n      },\n      isPlainValue: function (obj, asString) {\n        return Base.isPlainObject(obj) || Array.isArray(obj) || asString && typeof obj === 'string';\n      },\n      serialize: function (obj, options, compact, dictionary) {\n        options = options || {};\n        var isRoot = !dictionary,\n          res;\n        if (isRoot) {\n          options.formatter = new Formatter(options.precision);\n          dictionary = {\n            length: 0,\n            definitions: {},\n            references: {},\n            add: function (item, create) {\n              var id = '#' + item._id,\n                ref = this.references[id];\n              if (!ref) {\n                this.length++;\n                var res = create.call(item),\n                  name = item._class;\n                if (name && res[0] !== name) res.unshift(name);\n                this.definitions[id] = res;\n                ref = this.references[id] = [id];\n              }\n              return ref;\n            }\n          };\n        }\n        if (obj && obj._serialize) {\n          res = obj._serialize(options, dictionary);\n          var name = obj._class;\n          if (name && !obj._compactSerialize && (isRoot || !compact) && res[0] !== name) {\n            res.unshift(name);\n          }\n        } else if (Array.isArray(obj)) {\n          res = [];\n          for (var i = 0, l = obj.length; i < l; i++) res[i] = Base.serialize(obj[i], options, compact, dictionary);\n        } else if (Base.isPlainObject(obj)) {\n          res = {};\n          var keys = Object.keys(obj);\n          for (var i = 0, l = keys.length; i < l; i++) {\n            var key = keys[i];\n            res[key] = Base.serialize(obj[key], options, compact, dictionary);\n          }\n        } else if (typeof obj === 'number') {\n          res = options.formatter.number(obj, options.precision);\n        } else {\n          res = obj;\n        }\n        return isRoot && dictionary.length > 0 ? [['dictionary', dictionary.definitions], res] : res;\n      },\n      deserialize: function (json, create, _data, _setDictionary, _isRoot) {\n        var res = json,\n          isFirst = !_data,\n          hasDictionary = isFirst && json && json.length && json[0][0] === 'dictionary';\n        _data = _data || {};\n        if (Array.isArray(json)) {\n          var type = json[0],\n            isDictionary = type === 'dictionary';\n          if (json.length == 1 && /^#/.test(type)) {\n            return _data.dictionary[type];\n          }\n          type = Base.exports[type];\n          res = [];\n          for (var i = type ? 1 : 0, l = json.length; i < l; i++) {\n            res.push(Base.deserialize(json[i], create, _data, isDictionary, hasDictionary));\n          }\n          if (type) {\n            var args = res;\n            if (create) {\n              res = create(type, args, isFirst || _isRoot);\n            } else {\n              res = new type(args);\n            }\n          }\n        } else if (Base.isPlainObject(json)) {\n          res = {};\n          if (_setDictionary) _data.dictionary = res;\n          for (var key in json) res[key] = Base.deserialize(json[key], create, _data);\n        }\n        return hasDictionary ? res[1] : res;\n      },\n      exportJSON: function (obj, options) {\n        var json = Base.serialize(obj, options);\n        return options && options.asString == false ? json : JSON.stringify(json);\n      },\n      importJSON: function (json, target) {\n        return Base.deserialize(typeof json === 'string' ? JSON.parse(json) : json, function (ctor, args, isRoot) {\n          var useTarget = isRoot && target && target.constructor === ctor,\n            obj = useTarget ? target : Base.create(ctor.prototype);\n          if (args.length === 1 && obj instanceof Item && (useTarget || !(obj instanceof Layer))) {\n            var arg = args[0];\n            if (Base.isPlainObject(arg)) {\n              arg.insert = false;\n              if (useTarget) {\n                args = args.concat([{\n                  insert: true\n                }]);\n              }\n            }\n          }\n          (useTarget ? obj.set : ctor).apply(obj, args);\n          if (useTarget) target = null;\n          return obj;\n        });\n      },\n      push: function (list, items) {\n        var itemsLength = items.length;\n        if (itemsLength < 4096) {\n          list.push.apply(list, items);\n        } else {\n          var startLength = list.length;\n          list.length += itemsLength;\n          for (var i = 0; i < itemsLength; i++) {\n            list[startLength + i] = items[i];\n          }\n        }\n        return list;\n      },\n      splice: function (list, items, index, remove) {\n        var amount = items && items.length,\n          append = index === undefined;\n        index = append ? list.length : index;\n        if (index > list.length) index = list.length;\n        for (var i = 0; i < amount; i++) items[i]._index = index + i;\n        if (append) {\n          Base.push(list, items);\n          return [];\n        } else {\n          var args = [index, remove];\n          if (items) Base.push(args, items);\n          var removed = list.splice.apply(list, args);\n          for (var i = 0, l = removed.length; i < l; i++) removed[i]._index = undefined;\n          for (var i = index + amount, l = list.length; i < l; i++) list[i]._index = i;\n          return removed;\n        }\n      },\n      capitalize: function (str) {\n        return str.replace(/\\b[a-z]/g, function (match) {\n          return match.toUpperCase();\n        });\n      },\n      camelize: function (str) {\n        return str.replace(/-(.)/g, function (match, chr) {\n          return chr.toUpperCase();\n        });\n      },\n      hyphenate: function (str) {\n        return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n      }\n    }\n  });\n  var Emitter = {\n    on: function (type, func) {\n      if (typeof type !== 'string') {\n        Base.each(type, function (value, key) {\n          this.on(key, value);\n        }, this);\n      } else {\n        var types = this._eventTypes,\n          entry = types && types[type],\n          handlers = this._callbacks = this._callbacks || {};\n        handlers = handlers[type] = handlers[type] || [];\n        if (handlers.indexOf(func) === -1) {\n          handlers.push(func);\n          if (entry && entry.install && handlers.length === 1) entry.install.call(this, type);\n        }\n      }\n      return this;\n    },\n    off: function (type, func) {\n      if (typeof type !== 'string') {\n        Base.each(type, function (value, key) {\n          this.off(key, value);\n        }, this);\n        return;\n      }\n      var types = this._eventTypes,\n        entry = types && types[type],\n        handlers = this._callbacks && this._callbacks[type],\n        index;\n      if (handlers) {\n        if (!func || (index = handlers.indexOf(func)) !== -1 && handlers.length === 1) {\n          if (entry && entry.uninstall) entry.uninstall.call(this, type);\n          delete this._callbacks[type];\n        } else if (index !== -1) {\n          handlers.splice(index, 1);\n        }\n      }\n      return this;\n    },\n    once: function (type, func) {\n      return this.on(type, function handler() {\n        func.apply(this, arguments);\n        this.off(type, handler);\n      });\n    },\n    emit: function (type, event) {\n      var handlers = this._callbacks && this._callbacks[type];\n      if (!handlers) return false;\n      var args = Base.slice(arguments, 1),\n        setTarget = event && event.target && !event.currentTarget;\n      handlers = handlers.slice();\n      if (setTarget) event.currentTarget = this;\n      for (var i = 0, l = handlers.length; i < l; i++) {\n        if (handlers[i].apply(this, args) == false) {\n          if (event && event.stop) event.stop();\n          break;\n        }\n      }\n      if (setTarget) delete event.currentTarget;\n      return true;\n    },\n    responds: function (type) {\n      return !!(this._callbacks && this._callbacks[type]);\n    },\n    attach: '#on',\n    detach: '#off',\n    fire: '#emit',\n    _installEvents: function (install) {\n      var types = this._eventTypes,\n        handlers = this._callbacks,\n        key = install ? 'install' : 'uninstall';\n      if (types) {\n        for (var type in handlers) {\n          if (handlers[type].length > 0) {\n            var entry = types[type],\n              func = entry && entry[key];\n            if (func) func.call(this, type);\n          }\n        }\n      }\n    },\n    statics: {\n      inject: function inject(src) {\n        var events = src._events;\n        if (events) {\n          var types = {};\n          Base.each(events, function (entry, key) {\n            var isString = typeof entry === 'string',\n              name = isString ? entry : key,\n              part = Base.capitalize(name),\n              type = name.substring(2).toLowerCase();\n            types[type] = isString ? {} : entry;\n            name = '_' + name;\n            src['get' + part] = function () {\n              return this[name];\n            };\n            src['set' + part] = function (func) {\n              var prev = this[name];\n              if (prev) this.off(type, prev);\n              if (func) this.on(type, func);\n              this[name] = func;\n            };\n          });\n          src._eventTypes = types;\n        }\n        return inject.base.apply(this, arguments);\n      }\n    }\n  };\n  var PaperScope = Base.extend({\n    _class: 'PaperScope',\n    initialize: function PaperScope() {\n      paper = this;\n      this.settings = new Base({\n        applyMatrix: true,\n        insertItems: true,\n        handleSize: 4,\n        hitTolerance: 0\n      });\n      this.project = null;\n      this.projects = [];\n      this.tools = [];\n      this._id = PaperScope._id++;\n      PaperScope._scopes[this._id] = this;\n      var proto = PaperScope.prototype;\n      if (!this.support) {\n        var ctx = CanvasProvider.getContext(1, 1) || {};\n        proto.support = {\n          nativeDash: 'setLineDash' in ctx || 'mozDash' in ctx,\n          nativeBlendModes: BlendMode.nativeModes\n        };\n        CanvasProvider.release(ctx);\n      }\n      if (!this.agent) {\n        var user = self.navigator.userAgent.toLowerCase(),\n          os = (/(darwin|win|mac|linux|freebsd|sunos)/.exec(user) || [])[0],\n          platform = os === 'darwin' ? 'mac' : os,\n          agent = proto.agent = proto.browser = {\n            platform: platform\n          };\n        if (platform) agent[platform] = true;\n        user.replace(/(opera|chrome|safari|webkit|firefox|msie|trident|atom|node|jsdom)\\/?\\s*([.\\d]+)(?:.*version\\/([.\\d]+))?(?:.*rv\\:v?([.\\d]+))?/g, function (match, n, v1, v2, rv) {\n          if (!agent.chrome) {\n            var v = n === 'opera' ? v2 : /^(node|trident)$/.test(n) ? rv : v1;\n            agent.version = v;\n            agent.versionNumber = parseFloat(v);\n            n = {\n              trident: 'msie',\n              jsdom: 'node'\n            }[n] || n;\n            agent.name = n;\n            agent[n] = true;\n          }\n        });\n        if (agent.chrome) delete agent.webkit;\n        if (agent.atom) delete agent.chrome;\n      }\n    },\n    version: \"0.12.15\",\n    getView: function () {\n      var project = this.project;\n      return project && project._view;\n    },\n    getPaper: function () {\n      return this;\n    },\n    execute: function (code, options) {\n      var exports = paper.PaperScript.execute(code, this, options);\n      View.updateFocus();\n      return exports;\n    },\n    install: function (scope) {\n      var that = this;\n      Base.each(['project', 'view', 'tool'], function (key) {\n        Base.define(scope, key, {\n          configurable: true,\n          get: function () {\n            return that[key];\n          }\n        });\n      });\n      for (var key in this) if (!/^_/.test(key) && this[key]) scope[key] = this[key];\n    },\n    setup: function (element) {\n      paper = this;\n      this.project = new Project(element);\n      return this;\n    },\n    createCanvas: function (width, height) {\n      return CanvasProvider.getCanvas(width, height);\n    },\n    activate: function () {\n      paper = this;\n    },\n    clear: function () {\n      var projects = this.projects,\n        tools = this.tools;\n      for (var i = projects.length - 1; i >= 0; i--) projects[i].remove();\n      for (var i = tools.length - 1; i >= 0; i--) tools[i].remove();\n    },\n    remove: function () {\n      this.clear();\n      delete PaperScope._scopes[this._id];\n    },\n    statics: new function () {\n      function handleAttribute(name) {\n        name += 'Attribute';\n        return function (el, attr) {\n          return el[name](attr) || el[name]('data-paper-' + attr);\n        };\n      }\n      return {\n        _scopes: {},\n        _id: 0,\n        get: function (id) {\n          return this._scopes[id] || null;\n        },\n        getAttribute: handleAttribute('get'),\n        hasAttribute: handleAttribute('has')\n      };\n    }()\n  });\n  var PaperScopeItem = Base.extend(Emitter, {\n    initialize: function (activate) {\n      this._scope = paper;\n      this._index = this._scope[this._list].push(this) - 1;\n      if (activate || !this._scope[this._reference]) this.activate();\n    },\n    activate: function () {\n      if (!this._scope) return false;\n      var prev = this._scope[this._reference];\n      if (prev && prev !== this) prev.emit('deactivate');\n      this._scope[this._reference] = this;\n      this.emit('activate', prev);\n      return true;\n    },\n    isActive: function () {\n      return this._scope[this._reference] === this;\n    },\n    remove: function () {\n      if (this._index == null) return false;\n      Base.splice(this._scope[this._list], null, this._index, 1);\n      if (this._scope[this._reference] == this) this._scope[this._reference] = null;\n      this._scope = null;\n      return true;\n    },\n    getView: function () {\n      return this._scope.getView();\n    }\n  });\n  var CollisionDetection = {\n    findItemBoundsCollisions: function (items1, items2, tolerance) {\n      function getBounds(items) {\n        var bounds = new Array(items.length);\n        for (var i = 0; i < items.length; i++) {\n          var rect = items[i].getBounds();\n          bounds[i] = [rect.left, rect.top, rect.right, rect.bottom];\n        }\n        return bounds;\n      }\n      var bounds1 = getBounds(items1),\n        bounds2 = !items2 || items2 === items1 ? bounds1 : getBounds(items2);\n      return this.findBoundsCollisions(bounds1, bounds2, tolerance || 0);\n    },\n    findCurveBoundsCollisions: function (curves1, curves2, tolerance, bothAxis) {\n      function getBounds(curves) {\n        var min = Math.min,\n          max = Math.max,\n          bounds = new Array(curves.length);\n        for (var i = 0; i < curves.length; i++) {\n          var v = curves[i];\n          bounds[i] = [min(v[0], v[2], v[4], v[6]), min(v[1], v[3], v[5], v[7]), max(v[0], v[2], v[4], v[6]), max(v[1], v[3], v[5], v[7])];\n        }\n        return bounds;\n      }\n      var bounds1 = getBounds(curves1),\n        bounds2 = !curves2 || curves2 === curves1 ? bounds1 : getBounds(curves2);\n      if (bothAxis) {\n        var hor = this.findBoundsCollisions(bounds1, bounds2, tolerance || 0, false, true),\n          ver = this.findBoundsCollisions(bounds1, bounds2, tolerance || 0, true, true),\n          list = [];\n        for (var i = 0, l = hor.length; i < l; i++) {\n          list[i] = {\n            hor: hor[i],\n            ver: ver[i]\n          };\n        }\n        return list;\n      }\n      return this.findBoundsCollisions(bounds1, bounds2, tolerance || 0);\n    },\n    findBoundsCollisions: function (boundsA, boundsB, tolerance, sweepVertical, onlySweepAxisCollisions) {\n      var self = !boundsB || boundsA === boundsB,\n        allBounds = self ? boundsA : boundsA.concat(boundsB),\n        lengthA = boundsA.length,\n        lengthAll = allBounds.length;\n      function binarySearch(indices, coord, value) {\n        var lo = 0,\n          hi = indices.length;\n        while (lo < hi) {\n          var mid = hi + lo >>> 1;\n          if (allBounds[indices[mid]][coord] < value) {\n            lo = mid + 1;\n          } else {\n            hi = mid;\n          }\n        }\n        return lo - 1;\n      }\n      var pri0 = sweepVertical ? 1 : 0,\n        pri1 = pri0 + 2,\n        sec0 = sweepVertical ? 0 : 1,\n        sec1 = sec0 + 2;\n      var allIndicesByPri0 = new Array(lengthAll);\n      for (var i = 0; i < lengthAll; i++) {\n        allIndicesByPri0[i] = i;\n      }\n      allIndicesByPri0.sort(function (i1, i2) {\n        return allBounds[i1][pri0] - allBounds[i2][pri0];\n      });\n      var activeIndicesByPri1 = [],\n        allCollisions = new Array(lengthA);\n      for (var i = 0; i < lengthAll; i++) {\n        var curIndex = allIndicesByPri0[i],\n          curBounds = allBounds[curIndex],\n          origIndex = self ? curIndex : curIndex - lengthA,\n          isCurrentA = curIndex < lengthA,\n          isCurrentB = self || !isCurrentA,\n          curCollisions = isCurrentA ? [] : null;\n        if (activeIndicesByPri1.length) {\n          var pruneCount = binarySearch(activeIndicesByPri1, pri1, curBounds[pri0] - tolerance) + 1;\n          activeIndicesByPri1.splice(0, pruneCount);\n          if (self && onlySweepAxisCollisions) {\n            curCollisions = curCollisions.concat(activeIndicesByPri1);\n            for (var j = 0; j < activeIndicesByPri1.length; j++) {\n              var activeIndex = activeIndicesByPri1[j];\n              allCollisions[activeIndex].push(origIndex);\n            }\n          } else {\n            var curSec1 = curBounds[sec1],\n              curSec0 = curBounds[sec0];\n            for (var j = 0; j < activeIndicesByPri1.length; j++) {\n              var activeIndex = activeIndicesByPri1[j],\n                activeBounds = allBounds[activeIndex],\n                isActiveA = activeIndex < lengthA,\n                isActiveB = self || activeIndex >= lengthA;\n              if (onlySweepAxisCollisions || (isCurrentA && isActiveB || isCurrentB && isActiveA) && curSec1 >= activeBounds[sec0] - tolerance && curSec0 <= activeBounds[sec1] + tolerance) {\n                if (isCurrentA && isActiveB) {\n                  curCollisions.push(self ? activeIndex : activeIndex - lengthA);\n                }\n                if (isCurrentB && isActiveA) {\n                  allCollisions[activeIndex].push(origIndex);\n                }\n              }\n            }\n          }\n        }\n        if (isCurrentA) {\n          if (boundsA === boundsB) {\n            curCollisions.push(curIndex);\n          }\n          allCollisions[curIndex] = curCollisions;\n        }\n        if (activeIndicesByPri1.length) {\n          var curPri1 = curBounds[pri1],\n            index = binarySearch(activeIndicesByPri1, pri1, curPri1);\n          activeIndicesByPri1.splice(index + 1, 0, curIndex);\n        } else {\n          activeIndicesByPri1.push(curIndex);\n        }\n      }\n      for (var i = 0; i < allCollisions.length; i++) {\n        var collisions = allCollisions[i];\n        if (collisions) {\n          collisions.sort(function (i1, i2) {\n            return i1 - i2;\n          });\n        }\n      }\n      return allCollisions;\n    }\n  };\n  var Formatter = Base.extend({\n    initialize: function (precision) {\n      this.precision = Base.pick(precision, 5);\n      this.multiplier = Math.pow(10, this.precision);\n    },\n    number: function (val) {\n      return this.precision < 16 ? Math.round(val * this.multiplier) / this.multiplier : val;\n    },\n    pair: function (val1, val2, separator) {\n      return this.number(val1) + (separator || ',') + this.number(val2);\n    },\n    point: function (val, separator) {\n      return this.number(val.x) + (separator || ',') + this.number(val.y);\n    },\n    size: function (val, separator) {\n      return this.number(val.width) + (separator || ',') + this.number(val.height);\n    },\n    rectangle: function (val, separator) {\n      return this.point(val, separator) + (separator || ',') + this.size(val, separator);\n    }\n  });\n  Formatter.instance = new Formatter();\n  var Numerical = new function () {\n    var abscissas = [[0.5773502691896257645091488], [0, 0.7745966692414833770358531], [0.3399810435848562648026658, 0.8611363115940525752239465], [0, 0.5384693101056830910363144, 0.9061798459386639927976269], [0.2386191860831969086305017, 0.6612093864662645136613996, 0.9324695142031520278123016], [0, 0.4058451513773971669066064, 0.7415311855993944398638648, 0.9491079123427585245261897], [0.1834346424956498049394761, 0.5255324099163289858177390, 0.7966664774136267395915539, 0.9602898564975362316835609], [0, 0.3242534234038089290385380, 0.6133714327005903973087020, 0.8360311073266357942994298, 0.9681602395076260898355762], [0.1488743389816312108848260, 0.4333953941292471907992659, 0.6794095682990244062343274, 0.8650633666889845107320967, 0.9739065285171717200779640], [0, 0.2695431559523449723315320, 0.5190961292068118159257257, 0.7301520055740493240934163, 0.8870625997680952990751578, 0.9782286581460569928039380], [0.1252334085114689154724414, 0.3678314989981801937526915, 0.5873179542866174472967024, 0.7699026741943046870368938, 0.9041172563704748566784659, 0.9815606342467192506905491], [0, 0.2304583159551347940655281, 0.4484927510364468528779129, 0.6423493394403402206439846, 0.8015780907333099127942065, 0.9175983992229779652065478, 0.9841830547185881494728294], [0.1080549487073436620662447, 0.3191123689278897604356718, 0.5152486363581540919652907, 0.6872929048116854701480198, 0.8272013150697649931897947, 0.9284348836635735173363911, 0.9862838086968123388415973], [0, 0.2011940939974345223006283, 0.3941513470775633698972074, 0.5709721726085388475372267, 0.7244177313601700474161861, 0.8482065834104272162006483, 0.9372733924007059043077589, 0.9879925180204854284895657], [0.0950125098376374401853193, 0.2816035507792589132304605, 0.4580167776572273863424194, 0.6178762444026437484466718, 0.7554044083550030338951012, 0.8656312023878317438804679, 0.9445750230732325760779884, 0.9894009349916499325961542]];\n    var weights = [[1], [0.8888888888888888888888889, 0.5555555555555555555555556], [0.6521451548625461426269361, 0.3478548451374538573730639], [0.5688888888888888888888889, 0.4786286704993664680412915, 0.2369268850561890875142640], [0.4679139345726910473898703, 0.3607615730481386075698335, 0.1713244923791703450402961], [0.4179591836734693877551020, 0.3818300505051189449503698, 0.2797053914892766679014678, 0.1294849661688696932706114], [0.3626837833783619829651504, 0.3137066458778872873379622, 0.2223810344533744705443560, 0.1012285362903762591525314], [0.3302393550012597631645251, 0.3123470770400028400686304, 0.2606106964029354623187429, 0.1806481606948574040584720, 0.0812743883615744119718922], [0.2955242247147528701738930, 0.2692667193099963550912269, 0.2190863625159820439955349, 0.1494513491505805931457763, 0.0666713443086881375935688], [0.2729250867779006307144835, 0.2628045445102466621806889, 0.2331937645919904799185237, 0.1862902109277342514260976, 0.1255803694649046246346943, 0.0556685671161736664827537], [0.2491470458134027850005624, 0.2334925365383548087608499, 0.2031674267230659217490645, 0.1600783285433462263346525, 0.1069393259953184309602547, 0.0471753363865118271946160], [0.2325515532308739101945895, 0.2262831802628972384120902, 0.2078160475368885023125232, 0.1781459807619457382800467, 0.1388735102197872384636018, 0.0921214998377284479144218, 0.0404840047653158795200216], [0.2152638534631577901958764, 0.2051984637212956039659241, 0.1855383974779378137417166, 0.1572031671581935345696019, 0.1215185706879031846894148, 0.0801580871597602098056333, 0.0351194603317518630318329], [0.2025782419255612728806202, 0.1984314853271115764561183, 0.1861610000155622110268006, 0.1662692058169939335532009, 0.1395706779261543144478048, 0.1071592204671719350118695, 0.0703660474881081247092674, 0.0307532419961172683546284], [0.1894506104550684962853967, 0.1826034150449235888667637, 0.1691565193950025381893121, 0.1495959888165767320815017, 0.1246289712555338720524763, 0.0951585116824927848099251, 0.0622535239386478928628438, 0.0271524594117540948517806]];\n    var abs = Math.abs,\n      sqrt = Math.sqrt,\n      pow = Math.pow,\n      log2 = Math.log2 || function (x) {\n        return Math.log(x) * Math.LOG2E;\n      },\n      EPSILON = 1e-12,\n      MACHINE_EPSILON = 1.12e-16;\n    function clamp(value, min, max) {\n      return value < min ? min : value > max ? max : value;\n    }\n    function getDiscriminant(a, b, c) {\n      function split(v) {\n        var x = v * 134217729,\n          y = v - x,\n          hi = y + x,\n          lo = v - hi;\n        return [hi, lo];\n      }\n      var D = b * b - a * c,\n        E = b * b + a * c;\n      if (abs(D) * 3 < E) {\n        var ad = split(a),\n          bd = split(b),\n          cd = split(c),\n          p = b * b,\n          dp = bd[0] * bd[0] - p + 2 * bd[0] * bd[1] + bd[1] * bd[1],\n          q = a * c,\n          dq = ad[0] * cd[0] - q + ad[0] * cd[1] + ad[1] * cd[0] + ad[1] * cd[1];\n        D = p - q + (dp - dq);\n      }\n      return D;\n    }\n    function getNormalizationFactor() {\n      var norm = Math.max.apply(Math, arguments);\n      return norm && (norm < 1e-8 || norm > 1e8) ? pow(2, -Math.round(log2(norm))) : 0;\n    }\n    return {\n      EPSILON: EPSILON,\n      MACHINE_EPSILON: MACHINE_EPSILON,\n      CURVETIME_EPSILON: 1e-8,\n      GEOMETRIC_EPSILON: 1e-7,\n      TRIGONOMETRIC_EPSILON: 1e-8,\n      KAPPA: 4 * (sqrt(2) - 1) / 3,\n      isZero: function (val) {\n        return val >= -EPSILON && val <= EPSILON;\n      },\n      isMachineZero: function (val) {\n        return val >= -MACHINE_EPSILON && val <= MACHINE_EPSILON;\n      },\n      clamp: clamp,\n      integrate: function (f, a, b, n) {\n        var x = abscissas[n - 2],\n          w = weights[n - 2],\n          A = (b - a) * 0.5,\n          B = A + a,\n          i = 0,\n          m = n + 1 >> 1,\n          sum = n & 1 ? w[i++] * f(B) : 0;\n        while (i < m) {\n          var Ax = A * x[i];\n          sum += w[i++] * (f(B + Ax) + f(B - Ax));\n        }\n        return A * sum;\n      },\n      findRoot: function (f, df, x, a, b, n, tolerance) {\n        for (var i = 0; i < n; i++) {\n          var fx = f(x),\n            dx = fx / df(x),\n            nx = x - dx;\n          if (abs(dx) < tolerance) {\n            x = nx;\n            break;\n          }\n          if (fx > 0) {\n            b = x;\n            x = nx <= a ? (a + b) * 0.5 : nx;\n          } else {\n            a = x;\n            x = nx >= b ? (a + b) * 0.5 : nx;\n          }\n        }\n        return clamp(x, a, b);\n      },\n      solveQuadratic: function (a, b, c, roots, min, max) {\n        var x1,\n          x2 = Infinity;\n        if (abs(a) < EPSILON) {\n          if (abs(b) < EPSILON) return abs(c) < EPSILON ? -1 : 0;\n          x1 = -c / b;\n        } else {\n          b *= -0.5;\n          var D = getDiscriminant(a, b, c);\n          if (D && abs(D) < MACHINE_EPSILON) {\n            var f = getNormalizationFactor(abs(a), abs(b), abs(c));\n            if (f) {\n              a *= f;\n              b *= f;\n              c *= f;\n              D = getDiscriminant(a, b, c);\n            }\n          }\n          if (D >= -MACHINE_EPSILON) {\n            var Q = D < 0 ? 0 : sqrt(D),\n              R = b + (b < 0 ? -Q : Q);\n            if (R === 0) {\n              x1 = c / a;\n              x2 = -x1;\n            } else {\n              x1 = R / a;\n              x2 = c / R;\n            }\n          }\n        }\n        var count = 0,\n          boundless = min == null,\n          minB = min - EPSILON,\n          maxB = max + EPSILON;\n        if (isFinite(x1) && (boundless || x1 > minB && x1 < maxB)) roots[count++] = boundless ? x1 : clamp(x1, min, max);\n        if (x2 !== x1 && isFinite(x2) && (boundless || x2 > minB && x2 < maxB)) roots[count++] = boundless ? x2 : clamp(x2, min, max);\n        return count;\n      },\n      solveCubic: function (a, b, c, d, roots, min, max) {\n        var f = getNormalizationFactor(abs(a), abs(b), abs(c), abs(d)),\n          x,\n          b1,\n          c2,\n          qd,\n          q;\n        if (f) {\n          a *= f;\n          b *= f;\n          c *= f;\n          d *= f;\n        }\n        function evaluate(x0) {\n          x = x0;\n          var tmp = a * x;\n          b1 = tmp + b;\n          c2 = b1 * x + c;\n          qd = (tmp + b1) * x + c2;\n          q = c2 * x + d;\n        }\n        if (abs(a) < EPSILON) {\n          a = b;\n          b1 = c;\n          c2 = d;\n          x = Infinity;\n        } else if (abs(d) < EPSILON) {\n          b1 = b;\n          c2 = c;\n          x = 0;\n        } else {\n          evaluate(-(b / a) / 3);\n          var t = q / a,\n            r = pow(abs(t), 1 / 3),\n            s = t < 0 ? -1 : 1,\n            td = -qd / a,\n            rd = td > 0 ? 1.324717957244746 * Math.max(r, sqrt(td)) : r,\n            x0 = x - s * rd;\n          if (x0 !== x) {\n            do {\n              evaluate(x0);\n              x0 = qd === 0 ? x : x - q / qd / (1 + MACHINE_EPSILON);\n            } while (s * x0 > s * x);\n            if (abs(a) * x * x > abs(d / x)) {\n              c2 = -d / x;\n              b1 = (c2 - c) / x;\n            }\n          }\n        }\n        var count = Numerical.solveQuadratic(a, b1, c2, roots, min, max),\n          boundless = min == null;\n        if (isFinite(x) && (count === 0 || count > 0 && x !== roots[0] && x !== roots[1]) && (boundless || x > min - EPSILON && x < max + EPSILON)) roots[count++] = boundless ? x : clamp(x, min, max);\n        return count;\n      }\n    };\n  }();\n  var UID = {\n    _id: 1,\n    _pools: {},\n    get: function (name) {\n      if (name) {\n        var pool = this._pools[name];\n        if (!pool) pool = this._pools[name] = {\n          _id: 1\n        };\n        return pool._id++;\n      } else {\n        return this._id++;\n      }\n    }\n  };\n  var Point = Base.extend({\n    _class: 'Point',\n    _readIndex: true,\n    initialize: function Point(arg0, arg1) {\n      var type = typeof arg0,\n        reading = this.__read,\n        read = 0;\n      if (type === 'number') {\n        var hasY = typeof arg1 === 'number';\n        this._set(arg0, hasY ? arg1 : arg0);\n        if (reading) read = hasY ? 2 : 1;\n      } else if (type === 'undefined' || arg0 === null) {\n        this._set(0, 0);\n        if (reading) read = arg0 === null ? 1 : 0;\n      } else {\n        var obj = type === 'string' ? arg0.split(/[\\s,]+/) || [] : arg0;\n        read = 1;\n        if (Array.isArray(obj)) {\n          this._set(+obj[0], +(obj.length > 1 ? obj[1] : obj[0]));\n        } else if ('x' in obj) {\n          this._set(obj.x || 0, obj.y || 0);\n        } else if ('width' in obj) {\n          this._set(obj.width || 0, obj.height || 0);\n        } else if ('angle' in obj) {\n          this._set(obj.length || 0, 0);\n          this.setAngle(obj.angle || 0);\n        } else {\n          this._set(0, 0);\n          read = 0;\n        }\n      }\n      if (reading) this.__read = read;\n      return this;\n    },\n    set: '#initialize',\n    _set: function (x, y) {\n      this.x = x;\n      this.y = y;\n      return this;\n    },\n    equals: function (point) {\n      return this === point || point && (this.x === point.x && this.y === point.y || Array.isArray(point) && this.x === point[0] && this.y === point[1]) || false;\n    },\n    clone: function () {\n      return new Point(this.x, this.y);\n    },\n    toString: function () {\n      var f = Formatter.instance;\n      return '{ x: ' + f.number(this.x) + ', y: ' + f.number(this.y) + ' }';\n    },\n    _serialize: function (options) {\n      var f = options.formatter;\n      return [f.number(this.x), f.number(this.y)];\n    },\n    getLength: function () {\n      return Math.sqrt(this.x * this.x + this.y * this.y);\n    },\n    setLength: function (length) {\n      if (this.isZero()) {\n        var angle = this._angle || 0;\n        this._set(Math.cos(angle) * length, Math.sin(angle) * length);\n      } else {\n        var scale = length / this.getLength();\n        if (Numerical.isZero(scale)) this.getAngle();\n        this._set(this.x * scale, this.y * scale);\n      }\n    },\n    getAngle: function () {\n      return this.getAngleInRadians.apply(this, arguments) * 180 / Math.PI;\n    },\n    setAngle: function (angle) {\n      this.setAngleInRadians.call(this, angle * Math.PI / 180);\n    },\n    getAngleInDegrees: '#getAngle',\n    setAngleInDegrees: '#setAngle',\n    getAngleInRadians: function () {\n      if (!arguments.length) {\n        return this.isZero() ? this._angle || 0 : this._angle = Math.atan2(this.y, this.x);\n      } else {\n        var point = Point.read(arguments),\n          div = this.getLength() * point.getLength();\n        if (Numerical.isZero(div)) {\n          return NaN;\n        } else {\n          var a = this.dot(point) / div;\n          return Math.acos(a < -1 ? -1 : a > 1 ? 1 : a);\n        }\n      }\n    },\n    setAngleInRadians: function (angle) {\n      this._angle = angle;\n      if (!this.isZero()) {\n        var length = this.getLength();\n        this._set(Math.cos(angle) * length, Math.sin(angle) * length);\n      }\n    },\n    getQuadrant: function () {\n      return this.x >= 0 ? this.y >= 0 ? 1 : 4 : this.y >= 0 ? 2 : 3;\n    }\n  }, {\n    beans: false,\n    getDirectedAngle: function () {\n      var point = Point.read(arguments);\n      return Math.atan2(this.cross(point), this.dot(point)) * 180 / Math.PI;\n    },\n    getDistance: function () {\n      var args = arguments,\n        point = Point.read(args),\n        x = point.x - this.x,\n        y = point.y - this.y,\n        d = x * x + y * y,\n        squared = Base.read(args);\n      return squared ? d : Math.sqrt(d);\n    },\n    normalize: function (length) {\n      if (length === undefined) length = 1;\n      var current = this.getLength(),\n        scale = current !== 0 ? length / current : 0,\n        point = new Point(this.x * scale, this.y * scale);\n      if (scale >= 0) point._angle = this._angle;\n      return point;\n    },\n    rotate: function (angle, center) {\n      if (angle === 0) return this.clone();\n      angle = angle * Math.PI / 180;\n      var point = center ? this.subtract(center) : this,\n        sin = Math.sin(angle),\n        cos = Math.cos(angle);\n      point = new Point(point.x * cos - point.y * sin, point.x * sin + point.y * cos);\n      return center ? point.add(center) : point;\n    },\n    transform: function (matrix) {\n      return matrix ? matrix._transformPoint(this) : this;\n    },\n    add: function () {\n      var point = Point.read(arguments);\n      return new Point(this.x + point.x, this.y + point.y);\n    },\n    subtract: function () {\n      var point = Point.read(arguments);\n      return new Point(this.x - point.x, this.y - point.y);\n    },\n    multiply: function () {\n      var point = Point.read(arguments);\n      return new Point(this.x * point.x, this.y * point.y);\n    },\n    divide: function () {\n      var point = Point.read(arguments);\n      return new Point(this.x / point.x, this.y / point.y);\n    },\n    modulo: function () {\n      var point = Point.read(arguments);\n      return new Point(this.x % point.x, this.y % point.y);\n    },\n    negate: function () {\n      return new Point(-this.x, -this.y);\n    },\n    isInside: function () {\n      return Rectangle.read(arguments).contains(this);\n    },\n    isClose: function () {\n      var args = arguments,\n        point = Point.read(args),\n        tolerance = Base.read(args);\n      return this.getDistance(point) <= tolerance;\n    },\n    isCollinear: function () {\n      var point = Point.read(arguments);\n      return Point.isCollinear(this.x, this.y, point.x, point.y);\n    },\n    isColinear: '#isCollinear',\n    isOrthogonal: function () {\n      var point = Point.read(arguments);\n      return Point.isOrthogonal(this.x, this.y, point.x, point.y);\n    },\n    isZero: function () {\n      var isZero = Numerical.isZero;\n      return isZero(this.x) && isZero(this.y);\n    },\n    isNaN: function () {\n      return isNaN(this.x) || isNaN(this.y);\n    },\n    isInQuadrant: function (q) {\n      return this.x * (q > 1 && q < 4 ? -1 : 1) >= 0 && this.y * (q > 2 ? -1 : 1) >= 0;\n    },\n    dot: function () {\n      var point = Point.read(arguments);\n      return this.x * point.x + this.y * point.y;\n    },\n    cross: function () {\n      var point = Point.read(arguments);\n      return this.x * point.y - this.y * point.x;\n    },\n    project: function () {\n      var point = Point.read(arguments),\n        scale = point.isZero() ? 0 : this.dot(point) / point.dot(point);\n      return new Point(point.x * scale, point.y * scale);\n    },\n    statics: {\n      min: function () {\n        var args = arguments,\n          point1 = Point.read(args),\n          point2 = Point.read(args);\n        return new Point(Math.min(point1.x, point2.x), Math.min(point1.y, point2.y));\n      },\n      max: function () {\n        var args = arguments,\n          point1 = Point.read(args),\n          point2 = Point.read(args);\n        return new Point(Math.max(point1.x, point2.x), Math.max(point1.y, point2.y));\n      },\n      random: function () {\n        return new Point(Math.random(), Math.random());\n      },\n      isCollinear: function (x1, y1, x2, y2) {\n        return Math.abs(x1 * y2 - y1 * x2) <= Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2)) * 1e-8;\n      },\n      isOrthogonal: function (x1, y1, x2, y2) {\n        return Math.abs(x1 * x2 + y1 * y2) <= Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2)) * 1e-8;\n      }\n    }\n  }, Base.each(['round', 'ceil', 'floor', 'abs'], function (key) {\n    var op = Math[key];\n    this[key] = function () {\n      return new Point(op(this.x), op(this.y));\n    };\n  }, {}));\n  var LinkedPoint = Point.extend({\n    initialize: function Point(x, y, owner, setter) {\n      this._x = x;\n      this._y = y;\n      this._owner = owner;\n      this._setter = setter;\n    },\n    _set: function (x, y, _dontNotify) {\n      this._x = x;\n      this._y = y;\n      if (!_dontNotify) this._owner[this._setter](this);\n      return this;\n    },\n    getX: function () {\n      return this._x;\n    },\n    setX: function (x) {\n      this._x = x;\n      this._owner[this._setter](this);\n    },\n    getY: function () {\n      return this._y;\n    },\n    setY: function (y) {\n      this._y = y;\n      this._owner[this._setter](this);\n    },\n    isSelected: function () {\n      return !!(this._owner._selection & this._getSelection());\n    },\n    setSelected: function (selected) {\n      this._owner._changeSelection(this._getSelection(), selected);\n    },\n    _getSelection: function () {\n      return this._setter === 'setPosition' ? 4 : 0;\n    }\n  });\n  var Size = Base.extend({\n    _class: 'Size',\n    _readIndex: true,\n    initialize: function Size(arg0, arg1) {\n      var type = typeof arg0,\n        reading = this.__read,\n        read = 0;\n      if (type === 'number') {\n        var hasHeight = typeof arg1 === 'number';\n        this._set(arg0, hasHeight ? arg1 : arg0);\n        if (reading) read = hasHeight ? 2 : 1;\n      } else if (type === 'undefined' || arg0 === null) {\n        this._set(0, 0);\n        if (reading) read = arg0 === null ? 1 : 0;\n      } else {\n        var obj = type === 'string' ? arg0.split(/[\\s,]+/) || [] : arg0;\n        read = 1;\n        if (Array.isArray(obj)) {\n          this._set(+obj[0], +(obj.length > 1 ? obj[1] : obj[0]));\n        } else if ('width' in obj) {\n          this._set(obj.width || 0, obj.height || 0);\n        } else if ('x' in obj) {\n          this._set(obj.x || 0, obj.y || 0);\n        } else {\n          this._set(0, 0);\n          read = 0;\n        }\n      }\n      if (reading) this.__read = read;\n      return this;\n    },\n    set: '#initialize',\n    _set: function (width, height) {\n      this.width = width;\n      this.height = height;\n      return this;\n    },\n    equals: function (size) {\n      return size === this || size && (this.width === size.width && this.height === size.height || Array.isArray(size) && this.width === size[0] && this.height === size[1]) || false;\n    },\n    clone: function () {\n      return new Size(this.width, this.height);\n    },\n    toString: function () {\n      var f = Formatter.instance;\n      return '{ width: ' + f.number(this.width) + ', height: ' + f.number(this.height) + ' }';\n    },\n    _serialize: function (options) {\n      var f = options.formatter;\n      return [f.number(this.width), f.number(this.height)];\n    },\n    add: function () {\n      var size = Size.read(arguments);\n      return new Size(this.width + size.width, this.height + size.height);\n    },\n    subtract: function () {\n      var size = Size.read(arguments);\n      return new Size(this.width - size.width, this.height - size.height);\n    },\n    multiply: function () {\n      var size = Size.read(arguments);\n      return new Size(this.width * size.width, this.height * size.height);\n    },\n    divide: function () {\n      var size = Size.read(arguments);\n      return new Size(this.width / size.width, this.height / size.height);\n    },\n    modulo: function () {\n      var size = Size.read(arguments);\n      return new Size(this.width % size.width, this.height % size.height);\n    },\n    negate: function () {\n      return new Size(-this.width, -this.height);\n    },\n    isZero: function () {\n      var isZero = Numerical.isZero;\n      return isZero(this.width) && isZero(this.height);\n    },\n    isNaN: function () {\n      return isNaN(this.width) || isNaN(this.height);\n    },\n    statics: {\n      min: function (size1, size2) {\n        return new Size(Math.min(size1.width, size2.width), Math.min(size1.height, size2.height));\n      },\n      max: function (size1, size2) {\n        return new Size(Math.max(size1.width, size2.width), Math.max(size1.height, size2.height));\n      },\n      random: function () {\n        return new Size(Math.random(), Math.random());\n      }\n    }\n  }, Base.each(['round', 'ceil', 'floor', 'abs'], function (key) {\n    var op = Math[key];\n    this[key] = function () {\n      return new Size(op(this.width), op(this.height));\n    };\n  }, {}));\n  var LinkedSize = Size.extend({\n    initialize: function Size(width, height, owner, setter) {\n      this._width = width;\n      this._height = height;\n      this._owner = owner;\n      this._setter = setter;\n    },\n    _set: function (width, height, _dontNotify) {\n      this._width = width;\n      this._height = height;\n      if (!_dontNotify) this._owner[this._setter](this);\n      return this;\n    },\n    getWidth: function () {\n      return this._width;\n    },\n    setWidth: function (width) {\n      this._width = width;\n      this._owner[this._setter](this);\n    },\n    getHeight: function () {\n      return this._height;\n    },\n    setHeight: function (height) {\n      this._height = height;\n      this._owner[this._setter](this);\n    }\n  });\n  var Rectangle = Base.extend({\n    _class: 'Rectangle',\n    _readIndex: true,\n    beans: true,\n    initialize: function Rectangle(arg0, arg1, arg2, arg3) {\n      var args = arguments,\n        type = typeof arg0,\n        read;\n      if (type === 'number') {\n        this._set(arg0, arg1, arg2, arg3);\n        read = 4;\n      } else if (type === 'undefined' || arg0 === null) {\n        this._set(0, 0, 0, 0);\n        read = arg0 === null ? 1 : 0;\n      } else if (args.length === 1) {\n        if (Array.isArray(arg0)) {\n          this._set.apply(this, arg0);\n          read = 1;\n        } else if (arg0.x !== undefined || arg0.width !== undefined) {\n          this._set(arg0.x || 0, arg0.y || 0, arg0.width || 0, arg0.height || 0);\n          read = 1;\n        } else if (arg0.from === undefined && arg0.to === undefined) {\n          this._set(0, 0, 0, 0);\n          if (Base.readSupported(args, this)) {\n            read = 1;\n          }\n        }\n      }\n      if (read === undefined) {\n        var frm = Point.readNamed(args, 'from'),\n          next = Base.peek(args),\n          x = frm.x,\n          y = frm.y,\n          width,\n          height;\n        if (next && next.x !== undefined || Base.hasNamed(args, 'to')) {\n          var to = Point.readNamed(args, 'to');\n          width = to.x - x;\n          height = to.y - y;\n          if (width < 0) {\n            x = to.x;\n            width = -width;\n          }\n          if (height < 0) {\n            y = to.y;\n            height = -height;\n          }\n        } else {\n          var size = Size.read(args);\n          width = size.width;\n          height = size.height;\n        }\n        this._set(x, y, width, height);\n        read = args.__index;\n      }\n      var filtered = args.__filtered;\n      if (filtered) this.__filtered = filtered;\n      if (this.__read) this.__read = read;\n      return this;\n    },\n    set: '#initialize',\n    _set: function (x, y, width, height) {\n      this.x = x;\n      this.y = y;\n      this.width = width;\n      this.height = height;\n      return this;\n    },\n    clone: function () {\n      return new Rectangle(this.x, this.y, this.width, this.height);\n    },\n    equals: function (rect) {\n      var rt = Base.isPlainValue(rect) ? Rectangle.read(arguments) : rect;\n      return rt === this || rt && this.x === rt.x && this.y === rt.y && this.width === rt.width && this.height === rt.height || false;\n    },\n    toString: function () {\n      var f = Formatter.instance;\n      return '{ x: ' + f.number(this.x) + ', y: ' + f.number(this.y) + ', width: ' + f.number(this.width) + ', height: ' + f.number(this.height) + ' }';\n    },\n    _serialize: function (options) {\n      var f = options.formatter;\n      return [f.number(this.x), f.number(this.y), f.number(this.width), f.number(this.height)];\n    },\n    getPoint: function (_dontLink) {\n      var ctor = _dontLink ? Point : LinkedPoint;\n      return new ctor(this.x, this.y, this, 'setPoint');\n    },\n    setPoint: function () {\n      var point = Point.read(arguments);\n      this.x = point.x;\n      this.y = point.y;\n    },\n    getSize: function (_dontLink) {\n      var ctor = _dontLink ? Size : LinkedSize;\n      return new ctor(this.width, this.height, this, 'setSize');\n    },\n    _fw: 1,\n    _fh: 1,\n    setSize: function () {\n      var size = Size.read(arguments),\n        sx = this._sx,\n        sy = this._sy,\n        w = size.width,\n        h = size.height;\n      if (sx) {\n        this.x += (this.width - w) * sx;\n      }\n      if (sy) {\n        this.y += (this.height - h) * sy;\n      }\n      this.width = w;\n      this.height = h;\n      this._fw = this._fh = 1;\n    },\n    getLeft: function () {\n      return this.x;\n    },\n    setLeft: function (left) {\n      if (!this._fw) {\n        var amount = left - this.x;\n        this.width -= this._sx === 0.5 ? amount * 2 : amount;\n      }\n      this.x = left;\n      this._sx = this._fw = 0;\n    },\n    getTop: function () {\n      return this.y;\n    },\n    setTop: function (top) {\n      if (!this._fh) {\n        var amount = top - this.y;\n        this.height -= this._sy === 0.5 ? amount * 2 : amount;\n      }\n      this.y = top;\n      this._sy = this._fh = 0;\n    },\n    getRight: function () {\n      return this.x + this.width;\n    },\n    setRight: function (right) {\n      if (!this._fw) {\n        var amount = right - this.x;\n        this.width = this._sx === 0.5 ? amount * 2 : amount;\n      }\n      this.x = right - this.width;\n      this._sx = 1;\n      this._fw = 0;\n    },\n    getBottom: function () {\n      return this.y + this.height;\n    },\n    setBottom: function (bottom) {\n      if (!this._fh) {\n        var amount = bottom - this.y;\n        this.height = this._sy === 0.5 ? amount * 2 : amount;\n      }\n      this.y = bottom - this.height;\n      this._sy = 1;\n      this._fh = 0;\n    },\n    getCenterX: function () {\n      return this.x + this.width / 2;\n    },\n    setCenterX: function (x) {\n      if (this._fw || this._sx === 0.5) {\n        this.x = x - this.width / 2;\n      } else {\n        if (this._sx) {\n          this.x += (x - this.x) * 2 * this._sx;\n        }\n        this.width = (x - this.x) * 2;\n      }\n      this._sx = 0.5;\n      this._fw = 0;\n    },\n    getCenterY: function () {\n      return this.y + this.height / 2;\n    },\n    setCenterY: function (y) {\n      if (this._fh || this._sy === 0.5) {\n        this.y = y - this.height / 2;\n      } else {\n        if (this._sy) {\n          this.y += (y - this.y) * 2 * this._sy;\n        }\n        this.height = (y - this.y) * 2;\n      }\n      this._sy = 0.5;\n      this._fh = 0;\n    },\n    getCenter: function (_dontLink) {\n      var ctor = _dontLink ? Point : LinkedPoint;\n      return new ctor(this.getCenterX(), this.getCenterY(), this, 'setCenter');\n    },\n    setCenter: function () {\n      var point = Point.read(arguments);\n      this.setCenterX(point.x);\n      this.setCenterY(point.y);\n      return this;\n    },\n    getArea: function () {\n      return this.width * this.height;\n    },\n    isEmpty: function () {\n      return this.width === 0 || this.height === 0;\n    },\n    contains: function (arg) {\n      return arg && arg.width !== undefined || (Array.isArray(arg) ? arg : arguments).length === 4 ? this._containsRectangle(Rectangle.read(arguments)) : this._containsPoint(Point.read(arguments));\n    },\n    _containsPoint: function (point) {\n      var x = point.x,\n        y = point.y;\n      return x >= this.x && y >= this.y && x <= this.x + this.width && y <= this.y + this.height;\n    },\n    _containsRectangle: function (rect) {\n      var x = rect.x,\n        y = rect.y;\n      return x >= this.x && y >= this.y && x + rect.width <= this.x + this.width && y + rect.height <= this.y + this.height;\n    },\n    intersects: function () {\n      var rect = Rectangle.read(arguments),\n        epsilon = Base.read(arguments) || 0;\n      return rect.x + rect.width > this.x - epsilon && rect.y + rect.height > this.y - epsilon && rect.x < this.x + this.width + epsilon && rect.y < this.y + this.height + epsilon;\n    },\n    intersect: function () {\n      var rect = Rectangle.read(arguments),\n        x1 = Math.max(this.x, rect.x),\n        y1 = Math.max(this.y, rect.y),\n        x2 = Math.min(this.x + this.width, rect.x + rect.width),\n        y2 = Math.min(this.y + this.height, rect.y + rect.height);\n      return new Rectangle(x1, y1, x2 - x1, y2 - y1);\n    },\n    unite: function () {\n      var rect = Rectangle.read(arguments),\n        x1 = Math.min(this.x, rect.x),\n        y1 = Math.min(this.y, rect.y),\n        x2 = Math.max(this.x + this.width, rect.x + rect.width),\n        y2 = Math.max(this.y + this.height, rect.y + rect.height);\n      return new Rectangle(x1, y1, x2 - x1, y2 - y1);\n    },\n    include: function () {\n      var point = Point.read(arguments);\n      var x1 = Math.min(this.x, point.x),\n        y1 = Math.min(this.y, point.y),\n        x2 = Math.max(this.x + this.width, point.x),\n        y2 = Math.max(this.y + this.height, point.y);\n      return new Rectangle(x1, y1, x2 - x1, y2 - y1);\n    },\n    expand: function () {\n      var amount = Size.read(arguments),\n        hor = amount.width,\n        ver = amount.height;\n      return new Rectangle(this.x - hor / 2, this.y - ver / 2, this.width + hor, this.height + ver);\n    },\n    scale: function (hor, ver) {\n      return this.expand(this.width * hor - this.width, this.height * (ver === undefined ? hor : ver) - this.height);\n    }\n  }, Base.each([['Top', 'Left'], ['Top', 'Right'], ['Bottom', 'Left'], ['Bottom', 'Right'], ['Left', 'Center'], ['Top', 'Center'], ['Right', 'Center'], ['Bottom', 'Center']], function (parts, index) {\n    var part = parts.join(''),\n      xFirst = /^[RL]/.test(part);\n    if (index >= 4) parts[1] += xFirst ? 'Y' : 'X';\n    var x = parts[xFirst ? 0 : 1],\n      y = parts[xFirst ? 1 : 0],\n      getX = 'get' + x,\n      getY = 'get' + y,\n      setX = 'set' + x,\n      setY = 'set' + y,\n      get = 'get' + part,\n      set = 'set' + part;\n    this[get] = function (_dontLink) {\n      var ctor = _dontLink ? Point : LinkedPoint;\n      return new ctor(this[getX](), this[getY](), this, set);\n    };\n    this[set] = function () {\n      var point = Point.read(arguments);\n      this[setX](point.x);\n      this[setY](point.y);\n    };\n  }, {\n    beans: true\n  }));\n  var LinkedRectangle = Rectangle.extend({\n    initialize: function Rectangle(x, y, width, height, owner, setter) {\n      this._set(x, y, width, height, true);\n      this._owner = owner;\n      this._setter = setter;\n    },\n    _set: function (x, y, width, height, _dontNotify) {\n      this._x = x;\n      this._y = y;\n      this._width = width;\n      this._height = height;\n      if (!_dontNotify) this._owner[this._setter](this);\n      return this;\n    }\n  }, new function () {\n    var proto = Rectangle.prototype;\n    return Base.each(['x', 'y', 'width', 'height'], function (key) {\n      var part = Base.capitalize(key),\n        internal = '_' + key;\n      this['get' + part] = function () {\n        return this[internal];\n      };\n      this['set' + part] = function (value) {\n        this[internal] = value;\n        if (!this._dontNotify) this._owner[this._setter](this);\n      };\n    }, Base.each(['Point', 'Size', 'Center', 'Left', 'Top', 'Right', 'Bottom', 'CenterX', 'CenterY', 'TopLeft', 'TopRight', 'BottomLeft', 'BottomRight', 'LeftCenter', 'TopCenter', 'RightCenter', 'BottomCenter'], function (key) {\n      var name = 'set' + key;\n      this[name] = function () {\n        this._dontNotify = true;\n        proto[name].apply(this, arguments);\n        this._dontNotify = false;\n        this._owner[this._setter](this);\n      };\n    }, {\n      isSelected: function () {\n        return !!(this._owner._selection & 2);\n      },\n      setSelected: function (selected) {\n        var owner = this._owner;\n        if (owner._changeSelection) {\n          owner._changeSelection(2, selected);\n        }\n      }\n    }));\n  }());\n  var Matrix = Base.extend({\n    _class: 'Matrix',\n    initialize: function Matrix(arg, _dontNotify) {\n      var args = arguments,\n        count = args.length,\n        ok = true;\n      if (count >= 6) {\n        this._set.apply(this, args);\n      } else if (count === 1 || count === 2) {\n        if (arg instanceof Matrix) {\n          this._set(arg._a, arg._b, arg._c, arg._d, arg._tx, arg._ty, _dontNotify);\n        } else if (Array.isArray(arg)) {\n          this._set.apply(this, _dontNotify ? arg.concat([_dontNotify]) : arg);\n        } else {\n          ok = false;\n        }\n      } else if (!count) {\n        this.reset();\n      } else {\n        ok = false;\n      }\n      if (!ok) {\n        throw new Error('Unsupported matrix parameters');\n      }\n      return this;\n    },\n    set: '#initialize',\n    _set: function (a, b, c, d, tx, ty, _dontNotify) {\n      this._a = a;\n      this._b = b;\n      this._c = c;\n      this._d = d;\n      this._tx = tx;\n      this._ty = ty;\n      if (!_dontNotify) this._changed();\n      return this;\n    },\n    _serialize: function (options, dictionary) {\n      return Base.serialize(this.getValues(), options, true, dictionary);\n    },\n    _changed: function () {\n      var owner = this._owner;\n      if (owner) {\n        if (owner._applyMatrix) {\n          owner.transform(null, true);\n        } else {\n          owner._changed(25);\n        }\n      }\n    },\n    clone: function () {\n      return new Matrix(this._a, this._b, this._c, this._d, this._tx, this._ty);\n    },\n    equals: function (mx) {\n      return mx === this || mx && this._a === mx._a && this._b === mx._b && this._c === mx._c && this._d === mx._d && this._tx === mx._tx && this._ty === mx._ty;\n    },\n    toString: function () {\n      var f = Formatter.instance;\n      return '[[' + [f.number(this._a), f.number(this._c), f.number(this._tx)].join(', ') + '], [' + [f.number(this._b), f.number(this._d), f.number(this._ty)].join(', ') + ']]';\n    },\n    reset: function (_dontNotify) {\n      this._a = this._d = 1;\n      this._b = this._c = this._tx = this._ty = 0;\n      if (!_dontNotify) this._changed();\n      return this;\n    },\n    apply: function (recursively, _setApplyMatrix) {\n      var owner = this._owner;\n      if (owner) {\n        owner.transform(null, Base.pick(recursively, true), _setApplyMatrix);\n        return this.isIdentity();\n      }\n      return false;\n    },\n    translate: function () {\n      var point = Point.read(arguments),\n        x = point.x,\n        y = point.y;\n      this._tx += x * this._a + y * this._c;\n      this._ty += x * this._b + y * this._d;\n      this._changed();\n      return this;\n    },\n    scale: function () {\n      var args = arguments,\n        scale = Point.read(args),\n        center = Point.read(args, 0, {\n          readNull: true\n        });\n      if (center) this.translate(center);\n      this._a *= scale.x;\n      this._b *= scale.x;\n      this._c *= scale.y;\n      this._d *= scale.y;\n      if (center) this.translate(center.negate());\n      this._changed();\n      return this;\n    },\n    rotate: function (angle) {\n      angle *= Math.PI / 180;\n      var center = Point.read(arguments, 1),\n        x = center.x,\n        y = center.y,\n        cos = Math.cos(angle),\n        sin = Math.sin(angle),\n        tx = x - x * cos + y * sin,\n        ty = y - x * sin - y * cos,\n        a = this._a,\n        b = this._b,\n        c = this._c,\n        d = this._d;\n      this._a = cos * a + sin * c;\n      this._b = cos * b + sin * d;\n      this._c = -sin * a + cos * c;\n      this._d = -sin * b + cos * d;\n      this._tx += tx * a + ty * c;\n      this._ty += tx * b + ty * d;\n      this._changed();\n      return this;\n    },\n    shear: function () {\n      var args = arguments,\n        shear = Point.read(args),\n        center = Point.read(args, 0, {\n          readNull: true\n        });\n      if (center) this.translate(center);\n      var a = this._a,\n        b = this._b;\n      this._a += shear.y * this._c;\n      this._b += shear.y * this._d;\n      this._c += shear.x * a;\n      this._d += shear.x * b;\n      if (center) this.translate(center.negate());\n      this._changed();\n      return this;\n    },\n    skew: function () {\n      var args = arguments,\n        skew = Point.read(args),\n        center = Point.read(args, 0, {\n          readNull: true\n        }),\n        toRadians = Math.PI / 180,\n        shear = new Point(Math.tan(skew.x * toRadians), Math.tan(skew.y * toRadians));\n      return this.shear(shear, center);\n    },\n    append: function (mx, _dontNotify) {\n      if (mx) {\n        var a1 = this._a,\n          b1 = this._b,\n          c1 = this._c,\n          d1 = this._d,\n          a2 = mx._a,\n          b2 = mx._c,\n          c2 = mx._b,\n          d2 = mx._d,\n          tx2 = mx._tx,\n          ty2 = mx._ty;\n        this._a = a2 * a1 + c2 * c1;\n        this._c = b2 * a1 + d2 * c1;\n        this._b = a2 * b1 + c2 * d1;\n        this._d = b2 * b1 + d2 * d1;\n        this._tx += tx2 * a1 + ty2 * c1;\n        this._ty += tx2 * b1 + ty2 * d1;\n        if (!_dontNotify) this._changed();\n      }\n      return this;\n    },\n    prepend: function (mx, _dontNotify) {\n      if (mx) {\n        var a1 = this._a,\n          b1 = this._b,\n          c1 = this._c,\n          d1 = this._d,\n          tx1 = this._tx,\n          ty1 = this._ty,\n          a2 = mx._a,\n          b2 = mx._c,\n          c2 = mx._b,\n          d2 = mx._d,\n          tx2 = mx._tx,\n          ty2 = mx._ty;\n        this._a = a2 * a1 + b2 * b1;\n        this._c = a2 * c1 + b2 * d1;\n        this._b = c2 * a1 + d2 * b1;\n        this._d = c2 * c1 + d2 * d1;\n        this._tx = a2 * tx1 + b2 * ty1 + tx2;\n        this._ty = c2 * tx1 + d2 * ty1 + ty2;\n        if (!_dontNotify) this._changed();\n      }\n      return this;\n    },\n    appended: function (mx) {\n      return this.clone().append(mx);\n    },\n    prepended: function (mx) {\n      return this.clone().prepend(mx);\n    },\n    invert: function () {\n      var a = this._a,\n        b = this._b,\n        c = this._c,\n        d = this._d,\n        tx = this._tx,\n        ty = this._ty,\n        det = a * d - b * c,\n        res = null;\n      if (det && !isNaN(det) && isFinite(tx) && isFinite(ty)) {\n        this._a = d / det;\n        this._b = -b / det;\n        this._c = -c / det;\n        this._d = a / det;\n        this._tx = (c * ty - d * tx) / det;\n        this._ty = (b * tx - a * ty) / det;\n        res = this;\n      }\n      return res;\n    },\n    inverted: function () {\n      return this.clone().invert();\n    },\n    concatenate: '#append',\n    preConcatenate: '#prepend',\n    chain: '#appended',\n    _shiftless: function () {\n      return new Matrix(this._a, this._b, this._c, this._d, 0, 0);\n    },\n    _orNullIfIdentity: function () {\n      return this.isIdentity() ? null : this;\n    },\n    isIdentity: function () {\n      return this._a === 1 && this._b === 0 && this._c === 0 && this._d === 1 && this._tx === 0 && this._ty === 0;\n    },\n    isInvertible: function () {\n      var det = this._a * this._d - this._c * this._b;\n      return det && !isNaN(det) && isFinite(this._tx) && isFinite(this._ty);\n    },\n    isSingular: function () {\n      return !this.isInvertible();\n    },\n    transform: function (src, dst, count) {\n      return arguments.length < 3 ? this._transformPoint(Point.read(arguments)) : this._transformCoordinates(src, dst, count);\n    },\n    _transformPoint: function (point, dest, _dontNotify) {\n      var x = point.x,\n        y = point.y;\n      if (!dest) dest = new Point();\n      return dest._set(x * this._a + y * this._c + this._tx, x * this._b + y * this._d + this._ty, _dontNotify);\n    },\n    _transformCoordinates: function (src, dst, count) {\n      for (var i = 0, max = 2 * count; i < max; i += 2) {\n        var x = src[i],\n          y = src[i + 1];\n        dst[i] = x * this._a + y * this._c + this._tx;\n        dst[i + 1] = x * this._b + y * this._d + this._ty;\n      }\n      return dst;\n    },\n    _transformCorners: function (rect) {\n      var x1 = rect.x,\n        y1 = rect.y,\n        x2 = x1 + rect.width,\n        y2 = y1 + rect.height,\n        coords = [x1, y1, x2, y1, x2, y2, x1, y2];\n      return this._transformCoordinates(coords, coords, 4);\n    },\n    _transformBounds: function (bounds, dest, _dontNotify) {\n      var coords = this._transformCorners(bounds),\n        min = coords.slice(0, 2),\n        max = min.slice();\n      for (var i = 2; i < 8; i++) {\n        var val = coords[i],\n          j = i & 1;\n        if (val < min[j]) {\n          min[j] = val;\n        } else if (val > max[j]) {\n          max[j] = val;\n        }\n      }\n      if (!dest) dest = new Rectangle();\n      return dest._set(min[0], min[1], max[0] - min[0], max[1] - min[1], _dontNotify);\n    },\n    inverseTransform: function () {\n      return this._inverseTransform(Point.read(arguments));\n    },\n    _inverseTransform: function (point, dest, _dontNotify) {\n      var a = this._a,\n        b = this._b,\n        c = this._c,\n        d = this._d,\n        tx = this._tx,\n        ty = this._ty,\n        det = a * d - b * c,\n        res = null;\n      if (det && !isNaN(det) && isFinite(tx) && isFinite(ty)) {\n        var x = point.x - this._tx,\n          y = point.y - this._ty;\n        if (!dest) dest = new Point();\n        res = dest._set((x * d - y * c) / det, (y * a - x * b) / det, _dontNotify);\n      }\n      return res;\n    },\n    decompose: function () {\n      var a = this._a,\n        b = this._b,\n        c = this._c,\n        d = this._d,\n        det = a * d - b * c,\n        sqrt = Math.sqrt,\n        atan2 = Math.atan2,\n        degrees = 180 / Math.PI,\n        rotate,\n        scale,\n        skew;\n      if (a !== 0 || b !== 0) {\n        var r = sqrt(a * a + b * b);\n        rotate = Math.acos(a / r) * (b > 0 ? 1 : -1);\n        scale = [r, det / r];\n        skew = [atan2(a * c + b * d, r * r), 0];\n      } else if (c !== 0 || d !== 0) {\n        var s = sqrt(c * c + d * d);\n        rotate = Math.asin(c / s) * (d > 0 ? 1 : -1);\n        scale = [det / s, s];\n        skew = [0, atan2(a * c + b * d, s * s)];\n      } else {\n        rotate = 0;\n        skew = scale = [0, 0];\n      }\n      return {\n        translation: this.getTranslation(),\n        rotation: rotate * degrees,\n        scaling: new Point(scale),\n        skewing: new Point(skew[0] * degrees, skew[1] * degrees)\n      };\n    },\n    getValues: function () {\n      return [this._a, this._b, this._c, this._d, this._tx, this._ty];\n    },\n    getTranslation: function () {\n      return new Point(this._tx, this._ty);\n    },\n    getScaling: function () {\n      return this.decompose().scaling;\n    },\n    getRotation: function () {\n      return this.decompose().rotation;\n    },\n    applyToContext: function (ctx) {\n      if (!this.isIdentity()) {\n        ctx.transform(this._a, this._b, this._c, this._d, this._tx, this._ty);\n      }\n    }\n  }, Base.each(['a', 'b', 'c', 'd', 'tx', 'ty'], function (key) {\n    var part = Base.capitalize(key),\n      prop = '_' + key;\n    this['get' + part] = function () {\n      return this[prop];\n    };\n    this['set' + part] = function (value) {\n      this[prop] = value;\n      this._changed();\n    };\n  }, {}));\n  var Line = Base.extend({\n    _class: 'Line',\n    initialize: function Line(arg0, arg1, arg2, arg3, arg4) {\n      var asVector = false;\n      if (arguments.length >= 4) {\n        this._px = arg0;\n        this._py = arg1;\n        this._vx = arg2;\n        this._vy = arg3;\n        asVector = arg4;\n      } else {\n        this._px = arg0.x;\n        this._py = arg0.y;\n        this._vx = arg1.x;\n        this._vy = arg1.y;\n        asVector = arg2;\n      }\n      if (!asVector) {\n        this._vx -= this._px;\n        this._vy -= this._py;\n      }\n    },\n    getPoint: function () {\n      return new Point(this._px, this._py);\n    },\n    getVector: function () {\n      return new Point(this._vx, this._vy);\n    },\n    getLength: function () {\n      return this.getVector().getLength();\n    },\n    intersect: function (line, isInfinite) {\n      return Line.intersect(this._px, this._py, this._vx, this._vy, line._px, line._py, line._vx, line._vy, true, isInfinite);\n    },\n    getSide: function (point, isInfinite) {\n      return Line.getSide(this._px, this._py, this._vx, this._vy, point.x, point.y, true, isInfinite);\n    },\n    getDistance: function (point) {\n      return Math.abs(this.getSignedDistance(point));\n    },\n    getSignedDistance: function (point) {\n      return Line.getSignedDistance(this._px, this._py, this._vx, this._vy, point.x, point.y, true);\n    },\n    isCollinear: function (line) {\n      return Point.isCollinear(this._vx, this._vy, line._vx, line._vy);\n    },\n    isOrthogonal: function (line) {\n      return Point.isOrthogonal(this._vx, this._vy, line._vx, line._vy);\n    },\n    statics: {\n      intersect: function (p1x, p1y, v1x, v1y, p2x, p2y, v2x, v2y, asVector, isInfinite) {\n        if (!asVector) {\n          v1x -= p1x;\n          v1y -= p1y;\n          v2x -= p2x;\n          v2y -= p2y;\n        }\n        var cross = v1x * v2y - v1y * v2x;\n        if (!Numerical.isMachineZero(cross)) {\n          var dx = p1x - p2x,\n            dy = p1y - p2y,\n            u1 = (v2x * dy - v2y * dx) / cross,\n            u2 = (v1x * dy - v1y * dx) / cross,\n            epsilon = 1e-12,\n            uMin = -epsilon,\n            uMax = 1 + epsilon;\n          if (isInfinite || uMin < u1 && u1 < uMax && uMin < u2 && u2 < uMax) {\n            if (!isInfinite) {\n              u1 = u1 <= 0 ? 0 : u1 >= 1 ? 1 : u1;\n            }\n            return new Point(p1x + u1 * v1x, p1y + u1 * v1y);\n          }\n        }\n      },\n      getSide: function (px, py, vx, vy, x, y, asVector, isInfinite) {\n        if (!asVector) {\n          vx -= px;\n          vy -= py;\n        }\n        var v2x = x - px,\n          v2y = y - py,\n          ccw = v2x * vy - v2y * vx;\n        if (!isInfinite && Numerical.isMachineZero(ccw)) {\n          ccw = (v2x * vx + v2x * vx) / (vx * vx + vy * vy);\n          if (ccw >= 0 && ccw <= 1) ccw = 0;\n        }\n        return ccw < 0 ? -1 : ccw > 0 ? 1 : 0;\n      },\n      getSignedDistance: function (px, py, vx, vy, x, y, asVector) {\n        if (!asVector) {\n          vx -= px;\n          vy -= py;\n        }\n        return vx === 0 ? vy > 0 ? x - px : px - x : vy === 0 ? vx < 0 ? y - py : py - y : ((x - px) * vy - (y - py) * vx) / (vy > vx ? vy * Math.sqrt(1 + vx * vx / (vy * vy)) : vx * Math.sqrt(1 + vy * vy / (vx * vx)));\n      },\n      getDistance: function (px, py, vx, vy, x, y, asVector) {\n        return Math.abs(Line.getSignedDistance(px, py, vx, vy, x, y, asVector));\n      }\n    }\n  });\n  var Project = PaperScopeItem.extend({\n    _class: 'Project',\n    _list: 'projects',\n    _reference: 'project',\n    _compactSerialize: true,\n    initialize: function Project(element) {\n      PaperScopeItem.call(this, true);\n      this._children = [];\n      this._namedChildren = {};\n      this._activeLayer = null;\n      this._currentStyle = new Style(null, null, this);\n      this._view = View.create(this, element || CanvasProvider.getCanvas(1, 1));\n      this._selectionItems = {};\n      this._selectionCount = 0;\n      this._updateVersion = 0;\n    },\n    _serialize: function (options, dictionary) {\n      return Base.serialize(this._children, options, true, dictionary);\n    },\n    _changed: function (flags, item) {\n      if (flags & 1) {\n        var view = this._view;\n        if (view) {\n          view._needsUpdate = true;\n          if (!view._requested && view._autoUpdate) view.requestUpdate();\n        }\n      }\n      var changes = this._changes;\n      if (changes && item) {\n        var changesById = this._changesById,\n          id = item._id,\n          entry = changesById[id];\n        if (entry) {\n          entry.flags |= flags;\n        } else {\n          changes.push(changesById[id] = {\n            item: item,\n            flags: flags\n          });\n        }\n      }\n    },\n    clear: function () {\n      var children = this._children;\n      for (var i = children.length - 1; i >= 0; i--) children[i].remove();\n    },\n    isEmpty: function () {\n      return !this._children.length;\n    },\n    remove: function remove() {\n      if (!remove.base.call(this)) return false;\n      if (this._view) this._view.remove();\n      return true;\n    },\n    getView: function () {\n      return this._view;\n    },\n    getCurrentStyle: function () {\n      return this._currentStyle;\n    },\n    setCurrentStyle: function (style) {\n      this._currentStyle.set(style);\n    },\n    getIndex: function () {\n      return this._index;\n    },\n    getOptions: function () {\n      return this._scope.settings;\n    },\n    getLayers: function () {\n      return this._children;\n    },\n    getActiveLayer: function () {\n      return this._activeLayer || new Layer({\n        project: this,\n        insert: true\n      });\n    },\n    getSymbolDefinitions: function () {\n      var definitions = [],\n        ids = {};\n      this.getItems({\n        class: SymbolItem,\n        match: function (item) {\n          var definition = item._definition,\n            id = definition._id;\n          if (!ids[id]) {\n            ids[id] = true;\n            definitions.push(definition);\n          }\n          return false;\n        }\n      });\n      return definitions;\n    },\n    getSymbols: 'getSymbolDefinitions',\n    getSelectedItems: function () {\n      var selectionItems = this._selectionItems,\n        items = [];\n      for (var id in selectionItems) {\n        var item = selectionItems[id],\n          selection = item._selection;\n        if (selection & 1 && item.isInserted()) {\n          items.push(item);\n        } else if (!selection) {\n          this._updateSelection(item);\n        }\n      }\n      return items;\n    },\n    _updateSelection: function (item) {\n      var id = item._id,\n        selectionItems = this._selectionItems;\n      if (item._selection) {\n        if (selectionItems[id] !== item) {\n          this._selectionCount++;\n          selectionItems[id] = item;\n        }\n      } else if (selectionItems[id] === item) {\n        this._selectionCount--;\n        delete selectionItems[id];\n      }\n    },\n    selectAll: function () {\n      var children = this._children;\n      for (var i = 0, l = children.length; i < l; i++) children[i].setFullySelected(true);\n    },\n    deselectAll: function () {\n      var selectionItems = this._selectionItems;\n      for (var i in selectionItems) selectionItems[i].setFullySelected(false);\n    },\n    addLayer: function (layer) {\n      return this.insertLayer(undefined, layer);\n    },\n    insertLayer: function (index, layer) {\n      if (layer instanceof Layer) {\n        layer._remove(false, true);\n        Base.splice(this._children, [layer], index, 0);\n        layer._setProject(this, true);\n        var name = layer._name;\n        if (name) layer.setName(name);\n        if (this._changes) layer._changed(5);\n        if (!this._activeLayer) this._activeLayer = layer;\n      } else {\n        layer = null;\n      }\n      return layer;\n    },\n    _insertItem: function (index, item, _created) {\n      item = this.insertLayer(index, item) || (this._activeLayer || this._insertItem(undefined, new Layer(Item.NO_INSERT), true)).insertChild(index, item);\n      if (_created && item.activate) item.activate();\n      return item;\n    },\n    getItems: function (options) {\n      return Item._getItems(this, options);\n    },\n    getItem: function (options) {\n      return Item._getItems(this, options, null, null, true)[0] || null;\n    },\n    importJSON: function (json) {\n      this.activate();\n      var layer = this._activeLayer;\n      return Base.importJSON(json, layer && layer.isEmpty() && layer);\n    },\n    removeOn: function (type) {\n      var sets = this._removeSets;\n      if (sets) {\n        if (type === 'mouseup') sets.mousedrag = null;\n        var set = sets[type];\n        if (set) {\n          for (var id in set) {\n            var item = set[id];\n            for (var key in sets) {\n              var other = sets[key];\n              if (other && other != set) delete other[item._id];\n            }\n            item.remove();\n          }\n          sets[type] = null;\n        }\n      }\n    },\n    draw: function (ctx, matrix, pixelRatio) {\n      this._updateVersion++;\n      ctx.save();\n      matrix.applyToContext(ctx);\n      var children = this._children,\n        param = new Base({\n          offset: new Point(0, 0),\n          pixelRatio: pixelRatio,\n          viewMatrix: matrix.isIdentity() ? null : matrix,\n          matrices: [new Matrix()],\n          updateMatrix: true\n        });\n      for (var i = 0, l = children.length; i < l; i++) {\n        children[i].draw(ctx, param);\n      }\n      ctx.restore();\n      if (this._selectionCount > 0) {\n        ctx.save();\n        ctx.strokeWidth = 1;\n        var items = this._selectionItems,\n          size = this._scope.settings.handleSize,\n          version = this._updateVersion;\n        for (var id in items) {\n          items[id]._drawSelection(ctx, matrix, size, items, version);\n        }\n        ctx.restore();\n      }\n    }\n  });\n  var Item = Base.extend(Emitter, {\n    statics: {\n      extend: function extend(src) {\n        if (src._serializeFields) src._serializeFields = Base.set({}, this.prototype._serializeFields, src._serializeFields);\n        return extend.base.apply(this, arguments);\n      },\n      NO_INSERT: {\n        insert: false\n      }\n    },\n    _class: 'Item',\n    _name: null,\n    _applyMatrix: true,\n    _canApplyMatrix: true,\n    _canScaleStroke: false,\n    _pivot: null,\n    _visible: true,\n    _blendMode: 'normal',\n    _opacity: 1,\n    _locked: false,\n    _guide: false,\n    _clipMask: false,\n    _selection: 0,\n    _selectBounds: true,\n    _selectChildren: false,\n    _serializeFields: {\n      name: null,\n      applyMatrix: null,\n      matrix: new Matrix(),\n      pivot: null,\n      visible: true,\n      blendMode: 'normal',\n      opacity: 1,\n      locked: false,\n      guide: false,\n      clipMask: false,\n      selected: false,\n      data: {}\n    },\n    _prioritize: ['applyMatrix']\n  }, new function () {\n    var handlers = ['onMouseDown', 'onMouseUp', 'onMouseDrag', 'onClick', 'onDoubleClick', 'onMouseMove', 'onMouseEnter', 'onMouseLeave'];\n    return Base.each(handlers, function (name) {\n      this._events[name] = {\n        install: function (type) {\n          this.getView()._countItemEvent(type, 1);\n        },\n        uninstall: function (type) {\n          this.getView()._countItemEvent(type, -1);\n        }\n      };\n    }, {\n      _events: {\n        onFrame: {\n          install: function () {\n            this.getView()._animateItem(this, true);\n          },\n          uninstall: function () {\n            this.getView()._animateItem(this, false);\n          }\n        },\n        onLoad: {},\n        onError: {}\n      },\n      statics: {\n        _itemHandlers: handlers\n      }\n    });\n  }(), {\n    initialize: function Item() {},\n    _initialize: function (props, point) {\n      var hasProps = props && Base.isPlainObject(props),\n        internal = hasProps && props.internal === true,\n        matrix = this._matrix = new Matrix(),\n        project = hasProps && props.project || paper.project,\n        settings = paper.settings;\n      this._id = internal ? null : UID.get();\n      this._parent = this._index = null;\n      this._applyMatrix = this._canApplyMatrix && settings.applyMatrix;\n      if (point) matrix.translate(point);\n      matrix._owner = this;\n      this._style = new Style(project._currentStyle, this, project);\n      if (internal || hasProps && props.insert == false || !settings.insertItems && !(hasProps && props.insert === true)) {\n        this._setProject(project);\n      } else {\n        (hasProps && props.parent || project)._insertItem(undefined, this, true);\n      }\n      if (hasProps && props !== Item.NO_INSERT) {\n        this.set(props, {\n          internal: true,\n          insert: true,\n          project: true,\n          parent: true\n        });\n      }\n      return hasProps;\n    },\n    _serialize: function (options, dictionary) {\n      var props = {},\n        that = this;\n      function serialize(fields) {\n        for (var key in fields) {\n          var value = that[key];\n          if (!Base.equals(value, key === 'leading' ? fields.fontSize * 1.2 : fields[key])) {\n            props[key] = Base.serialize(value, options, key !== 'data', dictionary);\n          }\n        }\n      }\n      serialize(this._serializeFields);\n      if (!(this instanceof Group)) serialize(this._style._defaults);\n      return [this._class, props];\n    },\n    _changed: function (flags) {\n      var symbol = this._symbol,\n        cacheParent = this._parent || symbol,\n        project = this._project;\n      if (flags & 8) {\n        this._bounds = this._position = this._decomposed = undefined;\n      }\n      if (flags & 16) {\n        this._globalMatrix = undefined;\n      }\n      if (cacheParent && flags & 72) {\n        Item._clearBoundsCache(cacheParent);\n      }\n      if (flags & 2) {\n        Item._clearBoundsCache(this);\n      }\n      if (project) project._changed(flags, this);\n      if (symbol) symbol._changed(flags);\n    },\n    getId: function () {\n      return this._id;\n    },\n    getName: function () {\n      return this._name;\n    },\n    setName: function (name) {\n      if (this._name) this._removeNamed();\n      if (name === +name + '') throw new Error('Names consisting only of numbers are not supported.');\n      var owner = this._getOwner();\n      if (name && owner) {\n        var children = owner._children,\n          namedChildren = owner._namedChildren;\n        (namedChildren[name] = namedChildren[name] || []).push(this);\n        if (!(name in children)) children[name] = this;\n      }\n      this._name = name || undefined;\n      this._changed(256);\n    },\n    getStyle: function () {\n      return this._style;\n    },\n    setStyle: function (style) {\n      this.getStyle().set(style);\n    }\n  }, Base.each(['locked', 'visible', 'blendMode', 'opacity', 'guide'], function (name) {\n    var part = Base.capitalize(name),\n      key = '_' + name,\n      flags = {\n        locked: 256,\n        visible: 265\n      };\n    this['get' + part] = function () {\n      return this[key];\n    };\n    this['set' + part] = function (value) {\n      if (value != this[key]) {\n        this[key] = value;\n        this._changed(flags[name] || 257);\n      }\n    };\n  }, {}), {\n    beans: true,\n    getSelection: function () {\n      return this._selection;\n    },\n    setSelection: function (selection) {\n      if (selection !== this._selection) {\n        this._selection = selection;\n        var project = this._project;\n        if (project) {\n          project._updateSelection(this);\n          this._changed(257);\n        }\n      }\n    },\n    _changeSelection: function (flag, selected) {\n      var selection = this._selection;\n      this.setSelection(selected ? selection | flag : selection & ~flag);\n    },\n    isSelected: function () {\n      if (this._selectChildren) {\n        var children = this._children;\n        for (var i = 0, l = children.length; i < l; i++) if (children[i].isSelected()) return true;\n      }\n      return !!(this._selection & 1);\n    },\n    setSelected: function (selected) {\n      if (this._selectChildren) {\n        var children = this._children;\n        for (var i = 0, l = children.length; i < l; i++) children[i].setSelected(selected);\n      }\n      this._changeSelection(1, selected);\n    },\n    isFullySelected: function () {\n      var children = this._children,\n        selected = !!(this._selection & 1);\n      if (children && selected) {\n        for (var i = 0, l = children.length; i < l; i++) if (!children[i].isFullySelected()) return false;\n        return true;\n      }\n      return selected;\n    },\n    setFullySelected: function (selected) {\n      var children = this._children;\n      if (children) {\n        for (var i = 0, l = children.length; i < l; i++) children[i].setFullySelected(selected);\n      }\n      this._changeSelection(1, selected);\n    },\n    isClipMask: function () {\n      return this._clipMask;\n    },\n    setClipMask: function (clipMask) {\n      if (this._clipMask != (clipMask = !!clipMask)) {\n        this._clipMask = clipMask;\n        if (clipMask) {\n          this.setFillColor(null);\n          this.setStrokeColor(null);\n        }\n        this._changed(257);\n        if (this._parent) this._parent._changed(2048);\n      }\n    },\n    getData: function () {\n      if (!this._data) this._data = {};\n      return this._data;\n    },\n    setData: function (data) {\n      this._data = data;\n    },\n    getPosition: function (_dontLink) {\n      var ctor = _dontLink ? Point : LinkedPoint;\n      var position = this._position || (this._position = this._getPositionFromBounds());\n      return new ctor(position.x, position.y, this, 'setPosition');\n    },\n    setPosition: function () {\n      this.translate(Point.read(arguments).subtract(this.getPosition(true)));\n    },\n    _getPositionFromBounds: function (bounds) {\n      return this._pivot ? this._matrix._transformPoint(this._pivot) : (bounds || this.getBounds()).getCenter(true);\n    },\n    getPivot: function () {\n      var pivot = this._pivot;\n      return pivot ? new LinkedPoint(pivot.x, pivot.y, this, 'setPivot') : null;\n    },\n    setPivot: function () {\n      this._pivot = Point.read(arguments, 0, {\n        clone: true,\n        readNull: true\n      });\n      this._position = undefined;\n    }\n  }, Base.each({\n    getStrokeBounds: {\n      stroke: true\n    },\n    getHandleBounds: {\n      handle: true\n    },\n    getInternalBounds: {\n      internal: true\n    }\n  }, function (options, key) {\n    this[key] = function (matrix) {\n      return this.getBounds(matrix, options);\n    };\n  }, {\n    beans: true,\n    getBounds: function (matrix, options) {\n      var hasMatrix = options || matrix instanceof Matrix,\n        opts = Base.set({}, hasMatrix ? options : matrix, this._boundsOptions);\n      if (!opts.stroke || this.getStrokeScaling()) opts.cacheItem = this;\n      var rect = this._getCachedBounds(hasMatrix && matrix, opts).rect;\n      return !arguments.length ? new LinkedRectangle(rect.x, rect.y, rect.width, rect.height, this, 'setBounds') : rect;\n    },\n    setBounds: function () {\n      var rect = Rectangle.read(arguments),\n        bounds = this.getBounds(),\n        _matrix = this._matrix,\n        matrix = new Matrix(),\n        center = rect.getCenter();\n      matrix.translate(center);\n      if (rect.width != bounds.width || rect.height != bounds.height) {\n        if (!_matrix.isInvertible()) {\n          _matrix.set(_matrix._backup || new Matrix().translate(_matrix.getTranslation()));\n          bounds = this.getBounds();\n        }\n        matrix.scale(bounds.width !== 0 ? rect.width / bounds.width : 0, bounds.height !== 0 ? rect.height / bounds.height : 0);\n      }\n      center = bounds.getCenter();\n      matrix.translate(-center.x, -center.y);\n      this.transform(matrix);\n    },\n    _getBounds: function (matrix, options) {\n      var children = this._children;\n      if (!children || !children.length) return new Rectangle();\n      Item._updateBoundsCache(this, options.cacheItem);\n      return Item._getBounds(children, matrix, options);\n    },\n    _getBoundsCacheKey: function (options, internal) {\n      return [options.stroke ? 1 : 0, options.handle ? 1 : 0, internal ? 1 : 0].join('');\n    },\n    _getCachedBounds: function (matrix, options, noInternal) {\n      matrix = matrix && matrix._orNullIfIdentity();\n      var internal = options.internal && !noInternal,\n        cacheItem = options.cacheItem,\n        _matrix = internal ? null : this._matrix._orNullIfIdentity(),\n        cacheKey = cacheItem && (!matrix || matrix.equals(_matrix)) && this._getBoundsCacheKey(options, internal),\n        bounds = this._bounds;\n      Item._updateBoundsCache(this._parent || this._symbol, cacheItem);\n      if (cacheKey && bounds && cacheKey in bounds) {\n        var cached = bounds[cacheKey];\n        return {\n          rect: cached.rect.clone(),\n          nonscaling: cached.nonscaling\n        };\n      }\n      var res = this._getBounds(matrix || _matrix, options),\n        rect = res.rect || res,\n        style = this._style,\n        nonscaling = res.nonscaling || style.hasStroke() && !style.getStrokeScaling();\n      if (cacheKey) {\n        if (!bounds) {\n          this._bounds = bounds = {};\n        }\n        var cached = bounds[cacheKey] = {\n          rect: rect.clone(),\n          nonscaling: nonscaling,\n          internal: internal\n        };\n      }\n      return {\n        rect: rect,\n        nonscaling: nonscaling\n      };\n    },\n    _getStrokeMatrix: function (matrix, options) {\n      var parent = this.getStrokeScaling() ? null : options && options.internal ? this : this._parent || this._symbol && this._symbol._item,\n        mx = parent ? parent.getViewMatrix().invert() : matrix;\n      return mx && mx._shiftless();\n    },\n    statics: {\n      _updateBoundsCache: function (parent, item) {\n        if (parent && item) {\n          var id = item._id,\n            ref = parent._boundsCache = parent._boundsCache || {\n              ids: {},\n              list: []\n            };\n          if (!ref.ids[id]) {\n            ref.list.push(item);\n            ref.ids[id] = item;\n          }\n        }\n      },\n      _clearBoundsCache: function (item) {\n        var cache = item._boundsCache;\n        if (cache) {\n          item._bounds = item._position = item._boundsCache = undefined;\n          for (var i = 0, list = cache.list, l = list.length; i < l; i++) {\n            var other = list[i];\n            if (other !== item) {\n              other._bounds = other._position = undefined;\n              if (other._boundsCache) Item._clearBoundsCache(other);\n            }\n          }\n        }\n      },\n      _getBounds: function (items, matrix, options) {\n        var x1 = Infinity,\n          x2 = -x1,\n          y1 = x1,\n          y2 = x2,\n          nonscaling = false;\n        options = options || {};\n        for (var i = 0, l = items.length; i < l; i++) {\n          var item = items[i];\n          if (item._visible && !item.isEmpty(true)) {\n            var bounds = item._getCachedBounds(matrix && matrix.appended(item._matrix), options, true),\n              rect = bounds.rect;\n            x1 = Math.min(rect.x, x1);\n            y1 = Math.min(rect.y, y1);\n            x2 = Math.max(rect.x + rect.width, x2);\n            y2 = Math.max(rect.y + rect.height, y2);\n            if (bounds.nonscaling) nonscaling = true;\n          }\n        }\n        return {\n          rect: isFinite(x1) ? new Rectangle(x1, y1, x2 - x1, y2 - y1) : new Rectangle(),\n          nonscaling: nonscaling\n        };\n      }\n    }\n  }), {\n    beans: true,\n    _decompose: function () {\n      return this._applyMatrix ? null : this._decomposed || (this._decomposed = this._matrix.decompose());\n    },\n    getRotation: function () {\n      var decomposed = this._decompose();\n      return decomposed ? decomposed.rotation : 0;\n    },\n    setRotation: function (rotation) {\n      var current = this.getRotation();\n      if (current != null && rotation != null) {\n        var decomposed = this._decomposed;\n        this.rotate(rotation - current);\n        if (decomposed) {\n          decomposed.rotation = rotation;\n          this._decomposed = decomposed;\n        }\n      }\n    },\n    getScaling: function () {\n      var decomposed = this._decompose(),\n        s = decomposed && decomposed.scaling;\n      return new LinkedPoint(s ? s.x : 1, s ? s.y : 1, this, 'setScaling');\n    },\n    setScaling: function () {\n      var current = this.getScaling(),\n        scaling = Point.read(arguments, 0, {\n          clone: true,\n          readNull: true\n        });\n      if (current && scaling && !current.equals(scaling)) {\n        var rotation = this.getRotation(),\n          decomposed = this._decomposed,\n          matrix = new Matrix(),\n          isZero = Numerical.isZero;\n        if (isZero(current.x) || isZero(current.y)) {\n          matrix.translate(decomposed.translation);\n          if (rotation) {\n            matrix.rotate(rotation);\n          }\n          matrix.scale(scaling.x, scaling.y);\n          this._matrix.set(matrix);\n        } else {\n          var center = this.getPosition(true);\n          matrix.translate(center);\n          if (rotation) matrix.rotate(rotation);\n          matrix.scale(scaling.x / current.x, scaling.y / current.y);\n          if (rotation) matrix.rotate(-rotation);\n          matrix.translate(center.negate());\n          this.transform(matrix);\n        }\n        if (decomposed) {\n          decomposed.scaling = scaling;\n          this._decomposed = decomposed;\n        }\n      }\n    },\n    getMatrix: function () {\n      return this._matrix;\n    },\n    setMatrix: function () {\n      var matrix = this._matrix;\n      matrix.set.apply(matrix, arguments);\n    },\n    getGlobalMatrix: function (_dontClone) {\n      var matrix = this._globalMatrix;\n      if (matrix) {\n        var parent = this._parent;\n        var parents = [];\n        while (parent) {\n          if (!parent._globalMatrix) {\n            matrix = null;\n            for (var i = 0, l = parents.length; i < l; i++) {\n              parents[i]._globalMatrix = null;\n            }\n            break;\n          }\n          parents.push(parent);\n          parent = parent._parent;\n        }\n      }\n      if (!matrix) {\n        matrix = this._globalMatrix = this._matrix.clone();\n        var parent = this._parent;\n        if (parent) matrix.prepend(parent.getGlobalMatrix(true));\n      }\n      return _dontClone ? matrix : matrix.clone();\n    },\n    getViewMatrix: function () {\n      return this.getGlobalMatrix().prepend(this.getView()._matrix);\n    },\n    getApplyMatrix: function () {\n      return this._applyMatrix;\n    },\n    setApplyMatrix: function (apply) {\n      if (this._applyMatrix = this._canApplyMatrix && !!apply) this.transform(null, true);\n    },\n    getTransformContent: '#getApplyMatrix',\n    setTransformContent: '#setApplyMatrix'\n  }, {\n    getProject: function () {\n      return this._project;\n    },\n    _setProject: function (project, installEvents) {\n      if (this._project !== project) {\n        if (this._project) this._installEvents(false);\n        this._project = project;\n        var children = this._children;\n        for (var i = 0, l = children && children.length; i < l; i++) children[i]._setProject(project);\n        installEvents = true;\n      }\n      if (installEvents) this._installEvents(true);\n    },\n    getView: function () {\n      return this._project._view;\n    },\n    _installEvents: function _installEvents(install) {\n      _installEvents.base.call(this, install);\n      var children = this._children;\n      for (var i = 0, l = children && children.length; i < l; i++) children[i]._installEvents(install);\n    },\n    getLayer: function () {\n      var parent = this;\n      while (parent = parent._parent) {\n        if (parent instanceof Layer) return parent;\n      }\n      return null;\n    },\n    getParent: function () {\n      return this._parent;\n    },\n    setParent: function (item) {\n      return item.addChild(this);\n    },\n    _getOwner: '#getParent',\n    getChildren: function () {\n      return this._children;\n    },\n    setChildren: function (items) {\n      this.removeChildren();\n      this.addChildren(items);\n    },\n    getFirstChild: function () {\n      return this._children && this._children[0] || null;\n    },\n    getLastChild: function () {\n      return this._children && this._children[this._children.length - 1] || null;\n    },\n    getNextSibling: function () {\n      var owner = this._getOwner();\n      return owner && owner._children[this._index + 1] || null;\n    },\n    getPreviousSibling: function () {\n      var owner = this._getOwner();\n      return owner && owner._children[this._index - 1] || null;\n    },\n    getIndex: function () {\n      return this._index;\n    },\n    equals: function (item) {\n      return item === this || item && this._class === item._class && this._style.equals(item._style) && this._matrix.equals(item._matrix) && this._locked === item._locked && this._visible === item._visible && this._blendMode === item._blendMode && this._opacity === item._opacity && this._clipMask === item._clipMask && this._guide === item._guide && this._equals(item) || false;\n    },\n    _equals: function (item) {\n      return Base.equals(this._children, item._children);\n    },\n    clone: function (options) {\n      var copy = new this.constructor(Item.NO_INSERT),\n        children = this._children,\n        insert = Base.pick(options ? options.insert : undefined, options === undefined || options === true),\n        deep = Base.pick(options ? options.deep : undefined, true);\n      if (children) copy.copyAttributes(this);\n      if (!children || deep) copy.copyContent(this);\n      if (!children) copy.copyAttributes(this);\n      if (insert) copy.insertAbove(this);\n      var name = this._name,\n        parent = this._parent;\n      if (name && parent) {\n        var children = parent._children,\n          orig = name,\n          i = 1;\n        while (children[name]) name = orig + ' ' + i++;\n        if (name !== orig) copy.setName(name);\n      }\n      return copy;\n    },\n    copyContent: function (source) {\n      var children = source._children;\n      for (var i = 0, l = children && children.length; i < l; i++) {\n        this.addChild(children[i].clone(false), true);\n      }\n    },\n    copyAttributes: function (source, excludeMatrix) {\n      this.setStyle(source._style);\n      var keys = ['_locked', '_visible', '_blendMode', '_opacity', '_clipMask', '_guide'];\n      for (var i = 0, l = keys.length; i < l; i++) {\n        var key = keys[i];\n        if (source.hasOwnProperty(key)) this[key] = source[key];\n      }\n      if (!excludeMatrix) this._matrix.set(source._matrix, true);\n      this.setApplyMatrix(source._applyMatrix);\n      this.setPivot(source._pivot);\n      this.setSelection(source._selection);\n      var data = source._data,\n        name = source._name;\n      this._data = data ? Base.clone(data) : null;\n      if (name) this.setName(name);\n    },\n    rasterize: function (arg0, arg1) {\n      var resolution, insert, raster;\n      if (Base.isPlainObject(arg0)) {\n        resolution = arg0.resolution;\n        insert = arg0.insert;\n        raster = arg0.raster;\n      } else {\n        resolution = arg0;\n        insert = arg1;\n      }\n      if (raster) {\n        raster.matrix.reset(true);\n      } else {\n        raster = new Raster(Item.NO_INSERT);\n      }\n      var bounds = this.getStrokeBounds(),\n        scale = (resolution || this.getView().getResolution()) / 72,\n        topLeft = bounds.getTopLeft().floor(),\n        bottomRight = bounds.getBottomRight().ceil(),\n        boundsSize = new Size(bottomRight.subtract(topLeft)),\n        rasterSize = boundsSize.multiply(scale);\n      raster.setSize(rasterSize, true);\n      if (!rasterSize.isZero()) {\n        var ctx = raster.getContext(true),\n          matrix = new Matrix().scale(scale).translate(topLeft.negate());\n        ctx.save();\n        matrix.applyToContext(ctx);\n        this.draw(ctx, new Base({\n          matrices: [matrix]\n        }));\n        ctx.restore();\n      }\n      raster.transform(new Matrix().translate(topLeft.add(boundsSize.divide(2))).scale(1 / scale));\n      if (insert === undefined || insert) {\n        raster.insertAbove(this);\n      }\n      return raster;\n    },\n    contains: function () {\n      var matrix = this._matrix;\n      return matrix.isInvertible() && !!this._contains(matrix._inverseTransform(Point.read(arguments)));\n    },\n    _contains: function (point) {\n      var children = this._children;\n      if (children) {\n        for (var i = children.length - 1; i >= 0; i--) {\n          if (children[i].contains(point)) return true;\n        }\n        return false;\n      }\n      return point.isInside(this.getInternalBounds());\n    },\n    isInside: function () {\n      return Rectangle.read(arguments).contains(this.getBounds());\n    },\n    _asPathItem: function () {\n      return new Path.Rectangle({\n        rectangle: this.getInternalBounds(),\n        matrix: this._matrix,\n        insert: false\n      });\n    },\n    intersects: function (item, _matrix) {\n      if (!(item instanceof Item)) return false;\n      return this._asPathItem().getIntersections(item._asPathItem(), null, _matrix, true).length > 0;\n    }\n  }, new function () {\n    function hitTest() {\n      var args = arguments;\n      return this._hitTest(Point.read(args), HitResult.getOptions(args));\n    }\n    function hitTestAll() {\n      var args = arguments,\n        point = Point.read(args),\n        options = HitResult.getOptions(args),\n        all = [];\n      this._hitTest(point, new Base({\n        all: all\n      }, options));\n      return all;\n    }\n    function hitTestChildren(point, options, viewMatrix, _exclude) {\n      var children = this._children;\n      if (children) {\n        for (var i = children.length - 1; i >= 0; i--) {\n          var child = children[i];\n          var res = child !== _exclude && child._hitTest(point, options, viewMatrix);\n          if (res && !options.all) return res;\n        }\n      }\n      return null;\n    }\n    Project.inject({\n      hitTest: hitTest,\n      hitTestAll: hitTestAll,\n      _hitTest: hitTestChildren\n    });\n    return {\n      hitTest: hitTest,\n      hitTestAll: hitTestAll,\n      _hitTestChildren: hitTestChildren\n    };\n  }(), {\n    _hitTest: function (point, options, parentViewMatrix) {\n      if (this._locked || !this._visible || this._guide && !options.guides || this.isEmpty()) {\n        return null;\n      }\n      var matrix = this._matrix,\n        viewMatrix = parentViewMatrix ? parentViewMatrix.appended(matrix) : this.getGlobalMatrix().prepend(this.getView()._matrix),\n        tolerance = Math.max(options.tolerance, 1e-12),\n        tolerancePadding = options._tolerancePadding = new Size(Path._getStrokePadding(tolerance, matrix._shiftless().invert()));\n      point = matrix._inverseTransform(point);\n      if (!point || !this._children && !this.getBounds({\n        internal: true,\n        stroke: true,\n        handle: true\n      }).expand(tolerancePadding.multiply(2))._containsPoint(point)) {\n        return null;\n      }\n      var checkSelf = !(options.guides && !this._guide || options.selected && !this.isSelected() || options.type && options.type !== Base.hyphenate(this._class) || options.class && !(this instanceof options.class)),\n        match = options.match,\n        that = this,\n        bounds,\n        res;\n      function filter(hit) {\n        if (hit && match && !match(hit)) hit = null;\n        if (hit && options.all) options.all.push(hit);\n        return hit;\n      }\n      function checkPoint(type, part) {\n        var pt = part ? bounds['get' + part]() : that.getPosition();\n        if (point.subtract(pt).divide(tolerancePadding).length <= 1) {\n          return new HitResult(type, that, {\n            name: part ? Base.hyphenate(part) : type,\n            point: pt\n          });\n        }\n      }\n      var checkPosition = options.position,\n        checkCenter = options.center,\n        checkBounds = options.bounds;\n      if (checkSelf && this._parent && (checkPosition || checkCenter || checkBounds)) {\n        if (checkCenter || checkBounds) {\n          bounds = this.getInternalBounds();\n        }\n        res = checkPosition && checkPoint('position') || checkCenter && checkPoint('center', 'Center');\n        if (!res && checkBounds) {\n          var points = ['TopLeft', 'TopRight', 'BottomLeft', 'BottomRight', 'LeftCenter', 'TopCenter', 'RightCenter', 'BottomCenter'];\n          for (var i = 0; i < 8 && !res; i++) {\n            res = checkPoint('bounds', points[i]);\n          }\n        }\n        res = filter(res);\n      }\n      if (!res) {\n        res = this._hitTestChildren(point, options, viewMatrix) || checkSelf && filter(this._hitTestSelf(point, options, viewMatrix, this.getStrokeScaling() ? null : viewMatrix._shiftless().invert())) || null;\n      }\n      if (res && res.point) {\n        res.point = matrix.transform(res.point);\n      }\n      return res;\n    },\n    _hitTestSelf: function (point, options) {\n      if (options.fill && this.hasFill() && this._contains(point)) return new HitResult('fill', this);\n    },\n    matches: function (name, compare) {\n      function matchObject(obj1, obj2) {\n        for (var i in obj1) {\n          if (obj1.hasOwnProperty(i)) {\n            var val1 = obj1[i],\n              val2 = obj2[i];\n            if (Base.isPlainObject(val1) && Base.isPlainObject(val2)) {\n              if (!matchObject(val1, val2)) return false;\n            } else if (!Base.equals(val1, val2)) {\n              return false;\n            }\n          }\n        }\n        return true;\n      }\n      var type = typeof name;\n      if (type === 'object') {\n        for (var key in name) {\n          if (name.hasOwnProperty(key) && !this.matches(key, name[key])) return false;\n        }\n        return true;\n      } else if (type === 'function') {\n        return name(this);\n      } else if (name === 'match') {\n        return compare(this);\n      } else {\n        var value = /^(empty|editable)$/.test(name) ? this['is' + Base.capitalize(name)]() : name === 'type' ? Base.hyphenate(this._class) : this[name];\n        if (name === 'class') {\n          if (typeof compare === 'function') return this instanceof compare;\n          value = this._class;\n        }\n        if (typeof compare === 'function') {\n          return !!compare(value);\n        } else if (compare) {\n          if (compare.test) {\n            return compare.test(value);\n          } else if (Base.isPlainObject(compare)) {\n            return matchObject(compare, value);\n          }\n        }\n        return Base.equals(value, compare);\n      }\n    },\n    getItems: function (options) {\n      return Item._getItems(this, options, this._matrix);\n    },\n    getItem: function (options) {\n      return Item._getItems(this, options, this._matrix, null, true)[0] || null;\n    },\n    statics: {\n      _getItems: function _getItems(item, options, matrix, param, firstOnly) {\n        if (!param) {\n          var obj = typeof options === 'object' && options,\n            overlapping = obj && obj.overlapping,\n            inside = obj && obj.inside,\n            bounds = overlapping || inside,\n            rect = bounds && Rectangle.read([bounds]);\n          param = {\n            items: [],\n            recursive: obj && obj.recursive !== false,\n            inside: !!inside,\n            overlapping: !!overlapping,\n            rect: rect,\n            path: overlapping && new Path.Rectangle({\n              rectangle: rect,\n              insert: false\n            })\n          };\n          if (obj) {\n            options = Base.filter({}, options, {\n              recursive: true,\n              inside: true,\n              overlapping: true\n            });\n          }\n        }\n        var children = item._children,\n          items = param.items,\n          rect = param.rect;\n        matrix = rect && (matrix || new Matrix());\n        for (var i = 0, l = children && children.length; i < l; i++) {\n          var child = children[i],\n            childMatrix = matrix && matrix.appended(child._matrix),\n            add = true;\n          if (rect) {\n            var bounds = child.getBounds(childMatrix);\n            if (!rect.intersects(bounds)) continue;\n            if (!(rect.contains(bounds) || param.overlapping && (bounds.contains(rect) || param.path.intersects(child, childMatrix)))) add = false;\n          }\n          if (add && child.matches(options)) {\n            items.push(child);\n            if (firstOnly) break;\n          }\n          if (param.recursive !== false) {\n            _getItems(child, options, childMatrix, param, firstOnly);\n          }\n          if (firstOnly && items.length > 0) break;\n        }\n        return items;\n      }\n    }\n  }, {\n    importJSON: function (json) {\n      var res = Base.importJSON(json, this);\n      return res !== this ? this.addChild(res) : res;\n    },\n    addChild: function (item) {\n      return this.insertChild(undefined, item);\n    },\n    insertChild: function (index, item) {\n      var res = item ? this.insertChildren(index, [item]) : null;\n      return res && res[0];\n    },\n    addChildren: function (items) {\n      return this.insertChildren(this._children.length, items);\n    },\n    insertChildren: function (index, items) {\n      var children = this._children;\n      if (children && items && items.length > 0) {\n        items = Base.slice(items);\n        var inserted = {};\n        for (var i = items.length - 1; i >= 0; i--) {\n          var item = items[i],\n            id = item && item._id;\n          if (!item || inserted[id]) {\n            items.splice(i, 1);\n          } else {\n            item._remove(false, true);\n            inserted[id] = true;\n          }\n        }\n        Base.splice(children, items, index, 0);\n        var project = this._project,\n          notifySelf = project._changes;\n        for (var i = 0, l = items.length; i < l; i++) {\n          var item = items[i],\n            name = item._name;\n          item._parent = this;\n          item._setProject(project, true);\n          if (name) item.setName(name);\n          if (notifySelf) item._changed(5);\n        }\n        this._changed(11);\n      } else {\n        items = null;\n      }\n      return items;\n    },\n    _insertItem: '#insertChild',\n    _insertAt: function (item, offset) {\n      var owner = item && item._getOwner(),\n        res = item !== this && owner ? this : null;\n      if (res) {\n        res._remove(false, true);\n        owner._insertItem(item._index + offset, res);\n      }\n      return res;\n    },\n    insertAbove: function (item) {\n      return this._insertAt(item, 1);\n    },\n    insertBelow: function (item) {\n      return this._insertAt(item, 0);\n    },\n    sendToBack: function () {\n      var owner = this._getOwner();\n      return owner ? owner._insertItem(0, this) : null;\n    },\n    bringToFront: function () {\n      var owner = this._getOwner();\n      return owner ? owner._insertItem(undefined, this) : null;\n    },\n    appendTop: '#addChild',\n    appendBottom: function (item) {\n      return this.insertChild(0, item);\n    },\n    moveAbove: '#insertAbove',\n    moveBelow: '#insertBelow',\n    addTo: function (owner) {\n      return owner._insertItem(undefined, this);\n    },\n    copyTo: function (owner) {\n      return this.clone(false).addTo(owner);\n    },\n    reduce: function (options) {\n      var children = this._children;\n      if (children && children.length === 1) {\n        var child = children[0].reduce(options);\n        if (this._parent) {\n          child.insertAbove(this);\n          this.remove();\n        } else {\n          child.remove();\n        }\n        return child;\n      }\n      return this;\n    },\n    _removeNamed: function () {\n      var owner = this._getOwner();\n      if (owner) {\n        var children = owner._children,\n          namedChildren = owner._namedChildren,\n          name = this._name,\n          namedArray = namedChildren[name],\n          index = namedArray ? namedArray.indexOf(this) : -1;\n        if (index !== -1) {\n          if (children[name] == this) delete children[name];\n          namedArray.splice(index, 1);\n          if (namedArray.length) {\n            children[name] = namedArray[0];\n          } else {\n            delete namedChildren[name];\n          }\n        }\n      }\n    },\n    _remove: function (notifySelf, notifyParent) {\n      var owner = this._getOwner(),\n        project = this._project,\n        index = this._index;\n      if (this._style) this._style._dispose();\n      if (owner) {\n        if (this._name) this._removeNamed();\n        if (index != null) {\n          if (project._activeLayer === this) project._activeLayer = this.getNextSibling() || this.getPreviousSibling();\n          Base.splice(owner._children, null, index, 1);\n        }\n        this._installEvents(false);\n        if (notifySelf && project._changes) this._changed(5);\n        if (notifyParent) owner._changed(11, this);\n        this._parent = null;\n        return true;\n      }\n      return false;\n    },\n    remove: function () {\n      return this._remove(true, true);\n    },\n    replaceWith: function (item) {\n      var ok = item && item.insertBelow(this);\n      if (ok) this.remove();\n      return ok;\n    },\n    removeChildren: function (start, end) {\n      if (!this._children) return null;\n      start = start || 0;\n      end = Base.pick(end, this._children.length);\n      var removed = Base.splice(this._children, null, start, end - start);\n      for (var i = removed.length - 1; i >= 0; i--) {\n        removed[i]._remove(true, false);\n      }\n      if (removed.length > 0) this._changed(11);\n      return removed;\n    },\n    clear: '#removeChildren',\n    reverseChildren: function () {\n      if (this._children) {\n        this._children.reverse();\n        for (var i = 0, l = this._children.length; i < l; i++) this._children[i]._index = i;\n        this._changed(11);\n      }\n    },\n    isEmpty: function (recursively) {\n      var children = this._children;\n      var numChildren = children ? children.length : 0;\n      if (recursively) {\n        for (var i = 0; i < numChildren; i++) {\n          if (!children[i].isEmpty(recursively)) {\n            return false;\n          }\n        }\n        return true;\n      }\n      return !numChildren;\n    },\n    isEditable: function () {\n      var item = this;\n      while (item) {\n        if (!item._visible || item._locked) return false;\n        item = item._parent;\n      }\n      return true;\n    },\n    hasFill: function () {\n      return this.getStyle().hasFill();\n    },\n    hasStroke: function () {\n      return this.getStyle().hasStroke();\n    },\n    hasShadow: function () {\n      return this.getStyle().hasShadow();\n    },\n    _getOrder: function (item) {\n      function getList(item) {\n        var list = [];\n        do {\n          list.unshift(item);\n        } while (item = item._parent);\n        return list;\n      }\n      var list1 = getList(this),\n        list2 = getList(item);\n      for (var i = 0, l = Math.min(list1.length, list2.length); i < l; i++) {\n        if (list1[i] != list2[i]) {\n          return list1[i]._index < list2[i]._index ? 1 : -1;\n        }\n      }\n      return 0;\n    },\n    hasChildren: function () {\n      return this._children && this._children.length > 0;\n    },\n    isInserted: function () {\n      return this._parent ? this._parent.isInserted() : false;\n    },\n    isAbove: function (item) {\n      return this._getOrder(item) === -1;\n    },\n    isBelow: function (item) {\n      return this._getOrder(item) === 1;\n    },\n    isParent: function (item) {\n      return this._parent === item;\n    },\n    isChild: function (item) {\n      return item && item._parent === this;\n    },\n    isDescendant: function (item) {\n      var parent = this;\n      while (parent = parent._parent) {\n        if (parent === item) return true;\n      }\n      return false;\n    },\n    isAncestor: function (item) {\n      return item ? item.isDescendant(this) : false;\n    },\n    isSibling: function (item) {\n      return this._parent === item._parent;\n    },\n    isGroupedWith: function (item) {\n      var parent = this._parent;\n      while (parent) {\n        if (parent._parent && /^(Group|Layer|CompoundPath)$/.test(parent._class) && item.isDescendant(parent)) return true;\n        parent = parent._parent;\n      }\n      return false;\n    }\n  }, Base.each(['rotate', 'scale', 'shear', 'skew'], function (key) {\n    var rotate = key === 'rotate';\n    this[key] = function () {\n      var args = arguments,\n        value = (rotate ? Base : Point).read(args),\n        center = Point.read(args, 0, {\n          readNull: true\n        });\n      return this.transform(new Matrix()[key](value, center || this.getPosition(true)));\n    };\n  }, {\n    translate: function () {\n      var mx = new Matrix();\n      return this.transform(mx.translate.apply(mx, arguments));\n    },\n    transform: function (matrix, _applyRecursively, _setApplyMatrix) {\n      var _matrix = this._matrix,\n        transformMatrix = matrix && !matrix.isIdentity(),\n        applyMatrix = _setApplyMatrix && this._canApplyMatrix || this._applyMatrix && (transformMatrix || !_matrix.isIdentity() || _applyRecursively && this._children);\n      if (!transformMatrix && !applyMatrix) return this;\n      if (transformMatrix) {\n        if (!matrix.isInvertible() && _matrix.isInvertible()) _matrix._backup = _matrix.getValues();\n        _matrix.prepend(matrix, true);\n        var style = this._style,\n          fillColor = style.getFillColor(true),\n          strokeColor = style.getStrokeColor(true);\n        if (fillColor) fillColor.transform(matrix);\n        if (strokeColor) strokeColor.transform(matrix);\n      }\n      if (applyMatrix && (applyMatrix = this._transformContent(_matrix, _applyRecursively, _setApplyMatrix))) {\n        var pivot = this._pivot;\n        if (pivot) _matrix._transformPoint(pivot, pivot, true);\n        _matrix.reset(true);\n        if (_setApplyMatrix && this._canApplyMatrix) this._applyMatrix = true;\n      }\n      var bounds = this._bounds,\n        position = this._position;\n      if (transformMatrix || applyMatrix) {\n        this._changed(25);\n      }\n      var decomp = transformMatrix && bounds && matrix.decompose();\n      if (decomp && decomp.skewing.isZero() && decomp.rotation % 90 === 0) {\n        for (var key in bounds) {\n          var cache = bounds[key];\n          if (cache.nonscaling) {\n            delete bounds[key];\n          } else if (applyMatrix || !cache.internal) {\n            var rect = cache.rect;\n            matrix._transformBounds(rect, rect);\n          }\n        }\n        this._bounds = bounds;\n        var cached = bounds[this._getBoundsCacheKey(this._boundsOptions || {})];\n        if (cached) {\n          this._position = this._getPositionFromBounds(cached.rect);\n        }\n      } else if (transformMatrix && position && this._pivot) {\n        this._position = matrix._transformPoint(position, position);\n      }\n      return this;\n    },\n    _transformContent: function (matrix, applyRecursively, setApplyMatrix) {\n      var children = this._children;\n      if (children) {\n        for (var i = 0, l = children.length; i < l; i++) {\n          children[i].transform(matrix, applyRecursively, setApplyMatrix);\n        }\n        return true;\n      }\n    },\n    globalToLocal: function () {\n      return this.getGlobalMatrix(true)._inverseTransform(Point.read(arguments));\n    },\n    localToGlobal: function () {\n      return this.getGlobalMatrix(true)._transformPoint(Point.read(arguments));\n    },\n    parentToLocal: function () {\n      return this._matrix._inverseTransform(Point.read(arguments));\n    },\n    localToParent: function () {\n      return this._matrix._transformPoint(Point.read(arguments));\n    },\n    fitBounds: function (rectangle, fill) {\n      rectangle = Rectangle.read(arguments);\n      var bounds = this.getBounds(),\n        itemRatio = bounds.height / bounds.width,\n        rectRatio = rectangle.height / rectangle.width,\n        scale = (fill ? itemRatio > rectRatio : itemRatio < rectRatio) ? rectangle.width / bounds.width : rectangle.height / bounds.height,\n        newBounds = new Rectangle(new Point(), new Size(bounds.width * scale, bounds.height * scale));\n      newBounds.setCenter(rectangle.getCenter());\n      this.setBounds(newBounds);\n    }\n  }), {\n    _setStyles: function (ctx, param, viewMatrix) {\n      var style = this._style,\n        matrix = this._matrix;\n      if (style.hasFill()) {\n        ctx.fillStyle = style.getFillColor().toCanvasStyle(ctx, matrix);\n      }\n      if (style.hasStroke()) {\n        ctx.strokeStyle = style.getStrokeColor().toCanvasStyle(ctx, matrix);\n        ctx.lineWidth = style.getStrokeWidth();\n        var strokeJoin = style.getStrokeJoin(),\n          strokeCap = style.getStrokeCap(),\n          miterLimit = style.getMiterLimit();\n        if (strokeJoin) ctx.lineJoin = strokeJoin;\n        if (strokeCap) ctx.lineCap = strokeCap;\n        if (miterLimit) ctx.miterLimit = miterLimit;\n        if (paper.support.nativeDash) {\n          var dashArray = style.getDashArray(),\n            dashOffset = style.getDashOffset();\n          if (dashArray && dashArray.length) {\n            if ('setLineDash' in ctx) {\n              ctx.setLineDash(dashArray);\n              ctx.lineDashOffset = dashOffset;\n            } else {\n              ctx.mozDash = dashArray;\n              ctx.mozDashOffset = dashOffset;\n            }\n          }\n        }\n      }\n      if (style.hasShadow()) {\n        var pixelRatio = param.pixelRatio || 1,\n          mx = viewMatrix._shiftless().prepend(new Matrix().scale(pixelRatio, pixelRatio)),\n          blur = mx.transform(new Point(style.getShadowBlur(), 0)),\n          offset = mx.transform(this.getShadowOffset());\n        ctx.shadowColor = style.getShadowColor().toCanvasStyle(ctx);\n        ctx.shadowBlur = blur.getLength();\n        ctx.shadowOffsetX = offset.x;\n        ctx.shadowOffsetY = offset.y;\n      }\n    },\n    draw: function (ctx, param, parentStrokeMatrix) {\n      var updateVersion = this._updateVersion = this._project._updateVersion;\n      if (!this._visible || this._opacity === 0) return;\n      var matrices = param.matrices,\n        viewMatrix = param.viewMatrix,\n        matrix = this._matrix,\n        globalMatrix = matrices[matrices.length - 1].appended(matrix);\n      if (!globalMatrix.isInvertible()) return;\n      viewMatrix = viewMatrix ? viewMatrix.appended(globalMatrix) : globalMatrix;\n      matrices.push(globalMatrix);\n      if (param.updateMatrix) {\n        this._globalMatrix = globalMatrix;\n      }\n      var blendMode = this._blendMode,\n        opacity = Numerical.clamp(this._opacity, 0, 1),\n        normalBlend = blendMode === 'normal',\n        nativeBlend = BlendMode.nativeModes[blendMode],\n        direct = normalBlend && opacity === 1 || param.dontStart || param.clip || (nativeBlend || normalBlend && opacity < 1) && this._canComposite(),\n        pixelRatio = param.pixelRatio || 1,\n        mainCtx,\n        itemOffset,\n        prevOffset;\n      if (!direct) {\n        var bounds = this.getStrokeBounds(viewMatrix);\n        if (!bounds.width || !bounds.height) {\n          matrices.pop();\n          return;\n        }\n        prevOffset = param.offset;\n        itemOffset = param.offset = bounds.getTopLeft().floor();\n        mainCtx = ctx;\n        ctx = CanvasProvider.getContext(bounds.getSize().ceil().add(1).multiply(pixelRatio));\n        if (pixelRatio !== 1) ctx.scale(pixelRatio, pixelRatio);\n      }\n      ctx.save();\n      var strokeMatrix = parentStrokeMatrix ? parentStrokeMatrix.appended(matrix) : this._canScaleStroke && !this.getStrokeScaling(true) && viewMatrix,\n        clip = !direct && param.clipItem,\n        transform = !strokeMatrix || clip;\n      if (direct) {\n        ctx.globalAlpha = opacity;\n        if (nativeBlend) ctx.globalCompositeOperation = blendMode;\n      } else if (transform) {\n        ctx.translate(-itemOffset.x, -itemOffset.y);\n      }\n      if (transform) {\n        (direct ? matrix : viewMatrix).applyToContext(ctx);\n      }\n      if (clip) {\n        param.clipItem.draw(ctx, param.extend({\n          clip: true\n        }));\n      }\n      if (strokeMatrix) {\n        ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n        var offset = param.offset;\n        if (offset) ctx.translate(-offset.x, -offset.y);\n      }\n      this._draw(ctx, param, viewMatrix, strokeMatrix);\n      ctx.restore();\n      matrices.pop();\n      if (param.clip && !param.dontFinish) {\n        ctx.clip(this.getFillRule());\n      }\n      if (!direct) {\n        BlendMode.process(blendMode, ctx, mainCtx, opacity, itemOffset.subtract(prevOffset).multiply(pixelRatio));\n        CanvasProvider.release(ctx);\n        param.offset = prevOffset;\n      }\n    },\n    _isUpdated: function (updateVersion) {\n      var parent = this._parent;\n      if (parent instanceof CompoundPath) return parent._isUpdated(updateVersion);\n      var updated = this._updateVersion === updateVersion;\n      if (!updated && parent && parent._visible && parent._isUpdated(updateVersion)) {\n        this._updateVersion = updateVersion;\n        updated = true;\n      }\n      return updated;\n    },\n    _drawSelection: function (ctx, matrix, size, selectionItems, updateVersion) {\n      var selection = this._selection,\n        itemSelected = selection & 1,\n        boundsSelected = selection & 2 || itemSelected && this._selectBounds,\n        positionSelected = selection & 4;\n      if (!this._drawSelected) itemSelected = false;\n      if ((itemSelected || boundsSelected || positionSelected) && this._isUpdated(updateVersion)) {\n        var layer,\n          color = this.getSelectedColor(true) || (layer = this.getLayer()) && layer.getSelectedColor(true),\n          mx = matrix.appended(this.getGlobalMatrix(true)),\n          half = size / 2;\n        ctx.strokeStyle = ctx.fillStyle = color ? color.toCanvasStyle(ctx) : '#009dec';\n        if (itemSelected) this._drawSelected(ctx, mx, selectionItems);\n        if (positionSelected) {\n          var pos = this.getPosition(true),\n            parent = this._parent,\n            point = parent ? parent.localToGlobal(pos) : pos,\n            x = point.x,\n            y = point.y;\n          ctx.beginPath();\n          ctx.arc(x, y, half, 0, Math.PI * 2, true);\n          ctx.stroke();\n          var deltas = [[0, -1], [1, 0], [0, 1], [-1, 0]],\n            start = half,\n            end = size + 1;\n          for (var i = 0; i < 4; i++) {\n            var delta = deltas[i],\n              dx = delta[0],\n              dy = delta[1];\n            ctx.moveTo(x + dx * start, y + dy * start);\n            ctx.lineTo(x + dx * end, y + dy * end);\n            ctx.stroke();\n          }\n        }\n        if (boundsSelected) {\n          var coords = mx._transformCorners(this.getInternalBounds());\n          ctx.beginPath();\n          for (var i = 0; i < 8; i++) {\n            ctx[!i ? 'moveTo' : 'lineTo'](coords[i], coords[++i]);\n          }\n          ctx.closePath();\n          ctx.stroke();\n          for (var i = 0; i < 8; i++) {\n            ctx.fillRect(coords[i] - half, coords[++i] - half, size, size);\n          }\n        }\n      }\n    },\n    _canComposite: function () {\n      return false;\n    }\n  }, Base.each(['down', 'drag', 'up', 'move'], function (key) {\n    this['removeOn' + Base.capitalize(key)] = function () {\n      var hash = {};\n      hash[key] = true;\n      return this.removeOn(hash);\n    };\n  }, {\n    removeOn: function (obj) {\n      for (var name in obj) {\n        if (obj[name]) {\n          var key = 'mouse' + name,\n            project = this._project,\n            sets = project._removeSets = project._removeSets || {};\n          sets[key] = sets[key] || {};\n          sets[key][this._id] = this;\n        }\n      }\n      return this;\n    }\n  }), {\n    tween: function (from, to, options) {\n      if (!options) {\n        options = to;\n        to = from;\n        from = null;\n        if (!options) {\n          options = to;\n          to = null;\n        }\n      }\n      var easing = options && options.easing,\n        start = options && options.start,\n        duration = options != null && (typeof options === 'number' ? options : options.duration),\n        tween = new Tween(this, from, to, duration, easing, start);\n      function onFrame(event) {\n        tween._handleFrame(event.time * 1000);\n        if (!tween.running) {\n          this.off('frame', onFrame);\n        }\n      }\n      if (duration) {\n        this.on('frame', onFrame);\n      }\n      return tween;\n    },\n    tweenTo: function (to, options) {\n      return this.tween(null, to, options);\n    },\n    tweenFrom: function (from, options) {\n      return this.tween(from, null, options);\n    }\n  });\n  var Group = Item.extend({\n    _class: 'Group',\n    _selectBounds: false,\n    _selectChildren: true,\n    _serializeFields: {\n      children: []\n    },\n    initialize: function Group(arg) {\n      this._children = [];\n      this._namedChildren = {};\n      if (!this._initialize(arg)) this.addChildren(Array.isArray(arg) ? arg : arguments);\n    },\n    _changed: function _changed(flags) {\n      _changed.base.call(this, flags);\n      if (flags & 2050) {\n        this._clipItem = undefined;\n      }\n    },\n    _getClipItem: function () {\n      var clipItem = this._clipItem;\n      if (clipItem === undefined) {\n        clipItem = null;\n        var children = this._children;\n        for (var i = 0, l = children.length; i < l; i++) {\n          if (children[i]._clipMask) {\n            clipItem = children[i];\n            break;\n          }\n        }\n        this._clipItem = clipItem;\n      }\n      return clipItem;\n    },\n    isClipped: function () {\n      return !!this._getClipItem();\n    },\n    setClipped: function (clipped) {\n      var child = this.getFirstChild();\n      if (child) child.setClipMask(clipped);\n    },\n    _getBounds: function _getBounds(matrix, options) {\n      var clipItem = this._getClipItem();\n      return clipItem ? clipItem._getCachedBounds(clipItem._matrix.prepended(matrix), Base.set({}, options, {\n        stroke: false\n      })) : _getBounds.base.call(this, matrix, options);\n    },\n    _hitTestChildren: function _hitTestChildren(point, options, viewMatrix) {\n      var clipItem = this._getClipItem();\n      return (!clipItem || clipItem.contains(point)) && _hitTestChildren.base.call(this, point, options, viewMatrix, clipItem);\n    },\n    _draw: function (ctx, param) {\n      var clip = param.clip,\n        clipItem = !clip && this._getClipItem();\n      param = param.extend({\n        clipItem: clipItem,\n        clip: false\n      });\n      if (clip) {\n        ctx.beginPath();\n        param.dontStart = param.dontFinish = true;\n      } else if (clipItem) {\n        clipItem.draw(ctx, param.extend({\n          clip: true\n        }));\n      }\n      var children = this._children;\n      for (var i = 0, l = children.length; i < l; i++) {\n        var item = children[i];\n        if (item !== clipItem) item.draw(ctx, param);\n      }\n    }\n  });\n  var Layer = Group.extend({\n    _class: 'Layer',\n    initialize: function Layer() {\n      Group.apply(this, arguments);\n    },\n    _getOwner: function () {\n      return this._parent || this._index != null && this._project;\n    },\n    isInserted: function isInserted() {\n      return this._parent ? isInserted.base.call(this) : this._index != null;\n    },\n    activate: function () {\n      this._project._activeLayer = this;\n    },\n    _hitTestSelf: function () {}\n  });\n  var Shape = Item.extend({\n    _class: 'Shape',\n    _applyMatrix: false,\n    _canApplyMatrix: false,\n    _canScaleStroke: true,\n    _serializeFields: {\n      type: null,\n      size: null,\n      radius: null\n    },\n    initialize: function Shape(props, point) {\n      this._initialize(props, point);\n    },\n    _equals: function (item) {\n      return this._type === item._type && this._size.equals(item._size) && Base.equals(this._radius, item._radius);\n    },\n    copyContent: function (source) {\n      this.setType(source._type);\n      this.setSize(source._size);\n      this.setRadius(source._radius);\n    },\n    getType: function () {\n      return this._type;\n    },\n    setType: function (type) {\n      this._type = type;\n    },\n    getShape: '#getType',\n    setShape: '#setType',\n    getSize: function () {\n      var size = this._size;\n      return new LinkedSize(size.width, size.height, this, 'setSize');\n    },\n    setSize: function () {\n      var size = Size.read(arguments);\n      if (!this._size) {\n        this._size = size.clone();\n      } else if (!this._size.equals(size)) {\n        var type = this._type,\n          width = size.width,\n          height = size.height;\n        if (type === 'rectangle') {\n          this._radius.set(Size.min(this._radius, size.divide(2).abs()));\n        } else if (type === 'circle') {\n          width = height = (width + height) / 2;\n          this._radius = width / 2;\n        } else if (type === 'ellipse') {\n          this._radius._set(width / 2, height / 2);\n        }\n        this._size._set(width, height);\n        this._changed(9);\n      }\n    },\n    getRadius: function () {\n      var rad = this._radius;\n      return this._type === 'circle' ? rad : new LinkedSize(rad.width, rad.height, this, 'setRadius');\n    },\n    setRadius: function (radius) {\n      var type = this._type;\n      if (type === 'circle') {\n        if (radius === this._radius) return;\n        var size = radius * 2;\n        this._radius = radius;\n        this._size._set(size, size);\n      } else {\n        radius = Size.read(arguments);\n        if (!this._radius) {\n          this._radius = radius.clone();\n        } else {\n          if (this._radius.equals(radius)) return;\n          this._radius.set(radius);\n          if (type === 'rectangle') {\n            var size = Size.max(this._size, radius.multiply(2));\n            this._size.set(size);\n          } else if (type === 'ellipse') {\n            this._size._set(radius.width * 2, radius.height * 2);\n          }\n        }\n      }\n      this._changed(9);\n    },\n    isEmpty: function () {\n      return false;\n    },\n    toPath: function (insert) {\n      var path = new Path[Base.capitalize(this._type)]({\n        center: new Point(),\n        size: this._size,\n        radius: this._radius,\n        insert: false\n      });\n      path.copyAttributes(this);\n      if (paper.settings.applyMatrix) path.setApplyMatrix(true);\n      if (insert === undefined || insert) path.insertAbove(this);\n      return path;\n    },\n    toShape: '#clone',\n    _asPathItem: function () {\n      return this.toPath(false);\n    },\n    _draw: function (ctx, param, viewMatrix, strokeMatrix) {\n      var style = this._style,\n        hasFill = style.hasFill(),\n        hasStroke = style.hasStroke(),\n        dontPaint = param.dontFinish || param.clip,\n        untransformed = !strokeMatrix;\n      if (hasFill || hasStroke || dontPaint) {\n        var type = this._type,\n          radius = this._radius,\n          isCircle = type === 'circle';\n        if (!param.dontStart) ctx.beginPath();\n        if (untransformed && isCircle) {\n          ctx.arc(0, 0, radius, 0, Math.PI * 2, true);\n        } else {\n          var rx = isCircle ? radius : radius.width,\n            ry = isCircle ? radius : radius.height,\n            size = this._size,\n            width = size.width,\n            height = size.height;\n          if (untransformed && type === 'rectangle' && rx === 0 && ry === 0) {\n            ctx.rect(-width / 2, -height / 2, width, height);\n          } else {\n            var x = width / 2,\n              y = height / 2,\n              kappa = 1 - 0.5522847498307936,\n              cx = rx * kappa,\n              cy = ry * kappa,\n              c = [-x, -y + ry, -x, -y + cy, -x + cx, -y, -x + rx, -y, x - rx, -y, x - cx, -y, x, -y + cy, x, -y + ry, x, y - ry, x, y - cy, x - cx, y, x - rx, y, -x + rx, y, -x + cx, y, -x, y - cy, -x, y - ry];\n            if (strokeMatrix) strokeMatrix.transform(c, c, 32);\n            ctx.moveTo(c[0], c[1]);\n            ctx.bezierCurveTo(c[2], c[3], c[4], c[5], c[6], c[7]);\n            if (x !== rx) ctx.lineTo(c[8], c[9]);\n            ctx.bezierCurveTo(c[10], c[11], c[12], c[13], c[14], c[15]);\n            if (y !== ry) ctx.lineTo(c[16], c[17]);\n            ctx.bezierCurveTo(c[18], c[19], c[20], c[21], c[22], c[23]);\n            if (x !== rx) ctx.lineTo(c[24], c[25]);\n            ctx.bezierCurveTo(c[26], c[27], c[28], c[29], c[30], c[31]);\n          }\n        }\n        ctx.closePath();\n      }\n      if (!dontPaint && (hasFill || hasStroke)) {\n        this._setStyles(ctx, param, viewMatrix);\n        if (hasFill) {\n          ctx.fill(style.getFillRule());\n          ctx.shadowColor = 'rgba(0,0,0,0)';\n        }\n        if (hasStroke) ctx.stroke();\n      }\n    },\n    _canComposite: function () {\n      return !(this.hasFill() && this.hasStroke());\n    },\n    _getBounds: function (matrix, options) {\n      var rect = new Rectangle(this._size).setCenter(0, 0),\n        style = this._style,\n        strokeWidth = options.stroke && style.hasStroke() && style.getStrokeWidth();\n      if (matrix) rect = matrix._transformBounds(rect);\n      return strokeWidth ? rect.expand(Path._getStrokePadding(strokeWidth, this._getStrokeMatrix(matrix, options))) : rect;\n    }\n  }, new function () {\n    function getCornerCenter(that, point, expand) {\n      var radius = that._radius;\n      if (!radius.isZero()) {\n        var halfSize = that._size.divide(2);\n        for (var q = 1; q <= 4; q++) {\n          var dir = new Point(q > 1 && q < 4 ? -1 : 1, q > 2 ? -1 : 1),\n            corner = dir.multiply(halfSize),\n            center = corner.subtract(dir.multiply(radius)),\n            rect = new Rectangle(expand ? corner.add(dir.multiply(expand)) : corner, center);\n          if (rect.contains(point)) return {\n            point: center,\n            quadrant: q\n          };\n        }\n      }\n    }\n    function isOnEllipseStroke(point, radius, padding, quadrant) {\n      var vector = point.divide(radius);\n      return (!quadrant || vector.isInQuadrant(quadrant)) && vector.subtract(vector.normalize()).multiply(radius).divide(padding).length <= 1;\n    }\n    return {\n      _contains: function _contains(point) {\n        if (this._type === 'rectangle') {\n          var center = getCornerCenter(this, point);\n          return center ? point.subtract(center.point).divide(this._radius).getLength() <= 1 : _contains.base.call(this, point);\n        } else {\n          return point.divide(this.size).getLength() <= 0.5;\n        }\n      },\n      _hitTestSelf: function _hitTestSelf(point, options, viewMatrix, strokeMatrix) {\n        var hit = false,\n          style = this._style,\n          hitStroke = options.stroke && style.hasStroke(),\n          hitFill = options.fill && style.hasFill();\n        if (hitStroke || hitFill) {\n          var type = this._type,\n            radius = this._radius,\n            strokeRadius = hitStroke ? style.getStrokeWidth() / 2 : 0,\n            strokePadding = options._tolerancePadding.add(Path._getStrokePadding(strokeRadius, !style.getStrokeScaling() && strokeMatrix));\n          if (type === 'rectangle') {\n            var padding = strokePadding.multiply(2),\n              center = getCornerCenter(this, point, padding);\n            if (center) {\n              hit = isOnEllipseStroke(point.subtract(center.point), radius, strokePadding, center.quadrant);\n            } else {\n              var rect = new Rectangle(this._size).setCenter(0, 0),\n                outer = rect.expand(padding),\n                inner = rect.expand(padding.negate());\n              hit = outer._containsPoint(point) && !inner._containsPoint(point);\n            }\n          } else {\n            hit = isOnEllipseStroke(point, radius, strokePadding);\n          }\n        }\n        return hit ? new HitResult(hitStroke ? 'stroke' : 'fill', this) : _hitTestSelf.base.apply(this, arguments);\n      }\n    };\n  }(), {\n    statics: new function () {\n      function createShape(type, point, size, radius, args) {\n        var item = Base.create(Shape.prototype);\n        item._type = type;\n        item._size = size;\n        item._radius = radius;\n        item._initialize(Base.getNamed(args), point);\n        return item;\n      }\n      return {\n        Circle: function () {\n          var args = arguments,\n            center = Point.readNamed(args, 'center'),\n            radius = Base.readNamed(args, 'radius');\n          return createShape('circle', center, new Size(radius * 2), radius, args);\n        },\n        Rectangle: function () {\n          var args = arguments,\n            rect = Rectangle.readNamed(args, 'rectangle'),\n            radius = Size.min(Size.readNamed(args, 'radius'), rect.getSize(true).divide(2));\n          return createShape('rectangle', rect.getCenter(true), rect.getSize(true), radius, args);\n        },\n        Ellipse: function () {\n          var args = arguments,\n            ellipse = Shape._readEllipse(args),\n            radius = ellipse.radius;\n          return createShape('ellipse', ellipse.center, radius.multiply(2), radius, args);\n        },\n        _readEllipse: function (args) {\n          var center, radius;\n          if (Base.hasNamed(args, 'radius')) {\n            center = Point.readNamed(args, 'center');\n            radius = Size.readNamed(args, 'radius');\n          } else {\n            var rect = Rectangle.readNamed(args, 'rectangle');\n            center = rect.getCenter(true);\n            radius = rect.getSize(true).divide(2);\n          }\n          return {\n            center: center,\n            radius: radius\n          };\n        }\n      };\n    }()\n  });\n  var Raster = Item.extend({\n    _class: 'Raster',\n    _applyMatrix: false,\n    _canApplyMatrix: false,\n    _boundsOptions: {\n      stroke: false,\n      handle: false\n    },\n    _serializeFields: {\n      crossOrigin: null,\n      source: null\n    },\n    _prioritize: ['crossOrigin'],\n    _smoothing: 'low',\n    beans: true,\n    initialize: function Raster(source, position) {\n      if (!this._initialize(source, position !== undefined && Point.read(arguments))) {\n        var image,\n          type = typeof source,\n          object = type === 'string' ? document.getElementById(source) : type === 'object' ? source : null;\n        if (object && object !== Item.NO_INSERT) {\n          if (object.getContext || object.naturalHeight != null) {\n            image = object;\n          } else if (object) {\n            var size = Size.read(arguments);\n            if (!size.isZero()) {\n              image = CanvasProvider.getCanvas(size);\n            }\n          }\n        }\n        if (image) {\n          this.setImage(image);\n        } else {\n          this.setSource(source);\n        }\n      }\n      if (!this._size) {\n        this._size = new Size();\n        this._loaded = false;\n      }\n    },\n    _equals: function (item) {\n      return this.getSource() === item.getSource();\n    },\n    copyContent: function (source) {\n      var image = source._image,\n        canvas = source._canvas;\n      if (image) {\n        this._setImage(image);\n      } else if (canvas) {\n        var copyCanvas = CanvasProvider.getCanvas(source._size);\n        copyCanvas.getContext('2d').drawImage(canvas, 0, 0);\n        this._setImage(copyCanvas);\n      }\n      this._crossOrigin = source._crossOrigin;\n    },\n    getSize: function () {\n      var size = this._size;\n      return new LinkedSize(size ? size.width : 0, size ? size.height : 0, this, 'setSize');\n    },\n    setSize: function (_size, _clear) {\n      var size = Size.read(arguments);\n      if (!size.equals(this._size)) {\n        if (size.width > 0 && size.height > 0) {\n          var element = !_clear && this.getElement();\n          this._setImage(CanvasProvider.getCanvas(size));\n          if (element) {\n            this.getContext(true).drawImage(element, 0, 0, size.width, size.height);\n          }\n        } else {\n          if (this._canvas) CanvasProvider.release(this._canvas);\n          this._size = size.clone();\n        }\n      } else if (_clear) {\n        this.clear();\n      }\n    },\n    getWidth: function () {\n      return this._size ? this._size.width : 0;\n    },\n    setWidth: function (width) {\n      this.setSize(width, this.getHeight());\n    },\n    getHeight: function () {\n      return this._size ? this._size.height : 0;\n    },\n    setHeight: function (height) {\n      this.setSize(this.getWidth(), height);\n    },\n    getLoaded: function () {\n      return this._loaded;\n    },\n    isEmpty: function () {\n      var size = this._size;\n      return !size || size.width === 0 && size.height === 0;\n    },\n    getResolution: function () {\n      var matrix = this._matrix,\n        orig = new Point(0, 0).transform(matrix),\n        u = new Point(1, 0).transform(matrix).subtract(orig),\n        v = new Point(0, 1).transform(matrix).subtract(orig);\n      return new Size(72 / u.getLength(), 72 / v.getLength());\n    },\n    getPpi: '#getResolution',\n    getImage: function () {\n      return this._image;\n    },\n    setImage: function (image) {\n      var that = this;\n      function emit(event) {\n        var view = that.getView(),\n          type = event && event.type || 'load';\n        if (view && that.responds(type)) {\n          paper = view._scope;\n          that.emit(type, new Event(event));\n        }\n      }\n      this._setImage(image);\n      if (this._loaded) {\n        setTimeout(emit, 0);\n      } else if (image) {\n        DomEvent.add(image, {\n          load: function (event) {\n            that._setImage(image);\n            emit(event);\n          },\n          error: emit\n        });\n      }\n    },\n    _setImage: function (image) {\n      if (this._canvas) CanvasProvider.release(this._canvas);\n      if (image && image.getContext) {\n        this._image = null;\n        this._canvas = image;\n        this._loaded = true;\n      } else {\n        this._image = image;\n        this._canvas = null;\n        this._loaded = !!(image && image.src && image.complete);\n      }\n      this._size = new Size(image ? image.naturalWidth || image.width : 0, image ? image.naturalHeight || image.height : 0);\n      this._context = null;\n      this._changed(1033);\n    },\n    getCanvas: function () {\n      if (!this._canvas) {\n        var ctx = CanvasProvider.getContext(this._size);\n        try {\n          if (this._image) ctx.drawImage(this._image, 0, 0);\n          this._canvas = ctx.canvas;\n        } catch (e) {\n          CanvasProvider.release(ctx);\n        }\n      }\n      return this._canvas;\n    },\n    setCanvas: '#setImage',\n    getContext: function (_change) {\n      if (!this._context) this._context = this.getCanvas().getContext('2d');\n      if (_change) {\n        this._image = null;\n        this._changed(1025);\n      }\n      return this._context;\n    },\n    setContext: function (context) {\n      this._context = context;\n    },\n    getSource: function () {\n      var image = this._image;\n      return image && image.src || this.toDataURL();\n    },\n    setSource: function (src) {\n      var image = new self.Image(),\n        crossOrigin = this._crossOrigin;\n      if (crossOrigin) image.crossOrigin = crossOrigin;\n      if (src) image.src = src;\n      this.setImage(image);\n    },\n    getCrossOrigin: function () {\n      var image = this._image;\n      return image && image.crossOrigin || this._crossOrigin || '';\n    },\n    setCrossOrigin: function (crossOrigin) {\n      this._crossOrigin = crossOrigin;\n      var image = this._image;\n      if (image) image.crossOrigin = crossOrigin;\n    },\n    getSmoothing: function () {\n      return this._smoothing;\n    },\n    setSmoothing: function (smoothing) {\n      this._smoothing = typeof smoothing === 'string' ? smoothing : smoothing ? 'low' : 'off';\n      this._changed(257);\n    },\n    getElement: function () {\n      return this._canvas || this._loaded && this._image;\n    }\n  }, {\n    beans: false,\n    getSubCanvas: function () {\n      var rect = Rectangle.read(arguments),\n        ctx = CanvasProvider.getContext(rect.getSize());\n      ctx.drawImage(this.getCanvas(), rect.x, rect.y, rect.width, rect.height, 0, 0, rect.width, rect.height);\n      return ctx.canvas;\n    },\n    getSubRaster: function () {\n      var rect = Rectangle.read(arguments),\n        raster = new Raster(Item.NO_INSERT);\n      raster._setImage(this.getSubCanvas(rect));\n      raster.translate(rect.getCenter().subtract(this.getSize().divide(2)));\n      raster._matrix.prepend(this._matrix);\n      raster.insertAbove(this);\n      return raster;\n    },\n    toDataURL: function () {\n      var image = this._image,\n        src = image && image.src;\n      if (/^data:/.test(src)) return src;\n      var canvas = this.getCanvas();\n      return canvas ? canvas.toDataURL.apply(canvas, arguments) : null;\n    },\n    drawImage: function (image) {\n      var point = Point.read(arguments, 1);\n      this.getContext(true).drawImage(image, point.x, point.y);\n    },\n    getAverageColor: function (object) {\n      var bounds, path;\n      if (!object) {\n        bounds = this.getBounds();\n      } else if (object instanceof PathItem) {\n        path = object;\n        bounds = object.getBounds();\n      } else if (typeof object === 'object') {\n        if ('width' in object) {\n          bounds = new Rectangle(object);\n        } else if ('x' in object) {\n          bounds = new Rectangle(object.x - 0.5, object.y - 0.5, 1, 1);\n        }\n      }\n      if (!bounds) return null;\n      var sampleSize = 32,\n        width = Math.min(bounds.width, sampleSize),\n        height = Math.min(bounds.height, sampleSize);\n      var ctx = Raster._sampleContext;\n      if (!ctx) {\n        ctx = Raster._sampleContext = CanvasProvider.getContext(new Size(sampleSize));\n      } else {\n        ctx.clearRect(0, 0, sampleSize + 1, sampleSize + 1);\n      }\n      ctx.save();\n      var matrix = new Matrix().scale(width / bounds.width, height / bounds.height).translate(-bounds.x, -bounds.y);\n      matrix.applyToContext(ctx);\n      if (path) path.draw(ctx, new Base({\n        clip: true,\n        matrices: [matrix]\n      }));\n      this._matrix.applyToContext(ctx);\n      var element = this.getElement(),\n        size = this._size;\n      if (element) ctx.drawImage(element, -size.width / 2, -size.height / 2);\n      ctx.restore();\n      var pixels = ctx.getImageData(0.5, 0.5, Math.ceil(width), Math.ceil(height)).data,\n        channels = [0, 0, 0],\n        total = 0;\n      for (var i = 0, l = pixels.length; i < l; i += 4) {\n        var alpha = pixels[i + 3];\n        total += alpha;\n        alpha /= 255;\n        channels[0] += pixels[i] * alpha;\n        channels[1] += pixels[i + 1] * alpha;\n        channels[2] += pixels[i + 2] * alpha;\n      }\n      for (var i = 0; i < 3; i++) channels[i] /= total;\n      return total ? Color.read(channels) : null;\n    },\n    getPixel: function () {\n      var point = Point.read(arguments);\n      var data = this.getContext().getImageData(point.x, point.y, 1, 1).data;\n      return new Color('rgb', [data[0] / 255, data[1] / 255, data[2] / 255], data[3] / 255);\n    },\n    setPixel: function () {\n      var args = arguments,\n        point = Point.read(args),\n        color = Color.read(args),\n        components = color._convert('rgb'),\n        alpha = color._alpha,\n        ctx = this.getContext(true),\n        imageData = ctx.createImageData(1, 1),\n        data = imageData.data;\n      data[0] = components[0] * 255;\n      data[1] = components[1] * 255;\n      data[2] = components[2] * 255;\n      data[3] = alpha != null ? alpha * 255 : 255;\n      ctx.putImageData(imageData, point.x, point.y);\n    },\n    clear: function () {\n      var size = this._size;\n      this.getContext(true).clearRect(0, 0, size.width + 1, size.height + 1);\n    },\n    createImageData: function () {\n      var size = Size.read(arguments);\n      return this.getContext().createImageData(size.width, size.height);\n    },\n    getImageData: function () {\n      var rect = Rectangle.read(arguments);\n      if (rect.isEmpty()) rect = new Rectangle(this._size);\n      return this.getContext().getImageData(rect.x, rect.y, rect.width, rect.height);\n    },\n    setImageData: function (data) {\n      var point = Point.read(arguments, 1);\n      this.getContext(true).putImageData(data, point.x, point.y);\n    },\n    _getBounds: function (matrix, options) {\n      var rect = new Rectangle(this._size).setCenter(0, 0);\n      return matrix ? matrix._transformBounds(rect) : rect;\n    },\n    _hitTestSelf: function (point) {\n      if (this._contains(point)) {\n        var that = this;\n        return new HitResult('pixel', that, {\n          offset: point.add(that._size.divide(2)).round(),\n          color: {\n            get: function () {\n              return that.getPixel(this.offset);\n            }\n          }\n        });\n      }\n    },\n    _draw: function (ctx, param, viewMatrix) {\n      var element = this.getElement();\n      if (element && element.width > 0 && element.height > 0) {\n        ctx.globalAlpha = Numerical.clamp(this._opacity, 0, 1);\n        this._setStyles(ctx, param, viewMatrix);\n        var smoothing = this._smoothing,\n          disabled = smoothing === 'off';\n        DomElement.setPrefixed(ctx, disabled ? 'imageSmoothingEnabled' : 'imageSmoothingQuality', disabled ? false : smoothing);\n        ctx.drawImage(element, -this._size.width / 2, -this._size.height / 2);\n      }\n    },\n    _canComposite: function () {\n      return true;\n    }\n  });\n  var SymbolItem = Item.extend({\n    _class: 'SymbolItem',\n    _applyMatrix: false,\n    _canApplyMatrix: false,\n    _boundsOptions: {\n      stroke: true\n    },\n    _serializeFields: {\n      symbol: null\n    },\n    initialize: function SymbolItem(arg0, arg1) {\n      if (!this._initialize(arg0, arg1 !== undefined && Point.read(arguments, 1))) this.setDefinition(arg0 instanceof SymbolDefinition ? arg0 : new SymbolDefinition(arg0));\n    },\n    _equals: function (item) {\n      return this._definition === item._definition;\n    },\n    copyContent: function (source) {\n      this.setDefinition(source._definition);\n    },\n    getDefinition: function () {\n      return this._definition;\n    },\n    setDefinition: function (definition) {\n      this._definition = definition;\n      this._changed(9);\n    },\n    getSymbol: '#getDefinition',\n    setSymbol: '#setDefinition',\n    isEmpty: function () {\n      return this._definition._item.isEmpty();\n    },\n    _getBounds: function (matrix, options) {\n      var item = this._definition._item;\n      return item._getCachedBounds(item._matrix.prepended(matrix), options);\n    },\n    _hitTestSelf: function (point, options, viewMatrix) {\n      var opts = options.extend({\n        all: false\n      });\n      var res = this._definition._item._hitTest(point, opts, viewMatrix);\n      if (res) res.item = this;\n      return res;\n    },\n    _draw: function (ctx, param) {\n      this._definition._item.draw(ctx, param);\n    }\n  });\n  var SymbolDefinition = Base.extend({\n    _class: 'SymbolDefinition',\n    initialize: function SymbolDefinition(item, dontCenter) {\n      this._id = UID.get();\n      this.project = paper.project;\n      if (item) this.setItem(item, dontCenter);\n    },\n    _serialize: function (options, dictionary) {\n      return dictionary.add(this, function () {\n        return Base.serialize([this._class, this._item], options, false, dictionary);\n      });\n    },\n    _changed: function (flags) {\n      if (flags & 8) Item._clearBoundsCache(this);\n      if (flags & 1) this.project._changed(flags);\n    },\n    getItem: function () {\n      return this._item;\n    },\n    setItem: function (item, _dontCenter) {\n      if (item._symbol) item = item.clone();\n      if (this._item) this._item._symbol = null;\n      this._item = item;\n      item.remove();\n      item.setSelected(false);\n      if (!_dontCenter) item.setPosition(new Point());\n      item._symbol = this;\n      this._changed(9);\n    },\n    getDefinition: '#getItem',\n    setDefinition: '#setItem',\n    place: function (position) {\n      return new SymbolItem(this, position);\n    },\n    clone: function () {\n      return new SymbolDefinition(this._item.clone(false));\n    },\n    equals: function (symbol) {\n      return symbol === this || symbol && this._item.equals(symbol._item) || false;\n    }\n  });\n  var HitResult = Base.extend({\n    _class: 'HitResult',\n    initialize: function HitResult(type, item, values) {\n      this.type = type;\n      this.item = item;\n      if (values) this.inject(values);\n    },\n    statics: {\n      getOptions: function (args) {\n        var options = args && Base.read(args);\n        return new Base({\n          type: null,\n          tolerance: paper.settings.hitTolerance,\n          fill: !options,\n          stroke: !options,\n          segments: !options,\n          handles: false,\n          ends: false,\n          position: false,\n          center: false,\n          bounds: false,\n          guides: false,\n          selected: false\n        }, options);\n      }\n    }\n  });\n  var Segment = Base.extend({\n    _class: 'Segment',\n    beans: true,\n    _selection: 0,\n    initialize: function Segment(arg0, arg1, arg2, arg3, arg4, arg5) {\n      var count = arguments.length,\n        point,\n        handleIn,\n        handleOut,\n        selection;\n      if (count > 0) {\n        if (arg0 == null || typeof arg0 === 'object') {\n          if (count === 1 && arg0 && 'point' in arg0) {\n            point = arg0.point;\n            handleIn = arg0.handleIn;\n            handleOut = arg0.handleOut;\n            selection = arg0.selection;\n          } else {\n            point = arg0;\n            handleIn = arg1;\n            handleOut = arg2;\n            selection = arg3;\n          }\n        } else {\n          point = [arg0, arg1];\n          handleIn = arg2 !== undefined ? [arg2, arg3] : null;\n          handleOut = arg4 !== undefined ? [arg4, arg5] : null;\n        }\n      }\n      new SegmentPoint(point, this, '_point');\n      new SegmentPoint(handleIn, this, '_handleIn');\n      new SegmentPoint(handleOut, this, '_handleOut');\n      if (selection) this.setSelection(selection);\n    },\n    _serialize: function (options, dictionary) {\n      var point = this._point,\n        selection = this._selection,\n        obj = selection || this.hasHandles() ? [point, this._handleIn, this._handleOut] : point;\n      if (selection) obj.push(selection);\n      return Base.serialize(obj, options, true, dictionary);\n    },\n    _changed: function (point) {\n      var path = this._path;\n      if (!path) return;\n      var curves = path._curves,\n        index = this._index,\n        curve;\n      if (curves) {\n        if ((!point || point === this._point || point === this._handleIn) && (curve = index > 0 ? curves[index - 1] : path._closed ? curves[curves.length - 1] : null)) curve._changed();\n        if ((!point || point === this._point || point === this._handleOut) && (curve = curves[index])) curve._changed();\n      }\n      path._changed(41);\n    },\n    getPoint: function () {\n      return this._point;\n    },\n    setPoint: function () {\n      this._point.set(Point.read(arguments));\n    },\n    getHandleIn: function () {\n      return this._handleIn;\n    },\n    setHandleIn: function () {\n      this._handleIn.set(Point.read(arguments));\n    },\n    getHandleOut: function () {\n      return this._handleOut;\n    },\n    setHandleOut: function () {\n      this._handleOut.set(Point.read(arguments));\n    },\n    hasHandles: function () {\n      return !this._handleIn.isZero() || !this._handleOut.isZero();\n    },\n    isSmooth: function () {\n      var handleIn = this._handleIn,\n        handleOut = this._handleOut;\n      return !handleIn.isZero() && !handleOut.isZero() && handleIn.isCollinear(handleOut);\n    },\n    clearHandles: function () {\n      this._handleIn._set(0, 0);\n      this._handleOut._set(0, 0);\n    },\n    getSelection: function () {\n      return this._selection;\n    },\n    setSelection: function (selection) {\n      var oldSelection = this._selection,\n        path = this._path;\n      this._selection = selection = selection || 0;\n      if (path && selection !== oldSelection) {\n        path._updateSelection(this, oldSelection, selection);\n        path._changed(257);\n      }\n    },\n    _changeSelection: function (flag, selected) {\n      var selection = this._selection;\n      this.setSelection(selected ? selection | flag : selection & ~flag);\n    },\n    isSelected: function () {\n      return !!(this._selection & 7);\n    },\n    setSelected: function (selected) {\n      this._changeSelection(7, selected);\n    },\n    getIndex: function () {\n      return this._index !== undefined ? this._index : null;\n    },\n    getPath: function () {\n      return this._path || null;\n    },\n    getCurve: function () {\n      var path = this._path,\n        index = this._index;\n      if (path) {\n        if (index > 0 && !path._closed && index === path._segments.length - 1) index--;\n        return path.getCurves()[index] || null;\n      }\n      return null;\n    },\n    getLocation: function () {\n      var curve = this.getCurve();\n      return curve ? new CurveLocation(curve, this === curve._segment1 ? 0 : 1) : null;\n    },\n    getNext: function () {\n      var segments = this._path && this._path._segments;\n      return segments && (segments[this._index + 1] || this._path._closed && segments[0]) || null;\n    },\n    smooth: function (options, _first, _last) {\n      var opts = options || {},\n        type = opts.type,\n        factor = opts.factor,\n        prev = this.getPrevious(),\n        next = this.getNext(),\n        p0 = (prev || this)._point,\n        p1 = this._point,\n        p2 = (next || this)._point,\n        d1 = p0.getDistance(p1),\n        d2 = p1.getDistance(p2);\n      if (!type || type === 'catmull-rom') {\n        var a = factor === undefined ? 0.5 : factor,\n          d1_a = Math.pow(d1, a),\n          d1_2a = d1_a * d1_a,\n          d2_a = Math.pow(d2, a),\n          d2_2a = d2_a * d2_a;\n        if (!_first && prev) {\n          var A = 2 * d2_2a + 3 * d2_a * d1_a + d1_2a,\n            N = 3 * d2_a * (d2_a + d1_a);\n          this.setHandleIn(N !== 0 ? new Point((d2_2a * p0._x + A * p1._x - d1_2a * p2._x) / N - p1._x, (d2_2a * p0._y + A * p1._y - d1_2a * p2._y) / N - p1._y) : new Point());\n        }\n        if (!_last && next) {\n          var A = 2 * d1_2a + 3 * d1_a * d2_a + d2_2a,\n            N = 3 * d1_a * (d1_a + d2_a);\n          this.setHandleOut(N !== 0 ? new Point((d1_2a * p2._x + A * p1._x - d2_2a * p0._x) / N - p1._x, (d1_2a * p2._y + A * p1._y - d2_2a * p0._y) / N - p1._y) : new Point());\n        }\n      } else if (type === 'geometric') {\n        if (prev && next) {\n          var vector = p0.subtract(p2),\n            t = factor === undefined ? 0.4 : factor,\n            k = t * d1 / (d1 + d2);\n          if (!_first) this.setHandleIn(vector.multiply(k));\n          if (!_last) this.setHandleOut(vector.multiply(k - t));\n        }\n      } else {\n        throw new Error('Smoothing method \\'' + type + '\\' not supported.');\n      }\n    },\n    getPrevious: function () {\n      var segments = this._path && this._path._segments;\n      return segments && (segments[this._index - 1] || this._path._closed && segments[segments.length - 1]) || null;\n    },\n    isFirst: function () {\n      return !this._index;\n    },\n    isLast: function () {\n      var path = this._path;\n      return path && this._index === path._segments.length - 1 || false;\n    },\n    reverse: function () {\n      var handleIn = this._handleIn,\n        handleOut = this._handleOut,\n        tmp = handleIn.clone();\n      handleIn.set(handleOut);\n      handleOut.set(tmp);\n    },\n    reversed: function () {\n      return new Segment(this._point, this._handleOut, this._handleIn);\n    },\n    remove: function () {\n      return this._path ? !!this._path.removeSegment(this._index) : false;\n    },\n    clone: function () {\n      return new Segment(this._point, this._handleIn, this._handleOut);\n    },\n    equals: function (segment) {\n      return segment === this || segment && this._class === segment._class && this._point.equals(segment._point) && this._handleIn.equals(segment._handleIn) && this._handleOut.equals(segment._handleOut) || false;\n    },\n    toString: function () {\n      var parts = ['point: ' + this._point];\n      if (!this._handleIn.isZero()) parts.push('handleIn: ' + this._handleIn);\n      if (!this._handleOut.isZero()) parts.push('handleOut: ' + this._handleOut);\n      return '{ ' + parts.join(', ') + ' }';\n    },\n    transform: function (matrix) {\n      this._transformCoordinates(matrix, new Array(6), true);\n      this._changed();\n    },\n    interpolate: function (from, to, factor) {\n      var u = 1 - factor,\n        v = factor,\n        point1 = from._point,\n        point2 = to._point,\n        handleIn1 = from._handleIn,\n        handleIn2 = to._handleIn,\n        handleOut2 = to._handleOut,\n        handleOut1 = from._handleOut;\n      this._point._set(u * point1._x + v * point2._x, u * point1._y + v * point2._y, true);\n      this._handleIn._set(u * handleIn1._x + v * handleIn2._x, u * handleIn1._y + v * handleIn2._y, true);\n      this._handleOut._set(u * handleOut1._x + v * handleOut2._x, u * handleOut1._y + v * handleOut2._y, true);\n      this._changed();\n    },\n    _transformCoordinates: function (matrix, coords, change) {\n      var point = this._point,\n        handleIn = !change || !this._handleIn.isZero() ? this._handleIn : null,\n        handleOut = !change || !this._handleOut.isZero() ? this._handleOut : null,\n        x = point._x,\n        y = point._y,\n        i = 2;\n      coords[0] = x;\n      coords[1] = y;\n      if (handleIn) {\n        coords[i++] = handleIn._x + x;\n        coords[i++] = handleIn._y + y;\n      }\n      if (handleOut) {\n        coords[i++] = handleOut._x + x;\n        coords[i++] = handleOut._y + y;\n      }\n      if (matrix) {\n        matrix._transformCoordinates(coords, coords, i / 2);\n        x = coords[0];\n        y = coords[1];\n        if (change) {\n          point._x = x;\n          point._y = y;\n          i = 2;\n          if (handleIn) {\n            handleIn._x = coords[i++] - x;\n            handleIn._y = coords[i++] - y;\n          }\n          if (handleOut) {\n            handleOut._x = coords[i++] - x;\n            handleOut._y = coords[i++] - y;\n          }\n        } else {\n          if (!handleIn) {\n            coords[i++] = x;\n            coords[i++] = y;\n          }\n          if (!handleOut) {\n            coords[i++] = x;\n            coords[i++] = y;\n          }\n        }\n      }\n      return coords;\n    }\n  });\n  var SegmentPoint = Point.extend({\n    initialize: function SegmentPoint(point, owner, key) {\n      var x, y, selected;\n      if (!point) {\n        x = y = 0;\n      } else if ((x = point[0]) !== undefined) {\n        y = point[1];\n      } else {\n        var pt = point;\n        if ((x = pt.x) === undefined) {\n          pt = Point.read(arguments);\n          x = pt.x;\n        }\n        y = pt.y;\n        selected = pt.selected;\n      }\n      this._x = x;\n      this._y = y;\n      this._owner = owner;\n      owner[key] = this;\n      if (selected) this.setSelected(true);\n    },\n    _set: function (x, y) {\n      this._x = x;\n      this._y = y;\n      this._owner._changed(this);\n      return this;\n    },\n    getX: function () {\n      return this._x;\n    },\n    setX: function (x) {\n      this._x = x;\n      this._owner._changed(this);\n    },\n    getY: function () {\n      return this._y;\n    },\n    setY: function (y) {\n      this._y = y;\n      this._owner._changed(this);\n    },\n    isZero: function () {\n      var isZero = Numerical.isZero;\n      return isZero(this._x) && isZero(this._y);\n    },\n    isSelected: function () {\n      return !!(this._owner._selection & this._getSelection());\n    },\n    setSelected: function (selected) {\n      this._owner._changeSelection(this._getSelection(), selected);\n    },\n    _getSelection: function () {\n      var owner = this._owner;\n      return this === owner._point ? 1 : this === owner._handleIn ? 2 : this === owner._handleOut ? 4 : 0;\n    }\n  });\n  var Curve = Base.extend({\n    _class: 'Curve',\n    beans: true,\n    initialize: function Curve(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {\n      var count = arguments.length,\n        seg1,\n        seg2,\n        point1,\n        point2,\n        handle1,\n        handle2;\n      if (count === 3) {\n        this._path = arg0;\n        seg1 = arg1;\n        seg2 = arg2;\n      } else if (!count) {\n        seg1 = new Segment();\n        seg2 = new Segment();\n      } else if (count === 1) {\n        if ('segment1' in arg0) {\n          seg1 = new Segment(arg0.segment1);\n          seg2 = new Segment(arg0.segment2);\n        } else if ('point1' in arg0) {\n          point1 = arg0.point1;\n          handle1 = arg0.handle1;\n          handle2 = arg0.handle2;\n          point2 = arg0.point2;\n        } else if (Array.isArray(arg0)) {\n          point1 = [arg0[0], arg0[1]];\n          point2 = [arg0[6], arg0[7]];\n          handle1 = [arg0[2] - arg0[0], arg0[3] - arg0[1]];\n          handle2 = [arg0[4] - arg0[6], arg0[5] - arg0[7]];\n        }\n      } else if (count === 2) {\n        seg1 = new Segment(arg0);\n        seg2 = new Segment(arg1);\n      } else if (count === 4) {\n        point1 = arg0;\n        handle1 = arg1;\n        handle2 = arg2;\n        point2 = arg3;\n      } else if (count === 8) {\n        point1 = [arg0, arg1];\n        point2 = [arg6, arg7];\n        handle1 = [arg2 - arg0, arg3 - arg1];\n        handle2 = [arg4 - arg6, arg5 - arg7];\n      }\n      this._segment1 = seg1 || new Segment(point1, null, handle1);\n      this._segment2 = seg2 || new Segment(point2, handle2, null);\n    },\n    _serialize: function (options, dictionary) {\n      return Base.serialize(this.hasHandles() ? [this.getPoint1(), this.getHandle1(), this.getHandle2(), this.getPoint2()] : [this.getPoint1(), this.getPoint2()], options, true, dictionary);\n    },\n    _changed: function () {\n      this._length = this._bounds = undefined;\n    },\n    clone: function () {\n      return new Curve(this._segment1, this._segment2);\n    },\n    toString: function () {\n      var parts = ['point1: ' + this._segment1._point];\n      if (!this._segment1._handleOut.isZero()) parts.push('handle1: ' + this._segment1._handleOut);\n      if (!this._segment2._handleIn.isZero()) parts.push('handle2: ' + this._segment2._handleIn);\n      parts.push('point2: ' + this._segment2._point);\n      return '{ ' + parts.join(', ') + ' }';\n    },\n    classify: function () {\n      return Curve.classify(this.getValues());\n    },\n    remove: function () {\n      var removed = false;\n      if (this._path) {\n        var segment2 = this._segment2,\n          handleOut = segment2._handleOut;\n        removed = segment2.remove();\n        if (removed) this._segment1._handleOut.set(handleOut);\n      }\n      return removed;\n    },\n    getPoint1: function () {\n      return this._segment1._point;\n    },\n    setPoint1: function () {\n      this._segment1._point.set(Point.read(arguments));\n    },\n    getPoint2: function () {\n      return this._segment2._point;\n    },\n    setPoint2: function () {\n      this._segment2._point.set(Point.read(arguments));\n    },\n    getHandle1: function () {\n      return this._segment1._handleOut;\n    },\n    setHandle1: function () {\n      this._segment1._handleOut.set(Point.read(arguments));\n    },\n    getHandle2: function () {\n      return this._segment2._handleIn;\n    },\n    setHandle2: function () {\n      this._segment2._handleIn.set(Point.read(arguments));\n    },\n    getSegment1: function () {\n      return this._segment1;\n    },\n    getSegment2: function () {\n      return this._segment2;\n    },\n    getPath: function () {\n      return this._path;\n    },\n    getIndex: function () {\n      return this._segment1._index;\n    },\n    getNext: function () {\n      var curves = this._path && this._path._curves;\n      return curves && (curves[this._segment1._index + 1] || this._path._closed && curves[0]) || null;\n    },\n    getPrevious: function () {\n      var curves = this._path && this._path._curves;\n      return curves && (curves[this._segment1._index - 1] || this._path._closed && curves[curves.length - 1]) || null;\n    },\n    isFirst: function () {\n      return !this._segment1._index;\n    },\n    isLast: function () {\n      var path = this._path;\n      return path && this._segment1._index === path._curves.length - 1 || false;\n    },\n    isSelected: function () {\n      return this.getPoint1().isSelected() && this.getHandle1().isSelected() && this.getHandle2().isSelected() && this.getPoint2().isSelected();\n    },\n    setSelected: function (selected) {\n      this.getPoint1().setSelected(selected);\n      this.getHandle1().setSelected(selected);\n      this.getHandle2().setSelected(selected);\n      this.getPoint2().setSelected(selected);\n    },\n    getValues: function (matrix) {\n      return Curve.getValues(this._segment1, this._segment2, matrix);\n    },\n    getPoints: function () {\n      var coords = this.getValues(),\n        points = [];\n      for (var i = 0; i < 8; i += 2) points.push(new Point(coords[i], coords[i + 1]));\n      return points;\n    }\n  }, {\n    getLength: function () {\n      if (this._length == null) this._length = Curve.getLength(this.getValues(), 0, 1);\n      return this._length;\n    },\n    getArea: function () {\n      return Curve.getArea(this.getValues());\n    },\n    getLine: function () {\n      return new Line(this._segment1._point, this._segment2._point);\n    },\n    getPart: function (from, to) {\n      return new Curve(Curve.getPart(this.getValues(), from, to));\n    },\n    getPartLength: function (from, to) {\n      return Curve.getLength(this.getValues(), from, to);\n    },\n    divideAt: function (location) {\n      return this.divideAtTime(location && location.curve === this ? location.time : this.getTimeAt(location));\n    },\n    divideAtTime: function (time, _setHandles) {\n      var tMin = 1e-8,\n        tMax = 1 - tMin,\n        res = null;\n      if (time >= tMin && time <= tMax) {\n        var parts = Curve.subdivide(this.getValues(), time),\n          left = parts[0],\n          right = parts[1],\n          setHandles = _setHandles || this.hasHandles(),\n          seg1 = this._segment1,\n          seg2 = this._segment2,\n          path = this._path;\n        if (setHandles) {\n          seg1._handleOut._set(left[2] - left[0], left[3] - left[1]);\n          seg2._handleIn._set(right[4] - right[6], right[5] - right[7]);\n        }\n        var x = left[6],\n          y = left[7],\n          segment = new Segment(new Point(x, y), setHandles && new Point(left[4] - x, left[5] - y), setHandles && new Point(right[2] - x, right[3] - y));\n        if (path) {\n          path.insert(seg1._index + 1, segment);\n          res = this.getNext();\n        } else {\n          this._segment2 = segment;\n          this._changed();\n          res = new Curve(segment, seg2);\n        }\n      }\n      return res;\n    },\n    splitAt: function (location) {\n      var path = this._path;\n      return path ? path.splitAt(location) : null;\n    },\n    splitAtTime: function (time) {\n      return this.splitAt(this.getLocationAtTime(time));\n    },\n    divide: function (offset, isTime) {\n      return this.divideAtTime(offset === undefined ? 0.5 : isTime ? offset : this.getTimeAt(offset));\n    },\n    split: function (offset, isTime) {\n      return this.splitAtTime(offset === undefined ? 0.5 : isTime ? offset : this.getTimeAt(offset));\n    },\n    reversed: function () {\n      return new Curve(this._segment2.reversed(), this._segment1.reversed());\n    },\n    clearHandles: function () {\n      this._segment1._handleOut._set(0, 0);\n      this._segment2._handleIn._set(0, 0);\n    },\n    statics: {\n      getValues: function (segment1, segment2, matrix, straight) {\n        var p1 = segment1._point,\n          h1 = segment1._handleOut,\n          h2 = segment2._handleIn,\n          p2 = segment2._point,\n          x1 = p1.x,\n          y1 = p1.y,\n          x2 = p2.x,\n          y2 = p2.y,\n          values = straight ? [x1, y1, x1, y1, x2, y2, x2, y2] : [x1, y1, x1 + h1._x, y1 + h1._y, x2 + h2._x, y2 + h2._y, x2, y2];\n        if (matrix) matrix._transformCoordinates(values, values, 4);\n        return values;\n      },\n      subdivide: function (v, t) {\n        var x0 = v[0],\n          y0 = v[1],\n          x1 = v[2],\n          y1 = v[3],\n          x2 = v[4],\n          y2 = v[5],\n          x3 = v[6],\n          y3 = v[7];\n        if (t === undefined) t = 0.5;\n        var u = 1 - t,\n          x4 = u * x0 + t * x1,\n          y4 = u * y0 + t * y1,\n          x5 = u * x1 + t * x2,\n          y5 = u * y1 + t * y2,\n          x6 = u * x2 + t * x3,\n          y6 = u * y2 + t * y3,\n          x7 = u * x4 + t * x5,\n          y7 = u * y4 + t * y5,\n          x8 = u * x5 + t * x6,\n          y8 = u * y5 + t * y6,\n          x9 = u * x7 + t * x8,\n          y9 = u * y7 + t * y8;\n        return [[x0, y0, x4, y4, x7, y7, x9, y9], [x9, y9, x8, y8, x6, y6, x3, y3]];\n      },\n      getMonoCurves: function (v, dir) {\n        var curves = [],\n          io = dir ? 0 : 1,\n          o0 = v[io + 0],\n          o1 = v[io + 2],\n          o2 = v[io + 4],\n          o3 = v[io + 6];\n        if (o0 >= o1 === o1 >= o2 && o1 >= o2 === o2 >= o3 || Curve.isStraight(v)) {\n          curves.push(v);\n        } else {\n          var a = 3 * (o1 - o2) - o0 + o3,\n            b = 2 * (o0 + o2) - 4 * o1,\n            c = o1 - o0,\n            tMin = 1e-8,\n            tMax = 1 - tMin,\n            roots = [],\n            n = Numerical.solveQuadratic(a, b, c, roots, tMin, tMax);\n          if (!n) {\n            curves.push(v);\n          } else {\n            roots.sort();\n            var t = roots[0],\n              parts = Curve.subdivide(v, t);\n            curves.push(parts[0]);\n            if (n > 1) {\n              t = (roots[1] - t) / (1 - t);\n              parts = Curve.subdivide(parts[1], t);\n              curves.push(parts[0]);\n            }\n            curves.push(parts[1]);\n          }\n        }\n        return curves;\n      },\n      solveCubic: function (v, coord, val, roots, min, max) {\n        var v0 = v[coord],\n          v1 = v[coord + 2],\n          v2 = v[coord + 4],\n          v3 = v[coord + 6],\n          res = 0;\n        if (!(v0 < val && v3 < val && v1 < val && v2 < val || v0 > val && v3 > val && v1 > val && v2 > val)) {\n          var c = 3 * (v1 - v0),\n            b = 3 * (v2 - v1) - c,\n            a = v3 - v0 - c - b;\n          res = Numerical.solveCubic(a, b, c, v0 - val, roots, min, max);\n        }\n        return res;\n      },\n      getTimeOf: function (v, point) {\n        var p0 = new Point(v[0], v[1]),\n          p3 = new Point(v[6], v[7]),\n          epsilon = 1e-12,\n          geomEpsilon = 1e-7,\n          t = point.isClose(p0, epsilon) ? 0 : point.isClose(p3, epsilon) ? 1 : null;\n        if (t === null) {\n          var coords = [point.x, point.y],\n            roots = [];\n          for (var c = 0; c < 2; c++) {\n            var count = Curve.solveCubic(v, c, coords[c], roots, 0, 1);\n            for (var i = 0; i < count; i++) {\n              var u = roots[i];\n              if (point.isClose(Curve.getPoint(v, u), geomEpsilon)) return u;\n            }\n          }\n        }\n        return point.isClose(p0, geomEpsilon) ? 0 : point.isClose(p3, geomEpsilon) ? 1 : null;\n      },\n      getNearestTime: function (v, point) {\n        if (Curve.isStraight(v)) {\n          var x0 = v[0],\n            y0 = v[1],\n            x3 = v[6],\n            y3 = v[7],\n            vx = x3 - x0,\n            vy = y3 - y0,\n            det = vx * vx + vy * vy;\n          if (det === 0) return 0;\n          var u = ((point.x - x0) * vx + (point.y - y0) * vy) / det;\n          return u < 1e-12 ? 0 : u > 0.999999999999 ? 1 : Curve.getTimeOf(v, new Point(x0 + u * vx, y0 + u * vy));\n        }\n        var count = 100,\n          minDist = Infinity,\n          minT = 0;\n        function refine(t) {\n          if (t >= 0 && t <= 1) {\n            var dist = point.getDistance(Curve.getPoint(v, t), true);\n            if (dist < minDist) {\n              minDist = dist;\n              minT = t;\n              return true;\n            }\n          }\n        }\n        for (var i = 0; i <= count; i++) refine(i / count);\n        var step = 1 / (count * 2);\n        while (step > 1e-8) {\n          if (!refine(minT - step) && !refine(minT + step)) step /= 2;\n        }\n        return minT;\n      },\n      getPart: function (v, from, to) {\n        var flip = from > to;\n        if (flip) {\n          var tmp = from;\n          from = to;\n          to = tmp;\n        }\n        if (from > 0) v = Curve.subdivide(v, from)[1];\n        if (to < 1) v = Curve.subdivide(v, (to - from) / (1 - from))[0];\n        return flip ? [v[6], v[7], v[4], v[5], v[2], v[3], v[0], v[1]] : v;\n      },\n      isFlatEnough: function (v, flatness) {\n        var x0 = v[0],\n          y0 = v[1],\n          x1 = v[2],\n          y1 = v[3],\n          x2 = v[4],\n          y2 = v[5],\n          x3 = v[6],\n          y3 = v[7],\n          ux = 3 * x1 - 2 * x0 - x3,\n          uy = 3 * y1 - 2 * y0 - y3,\n          vx = 3 * x2 - 2 * x3 - x0,\n          vy = 3 * y2 - 2 * y3 - y0;\n        return Math.max(ux * ux, vx * vx) + Math.max(uy * uy, vy * vy) <= 16 * flatness * flatness;\n      },\n      getArea: function (v) {\n        var x0 = v[0],\n          y0 = v[1],\n          x1 = v[2],\n          y1 = v[3],\n          x2 = v[4],\n          y2 = v[5],\n          x3 = v[6],\n          y3 = v[7];\n        return 3 * ((y3 - y0) * (x1 + x2) - (x3 - x0) * (y1 + y2) + y1 * (x0 - x2) - x1 * (y0 - y2) + y3 * (x2 + x0 / 3) - x3 * (y2 + y0 / 3)) / 20;\n      },\n      getBounds: function (v) {\n        var min = v.slice(0, 2),\n          max = min.slice(),\n          roots = [0, 0];\n        for (var i = 0; i < 2; i++) Curve._addBounds(v[i], v[i + 2], v[i + 4], v[i + 6], i, 0, min, max, roots);\n        return new Rectangle(min[0], min[1], max[0] - min[0], max[1] - min[1]);\n      },\n      _addBounds: function (v0, v1, v2, v3, coord, padding, min, max, roots) {\n        function add(value, padding) {\n          var left = value - padding,\n            right = value + padding;\n          if (left < min[coord]) min[coord] = left;\n          if (right > max[coord]) max[coord] = right;\n        }\n        padding /= 2;\n        var minPad = min[coord] + padding,\n          maxPad = max[coord] - padding;\n        if (v0 < minPad || v1 < minPad || v2 < minPad || v3 < minPad || v0 > maxPad || v1 > maxPad || v2 > maxPad || v3 > maxPad) {\n          if (v1 < v0 != v1 < v3 && v2 < v0 != v2 < v3) {\n            add(v0, 0);\n            add(v3, 0);\n          } else {\n            var a = 3 * (v1 - v2) - v0 + v3,\n              b = 2 * (v0 + v2) - 4 * v1,\n              c = v1 - v0,\n              count = Numerical.solveQuadratic(a, b, c, roots),\n              tMin = 1e-8,\n              tMax = 1 - tMin;\n            add(v3, 0);\n            for (var i = 0; i < count; i++) {\n              var t = roots[i],\n                u = 1 - t;\n              if (tMin <= t && t <= tMax) add(u * u * u * v0 + 3 * u * u * t * v1 + 3 * u * t * t * v2 + t * t * t * v3, padding);\n            }\n          }\n        }\n      }\n    }\n  }, Base.each(['getBounds', 'getStrokeBounds', 'getHandleBounds'], function (name) {\n    this[name] = function () {\n      if (!this._bounds) this._bounds = {};\n      var bounds = this._bounds[name];\n      if (!bounds) {\n        bounds = this._bounds[name] = Path[name]([this._segment1, this._segment2], false, this._path);\n      }\n      return bounds.clone();\n    };\n  }, {}), Base.each({\n    isStraight: function (p1, h1, h2, p2) {\n      if (h1.isZero() && h2.isZero()) {\n        return true;\n      } else {\n        var v = p2.subtract(p1);\n        if (v.isZero()) {\n          return false;\n        } else if (v.isCollinear(h1) && v.isCollinear(h2)) {\n          var l = new Line(p1, p2),\n            epsilon = 1e-7;\n          if (l.getDistance(p1.add(h1)) < epsilon && l.getDistance(p2.add(h2)) < epsilon) {\n            var div = v.dot(v),\n              s1 = v.dot(h1) / div,\n              s2 = v.dot(h2) / div;\n            return s1 >= 0 && s1 <= 1 && s2 <= 0 && s2 >= -1;\n          }\n        }\n      }\n      return false;\n    },\n    isLinear: function (p1, h1, h2, p2) {\n      var third = p2.subtract(p1).divide(3);\n      return h1.equals(third) && h2.negate().equals(third);\n    }\n  }, function (test, name) {\n    this[name] = function (epsilon) {\n      var seg1 = this._segment1,\n        seg2 = this._segment2;\n      return test(seg1._point, seg1._handleOut, seg2._handleIn, seg2._point, epsilon);\n    };\n    this.statics[name] = function (v, epsilon) {\n      var x0 = v[0],\n        y0 = v[1],\n        x3 = v[6],\n        y3 = v[7];\n      return test(new Point(x0, y0), new Point(v[2] - x0, v[3] - y0), new Point(v[4] - x3, v[5] - y3), new Point(x3, y3), epsilon);\n    };\n  }, {\n    statics: {},\n    hasHandles: function () {\n      return !this._segment1._handleOut.isZero() || !this._segment2._handleIn.isZero();\n    },\n    hasLength: function (epsilon) {\n      return (!this.getPoint1().equals(this.getPoint2()) || this.hasHandles()) && this.getLength() > (epsilon || 0);\n    },\n    isCollinear: function (curve) {\n      return curve && this.isStraight() && curve.isStraight() && this.getLine().isCollinear(curve.getLine());\n    },\n    isHorizontal: function () {\n      return this.isStraight() && Math.abs(this.getTangentAtTime(0.5).y) < 1e-8;\n    },\n    isVertical: function () {\n      return this.isStraight() && Math.abs(this.getTangentAtTime(0.5).x) < 1e-8;\n    }\n  }), {\n    beans: false,\n    getLocationAt: function (offset, _isTime) {\n      return this.getLocationAtTime(_isTime ? offset : this.getTimeAt(offset));\n    },\n    getLocationAtTime: function (t) {\n      return t != null && t >= 0 && t <= 1 ? new CurveLocation(this, t) : null;\n    },\n    getTimeAt: function (offset, start) {\n      return Curve.getTimeAt(this.getValues(), offset, start);\n    },\n    getParameterAt: '#getTimeAt',\n    getTimesWithTangent: function () {\n      var tangent = Point.read(arguments);\n      return tangent.isZero() ? [] : Curve.getTimesWithTangent(this.getValues(), tangent);\n    },\n    getOffsetAtTime: function (t) {\n      return this.getPartLength(0, t);\n    },\n    getLocationOf: function () {\n      return this.getLocationAtTime(this.getTimeOf(Point.read(arguments)));\n    },\n    getOffsetOf: function () {\n      var loc = this.getLocationOf.apply(this, arguments);\n      return loc ? loc.getOffset() : null;\n    },\n    getTimeOf: function () {\n      return Curve.getTimeOf(this.getValues(), Point.read(arguments));\n    },\n    getParameterOf: '#getTimeOf',\n    getNearestLocation: function () {\n      var point = Point.read(arguments),\n        values = this.getValues(),\n        t = Curve.getNearestTime(values, point),\n        pt = Curve.getPoint(values, t);\n      return new CurveLocation(this, t, pt, null, point.getDistance(pt));\n    },\n    getNearestPoint: function () {\n      var loc = this.getNearestLocation.apply(this, arguments);\n      return loc ? loc.getPoint() : loc;\n    }\n  }, new function () {\n    var methods = ['getPoint', 'getTangent', 'getNormal', 'getWeightedTangent', 'getWeightedNormal', 'getCurvature'];\n    return Base.each(methods, function (name) {\n      this[name + 'At'] = function (location, _isTime) {\n        var values = this.getValues();\n        return Curve[name](values, _isTime ? location : Curve.getTimeAt(values, location));\n      };\n      this[name + 'AtTime'] = function (time) {\n        return Curve[name](this.getValues(), time);\n      };\n    }, {\n      statics: {\n        _evaluateMethods: methods\n      }\n    });\n  }(), new function () {\n    function getLengthIntegrand(v) {\n      var x0 = v[0],\n        y0 = v[1],\n        x1 = v[2],\n        y1 = v[3],\n        x2 = v[4],\n        y2 = v[5],\n        x3 = v[6],\n        y3 = v[7],\n        ax = 9 * (x1 - x2) + 3 * (x3 - x0),\n        bx = 6 * (x0 + x2) - 12 * x1,\n        cx = 3 * (x1 - x0),\n        ay = 9 * (y1 - y2) + 3 * (y3 - y0),\n        by = 6 * (y0 + y2) - 12 * y1,\n        cy = 3 * (y1 - y0);\n      return function (t) {\n        var dx = (ax * t + bx) * t + cx,\n          dy = (ay * t + by) * t + cy;\n        return Math.sqrt(dx * dx + dy * dy);\n      };\n    }\n    function getIterations(a, b) {\n      return Math.max(2, Math.min(16, Math.ceil(Math.abs(b - a) * 32)));\n    }\n    function evaluate(v, t, type, normalized) {\n      if (t == null || t < 0 || t > 1) return null;\n      var x0 = v[0],\n        y0 = v[1],\n        x1 = v[2],\n        y1 = v[3],\n        x2 = v[4],\n        y2 = v[5],\n        x3 = v[6],\n        y3 = v[7],\n        isZero = Numerical.isZero;\n      if (isZero(x1 - x0) && isZero(y1 - y0)) {\n        x1 = x0;\n        y1 = y0;\n      }\n      if (isZero(x2 - x3) && isZero(y2 - y3)) {\n        x2 = x3;\n        y2 = y3;\n      }\n      var cx = 3 * (x1 - x0),\n        bx = 3 * (x2 - x1) - cx,\n        ax = x3 - x0 - cx - bx,\n        cy = 3 * (y1 - y0),\n        by = 3 * (y2 - y1) - cy,\n        ay = y3 - y0 - cy - by,\n        x,\n        y;\n      if (type === 0) {\n        x = t === 0 ? x0 : t === 1 ? x3 : ((ax * t + bx) * t + cx) * t + x0;\n        y = t === 0 ? y0 : t === 1 ? y3 : ((ay * t + by) * t + cy) * t + y0;\n      } else {\n        var tMin = 1e-8,\n          tMax = 1 - tMin;\n        if (t < tMin) {\n          x = cx;\n          y = cy;\n        } else if (t > tMax) {\n          x = 3 * (x3 - x2);\n          y = 3 * (y3 - y2);\n        } else {\n          x = (3 * ax * t + 2 * bx) * t + cx;\n          y = (3 * ay * t + 2 * by) * t + cy;\n        }\n        if (normalized) {\n          if (x === 0 && y === 0 && (t < tMin || t > tMax)) {\n            x = x2 - x1;\n            y = y2 - y1;\n          }\n          var len = Math.sqrt(x * x + y * y);\n          if (len) {\n            x /= len;\n            y /= len;\n          }\n        }\n        if (type === 3) {\n          var x2 = 6 * ax * t + 2 * bx,\n            y2 = 6 * ay * t + 2 * by,\n            d = Math.pow(x * x + y * y, 3 / 2);\n          x = d !== 0 ? (x * y2 - y * x2) / d : 0;\n          y = 0;\n        }\n      }\n      return type === 2 ? new Point(y, -x) : new Point(x, y);\n    }\n    return {\n      statics: {\n        classify: function (v) {\n          var x0 = v[0],\n            y0 = v[1],\n            x1 = v[2],\n            y1 = v[3],\n            x2 = v[4],\n            y2 = v[5],\n            x3 = v[6],\n            y3 = v[7],\n            a1 = x0 * (y3 - y2) + y0 * (x2 - x3) + x3 * y2 - y3 * x2,\n            a2 = x1 * (y0 - y3) + y1 * (x3 - x0) + x0 * y3 - y0 * x3,\n            a3 = x2 * (y1 - y0) + y2 * (x0 - x1) + x1 * y0 - y1 * x0,\n            d3 = 3 * a3,\n            d2 = d3 - a2,\n            d1 = d2 - a2 + a1,\n            l = Math.sqrt(d1 * d1 + d2 * d2 + d3 * d3),\n            s = l !== 0 ? 1 / l : 0,\n            isZero = Numerical.isZero,\n            serpentine = 'serpentine';\n          d1 *= s;\n          d2 *= s;\n          d3 *= s;\n          function type(type, t1, t2) {\n            var hasRoots = t1 !== undefined,\n              t1Ok = hasRoots && t1 > 0 && t1 < 1,\n              t2Ok = hasRoots && t2 > 0 && t2 < 1;\n            if (hasRoots && (!(t1Ok || t2Ok) || type === 'loop' && !(t1Ok && t2Ok))) {\n              type = 'arch';\n              t1Ok = t2Ok = false;\n            }\n            return {\n              type: type,\n              roots: t1Ok || t2Ok ? t1Ok && t2Ok ? t1 < t2 ? [t1, t2] : [t2, t1] : [t1Ok ? t1 : t2] : null\n            };\n          }\n          if (isZero(d1)) {\n            return isZero(d2) ? type(isZero(d3) ? 'line' : 'quadratic') : type(serpentine, d3 / (3 * d2));\n          }\n          var d = 3 * d2 * d2 - 4 * d1 * d3;\n          if (isZero(d)) {\n            return type('cusp', d2 / (2 * d1));\n          }\n          var f1 = d > 0 ? Math.sqrt(d / 3) : Math.sqrt(-d),\n            f2 = 2 * d1;\n          return type(d > 0 ? serpentine : 'loop', (d2 + f1) / f2, (d2 - f1) / f2);\n        },\n        getLength: function (v, a, b, ds) {\n          if (a === undefined) a = 0;\n          if (b === undefined) b = 1;\n          if (Curve.isStraight(v)) {\n            var c = v;\n            if (b < 1) {\n              c = Curve.subdivide(c, b)[0];\n              a /= b;\n            }\n            if (a > 0) {\n              c = Curve.subdivide(c, a)[1];\n            }\n            var dx = c[6] - c[0],\n              dy = c[7] - c[1];\n            return Math.sqrt(dx * dx + dy * dy);\n          }\n          return Numerical.integrate(ds || getLengthIntegrand(v), a, b, getIterations(a, b));\n        },\n        getTimeAt: function (v, offset, start) {\n          if (start === undefined) start = offset < 0 ? 1 : 0;\n          if (offset === 0) return start;\n          var abs = Math.abs,\n            epsilon = 1e-12,\n            forward = offset > 0,\n            a = forward ? start : 0,\n            b = forward ? 1 : start,\n            ds = getLengthIntegrand(v),\n            rangeLength = Curve.getLength(v, a, b, ds),\n            diff = abs(offset) - rangeLength;\n          if (abs(diff) < epsilon) {\n            return forward ? b : a;\n          } else if (diff > epsilon) {\n            return null;\n          }\n          var guess = offset / rangeLength,\n            length = 0;\n          function f(t) {\n            length += Numerical.integrate(ds, start, t, getIterations(start, t));\n            start = t;\n            return length - offset;\n          }\n          return Numerical.findRoot(f, ds, start + guess, a, b, 32, 1e-12);\n        },\n        getPoint: function (v, t) {\n          return evaluate(v, t, 0, false);\n        },\n        getTangent: function (v, t) {\n          return evaluate(v, t, 1, true);\n        },\n        getWeightedTangent: function (v, t) {\n          return evaluate(v, t, 1, false);\n        },\n        getNormal: function (v, t) {\n          return evaluate(v, t, 2, true);\n        },\n        getWeightedNormal: function (v, t) {\n          return evaluate(v, t, 2, false);\n        },\n        getCurvature: function (v, t) {\n          return evaluate(v, t, 3, false).x;\n        },\n        getPeaks: function (v) {\n          var x0 = v[0],\n            y0 = v[1],\n            x1 = v[2],\n            y1 = v[3],\n            x2 = v[4],\n            y2 = v[5],\n            x3 = v[6],\n            y3 = v[7],\n            ax = -x0 + 3 * x1 - 3 * x2 + x3,\n            bx = 3 * x0 - 6 * x1 + 3 * x2,\n            cx = -3 * x0 + 3 * x1,\n            ay = -y0 + 3 * y1 - 3 * y2 + y3,\n            by = 3 * y0 - 6 * y1 + 3 * y2,\n            cy = -3 * y0 + 3 * y1,\n            tMin = 1e-8,\n            tMax = 1 - tMin,\n            roots = [];\n          Numerical.solveCubic(9 * (ax * ax + ay * ay), 9 * (ax * bx + by * ay), 2 * (bx * bx + by * by) + 3 * (cx * ax + cy * ay), cx * bx + by * cy, roots, tMin, tMax);\n          return roots.sort();\n        }\n      }\n    };\n  }(), new function () {\n    function addLocation(locations, include, c1, t1, c2, t2, overlap) {\n      var excludeStart = !overlap && c1.getPrevious() === c2,\n        excludeEnd = !overlap && c1 !== c2 && c1.getNext() === c2,\n        tMin = 1e-8,\n        tMax = 1 - tMin;\n      if (t1 !== null && t1 >= (excludeStart ? tMin : 0) && t1 <= (excludeEnd ? tMax : 1)) {\n        if (t2 !== null && t2 >= (excludeEnd ? tMin : 0) && t2 <= (excludeStart ? tMax : 1)) {\n          var loc1 = new CurveLocation(c1, t1, null, overlap),\n            loc2 = new CurveLocation(c2, t2, null, overlap);\n          loc1._intersection = loc2;\n          loc2._intersection = loc1;\n          if (!include || include(loc1)) {\n            CurveLocation.insert(locations, loc1, true);\n          }\n        }\n      }\n    }\n    function addCurveIntersections(v1, v2, c1, c2, locations, include, flip, recursion, calls, tMin, tMax, uMin, uMax) {\n      if (++calls >= 4096 || ++recursion >= 40) return calls;\n      var fatLineEpsilon = 1e-9,\n        q0x = v2[0],\n        q0y = v2[1],\n        q3x = v2[6],\n        q3y = v2[7],\n        getSignedDistance = Line.getSignedDistance,\n        d1 = getSignedDistance(q0x, q0y, q3x, q3y, v2[2], v2[3]),\n        d2 = getSignedDistance(q0x, q0y, q3x, q3y, v2[4], v2[5]),\n        factor = d1 * d2 > 0 ? 3 / 4 : 4 / 9,\n        dMin = factor * Math.min(0, d1, d2),\n        dMax = factor * Math.max(0, d1, d2),\n        dp0 = getSignedDistance(q0x, q0y, q3x, q3y, v1[0], v1[1]),\n        dp1 = getSignedDistance(q0x, q0y, q3x, q3y, v1[2], v1[3]),\n        dp2 = getSignedDistance(q0x, q0y, q3x, q3y, v1[4], v1[5]),\n        dp3 = getSignedDistance(q0x, q0y, q3x, q3y, v1[6], v1[7]),\n        hull = getConvexHull(dp0, dp1, dp2, dp3),\n        top = hull[0],\n        bottom = hull[1],\n        tMinClip,\n        tMaxClip;\n      if (d1 === 0 && d2 === 0 && dp0 === 0 && dp1 === 0 && dp2 === 0 && dp3 === 0 || (tMinClip = clipConvexHull(top, bottom, dMin, dMax)) == null || (tMaxClip = clipConvexHull(top.reverse(), bottom.reverse(), dMin, dMax)) == null) return calls;\n      var tMinNew = tMin + (tMax - tMin) * tMinClip,\n        tMaxNew = tMin + (tMax - tMin) * tMaxClip;\n      if (Math.max(uMax - uMin, tMaxNew - tMinNew) < fatLineEpsilon) {\n        var t = (tMinNew + tMaxNew) / 2,\n          u = (uMin + uMax) / 2;\n        addLocation(locations, include, flip ? c2 : c1, flip ? u : t, flip ? c1 : c2, flip ? t : u);\n      } else {\n        v1 = Curve.getPart(v1, tMinClip, tMaxClip);\n        var uDiff = uMax - uMin;\n        if (tMaxClip - tMinClip > 0.8) {\n          if (tMaxNew - tMinNew > uDiff) {\n            var parts = Curve.subdivide(v1, 0.5),\n              t = (tMinNew + tMaxNew) / 2;\n            calls = addCurveIntersections(v2, parts[0], c2, c1, locations, include, !flip, recursion, calls, uMin, uMax, tMinNew, t);\n            calls = addCurveIntersections(v2, parts[1], c2, c1, locations, include, !flip, recursion, calls, uMin, uMax, t, tMaxNew);\n          } else {\n            var parts = Curve.subdivide(v2, 0.5),\n              u = (uMin + uMax) / 2;\n            calls = addCurveIntersections(parts[0], v1, c2, c1, locations, include, !flip, recursion, calls, uMin, u, tMinNew, tMaxNew);\n            calls = addCurveIntersections(parts[1], v1, c2, c1, locations, include, !flip, recursion, calls, u, uMax, tMinNew, tMaxNew);\n          }\n        } else {\n          if (uDiff === 0 || uDiff >= fatLineEpsilon) {\n            calls = addCurveIntersections(v2, v1, c2, c1, locations, include, !flip, recursion, calls, uMin, uMax, tMinNew, tMaxNew);\n          } else {\n            calls = addCurveIntersections(v1, v2, c1, c2, locations, include, flip, recursion, calls, tMinNew, tMaxNew, uMin, uMax);\n          }\n        }\n      }\n      return calls;\n    }\n    function getConvexHull(dq0, dq1, dq2, dq3) {\n      var p0 = [0, dq0],\n        p1 = [1 / 3, dq1],\n        p2 = [2 / 3, dq2],\n        p3 = [1, dq3],\n        dist1 = dq1 - (2 * dq0 + dq3) / 3,\n        dist2 = dq2 - (dq0 + 2 * dq3) / 3,\n        hull;\n      if (dist1 * dist2 < 0) {\n        hull = [[p0, p1, p3], [p0, p2, p3]];\n      } else {\n        var distRatio = dist1 / dist2;\n        hull = [distRatio >= 2 ? [p0, p1, p3] : distRatio <= 0.5 ? [p0, p2, p3] : [p0, p1, p2, p3], [p0, p3]];\n      }\n      return (dist1 || dist2) < 0 ? hull.reverse() : hull;\n    }\n    function clipConvexHull(hullTop, hullBottom, dMin, dMax) {\n      if (hullTop[0][1] < dMin) {\n        return clipConvexHullPart(hullTop, true, dMin);\n      } else if (hullBottom[0][1] > dMax) {\n        return clipConvexHullPart(hullBottom, false, dMax);\n      } else {\n        return hullTop[0][0];\n      }\n    }\n    function clipConvexHullPart(part, top, threshold) {\n      var px = part[0][0],\n        py = part[0][1];\n      for (var i = 1, l = part.length; i < l; i++) {\n        var qx = part[i][0],\n          qy = part[i][1];\n        if (top ? qy >= threshold : qy <= threshold) {\n          return qy === threshold ? qx : px + (threshold - py) * (qx - px) / (qy - py);\n        }\n        px = qx;\n        py = qy;\n      }\n      return null;\n    }\n    function getCurveLineIntersections(v, px, py, vx, vy) {\n      var isZero = Numerical.isZero;\n      if (isZero(vx) && isZero(vy)) {\n        var t = Curve.getTimeOf(v, new Point(px, py));\n        return t === null ? [] : [t];\n      }\n      var angle = Math.atan2(-vy, vx),\n        sin = Math.sin(angle),\n        cos = Math.cos(angle),\n        rv = [],\n        roots = [];\n      for (var i = 0; i < 8; i += 2) {\n        var x = v[i] - px,\n          y = v[i + 1] - py;\n        rv.push(x * cos - y * sin, x * sin + y * cos);\n      }\n      Curve.solveCubic(rv, 1, 0, roots, 0, 1);\n      return roots;\n    }\n    function addCurveLineIntersections(v1, v2, c1, c2, locations, include, flip) {\n      var x1 = v2[0],\n        y1 = v2[1],\n        x2 = v2[6],\n        y2 = v2[7],\n        roots = getCurveLineIntersections(v1, x1, y1, x2 - x1, y2 - y1);\n      for (var i = 0, l = roots.length; i < l; i++) {\n        var t1 = roots[i],\n          p1 = Curve.getPoint(v1, t1),\n          t2 = Curve.getTimeOf(v2, p1);\n        if (t2 !== null) {\n          addLocation(locations, include, flip ? c2 : c1, flip ? t2 : t1, flip ? c1 : c2, flip ? t1 : t2);\n        }\n      }\n    }\n    function addLineIntersection(v1, v2, c1, c2, locations, include) {\n      var pt = Line.intersect(v1[0], v1[1], v1[6], v1[7], v2[0], v2[1], v2[6], v2[7]);\n      if (pt) {\n        addLocation(locations, include, c1, Curve.getTimeOf(v1, pt), c2, Curve.getTimeOf(v2, pt));\n      }\n    }\n    function getCurveIntersections(v1, v2, c1, c2, locations, include) {\n      var epsilon = 1e-12,\n        min = Math.min,\n        max = Math.max;\n      if (max(v1[0], v1[2], v1[4], v1[6]) + epsilon > min(v2[0], v2[2], v2[4], v2[6]) && min(v1[0], v1[2], v1[4], v1[6]) - epsilon < max(v2[0], v2[2], v2[4], v2[6]) && max(v1[1], v1[3], v1[5], v1[7]) + epsilon > min(v2[1], v2[3], v2[5], v2[7]) && min(v1[1], v1[3], v1[5], v1[7]) - epsilon < max(v2[1], v2[3], v2[5], v2[7])) {\n        var overlaps = getOverlaps(v1, v2);\n        if (overlaps) {\n          for (var i = 0; i < 2; i++) {\n            var overlap = overlaps[i];\n            addLocation(locations, include, c1, overlap[0], c2, overlap[1], true);\n          }\n        } else {\n          var straight1 = Curve.isStraight(v1),\n            straight2 = Curve.isStraight(v2),\n            straight = straight1 && straight2,\n            flip = straight1 && !straight2,\n            before = locations.length;\n          (straight ? addLineIntersection : straight1 || straight2 ? addCurveLineIntersections : addCurveIntersections)(flip ? v2 : v1, flip ? v1 : v2, flip ? c2 : c1, flip ? c1 : c2, locations, include, flip, 0, 0, 0, 1, 0, 1);\n          if (!straight || locations.length === before) {\n            for (var i = 0; i < 4; i++) {\n              var t1 = i >> 1,\n                t2 = i & 1,\n                i1 = t1 * 6,\n                i2 = t2 * 6,\n                p1 = new Point(v1[i1], v1[i1 + 1]),\n                p2 = new Point(v2[i2], v2[i2 + 1]);\n              if (p1.isClose(p2, epsilon)) {\n                addLocation(locations, include, c1, t1, c2, t2);\n              }\n            }\n          }\n        }\n      }\n      return locations;\n    }\n    function getSelfIntersection(v1, c1, locations, include) {\n      var info = Curve.classify(v1);\n      if (info.type === 'loop') {\n        var roots = info.roots;\n        addLocation(locations, include, c1, roots[0], c1, roots[1]);\n      }\n      return locations;\n    }\n    function getIntersections(curves1, curves2, include, matrix1, matrix2, _returnFirst) {\n      var epsilon = 1e-7,\n        self = !curves2;\n      if (self) curves2 = curves1;\n      var length1 = curves1.length,\n        length2 = curves2.length,\n        values1 = new Array(length1),\n        values2 = self ? values1 : new Array(length2),\n        locations = [];\n      for (var i = 0; i < length1; i++) {\n        values1[i] = curves1[i].getValues(matrix1);\n      }\n      if (!self) {\n        for (var i = 0; i < length2; i++) {\n          values2[i] = curves2[i].getValues(matrix2);\n        }\n      }\n      var boundsCollisions = CollisionDetection.findCurveBoundsCollisions(values1, values2, epsilon);\n      for (var index1 = 0; index1 < length1; index1++) {\n        var curve1 = curves1[index1],\n          v1 = values1[index1];\n        if (self) {\n          getSelfIntersection(v1, curve1, locations, include);\n        }\n        var collisions1 = boundsCollisions[index1];\n        if (collisions1) {\n          for (var j = 0; j < collisions1.length; j++) {\n            if (_returnFirst && locations.length) return locations;\n            var index2 = collisions1[j];\n            if (!self || index2 > index1) {\n              var curve2 = curves2[index2],\n                v2 = values2[index2];\n              getCurveIntersections(v1, v2, curve1, curve2, locations, include);\n            }\n          }\n        }\n      }\n      return locations;\n    }\n    function getOverlaps(v1, v2) {\n      function getSquaredLineLength(v) {\n        var x = v[6] - v[0],\n          y = v[7] - v[1];\n        return x * x + y * y;\n      }\n      var abs = Math.abs,\n        getDistance = Line.getDistance,\n        timeEpsilon = 1e-8,\n        geomEpsilon = 1e-7,\n        straight1 = Curve.isStraight(v1),\n        straight2 = Curve.isStraight(v2),\n        straightBoth = straight1 && straight2,\n        flip = getSquaredLineLength(v1) < getSquaredLineLength(v2),\n        l1 = flip ? v2 : v1,\n        l2 = flip ? v1 : v2,\n        px = l1[0],\n        py = l1[1],\n        vx = l1[6] - px,\n        vy = l1[7] - py;\n      if (getDistance(px, py, vx, vy, l2[0], l2[1], true) < geomEpsilon && getDistance(px, py, vx, vy, l2[6], l2[7], true) < geomEpsilon) {\n        if (!straightBoth && getDistance(px, py, vx, vy, l1[2], l1[3], true) < geomEpsilon && getDistance(px, py, vx, vy, l1[4], l1[5], true) < geomEpsilon && getDistance(px, py, vx, vy, l2[2], l2[3], true) < geomEpsilon && getDistance(px, py, vx, vy, l2[4], l2[5], true) < geomEpsilon) {\n          straight1 = straight2 = straightBoth = true;\n        }\n      } else if (straightBoth) {\n        return null;\n      }\n      if (straight1 ^ straight2) {\n        return null;\n      }\n      var v = [v1, v2],\n        pairs = [];\n      for (var i = 0; i < 4 && pairs.length < 2; i++) {\n        var i1 = i & 1,\n          i2 = i1 ^ 1,\n          t1 = i >> 1,\n          t2 = Curve.getTimeOf(v[i1], new Point(v[i2][t1 ? 6 : 0], v[i2][t1 ? 7 : 1]));\n        if (t2 != null) {\n          var pair = i1 ? [t1, t2] : [t2, t1];\n          if (!pairs.length || abs(pair[0] - pairs[0][0]) > timeEpsilon && abs(pair[1] - pairs[0][1]) > timeEpsilon) {\n            pairs.push(pair);\n          }\n        }\n        if (i > 2 && !pairs.length) break;\n      }\n      if (pairs.length !== 2) {\n        pairs = null;\n      } else if (!straightBoth) {\n        var o1 = Curve.getPart(v1, pairs[0][0], pairs[1][0]),\n          o2 = Curve.getPart(v2, pairs[0][1], pairs[1][1]);\n        if (abs(o2[2] - o1[2]) > geomEpsilon || abs(o2[3] - o1[3]) > geomEpsilon || abs(o2[4] - o1[4]) > geomEpsilon || abs(o2[5] - o1[5]) > geomEpsilon) pairs = null;\n      }\n      return pairs;\n    }\n    function getTimesWithTangent(v, tangent) {\n      var x0 = v[0],\n        y0 = v[1],\n        x1 = v[2],\n        y1 = v[3],\n        x2 = v[4],\n        y2 = v[5],\n        x3 = v[6],\n        y3 = v[7],\n        normalized = tangent.normalize(),\n        tx = normalized.x,\n        ty = normalized.y,\n        ax = 3 * x3 - 9 * x2 + 9 * x1 - 3 * x0,\n        ay = 3 * y3 - 9 * y2 + 9 * y1 - 3 * y0,\n        bx = 6 * x2 - 12 * x1 + 6 * x0,\n        by = 6 * y2 - 12 * y1 + 6 * y0,\n        cx = 3 * x1 - 3 * x0,\n        cy = 3 * y1 - 3 * y0,\n        den = 2 * ax * ty - 2 * ay * tx,\n        times = [];\n      if (Math.abs(den) < Numerical.CURVETIME_EPSILON) {\n        var num = ax * cy - ay * cx,\n          den = ax * by - ay * bx;\n        if (den != 0) {\n          var t = -num / den;\n          if (t >= 0 && t <= 1) times.push(t);\n        }\n      } else {\n        var delta = (bx * bx - 4 * ax * cx) * ty * ty + (-2 * bx * by + 4 * ay * cx + 4 * ax * cy) * tx * ty + (by * by - 4 * ay * cy) * tx * tx,\n          k = bx * ty - by * tx;\n        if (delta >= 0 && den != 0) {\n          var d = Math.sqrt(delta),\n            t0 = -(k + d) / den,\n            t1 = (-k + d) / den;\n          if (t0 >= 0 && t0 <= 1) times.push(t0);\n          if (t1 >= 0 && t1 <= 1) times.push(t1);\n        }\n      }\n      return times;\n    }\n    return {\n      getIntersections: function (curve) {\n        var v1 = this.getValues(),\n          v2 = curve && curve !== this && curve.getValues();\n        return v2 ? getCurveIntersections(v1, v2, this, curve, []) : getSelfIntersection(v1, this, []);\n      },\n      statics: {\n        getOverlaps: getOverlaps,\n        getIntersections: getIntersections,\n        getCurveLineIntersections: getCurveLineIntersections,\n        getTimesWithTangent: getTimesWithTangent\n      }\n    };\n  }());\n  var CurveLocation = Base.extend({\n    _class: 'CurveLocation',\n    initialize: function CurveLocation(curve, time, point, _overlap, _distance) {\n      if (time >= 0.99999999) {\n        var next = curve.getNext();\n        if (next) {\n          time = 0;\n          curve = next;\n        }\n      }\n      this._setCurve(curve);\n      this._time = time;\n      this._point = point || curve.getPointAtTime(time);\n      this._overlap = _overlap;\n      this._distance = _distance;\n      this._intersection = this._next = this._previous = null;\n    },\n    _setPath: function (path) {\n      this._path = path;\n      this._version = path ? path._version : 0;\n    },\n    _setCurve: function (curve) {\n      this._setPath(curve._path);\n      this._curve = curve;\n      this._segment = null;\n      this._segment1 = curve._segment1;\n      this._segment2 = curve._segment2;\n    },\n    _setSegment: function (segment) {\n      var curve = segment.getCurve();\n      if (curve) {\n        this._setCurve(curve);\n      } else {\n        this._setPath(segment._path);\n        this._segment1 = segment;\n        this._segment2 = null;\n      }\n      this._segment = segment;\n      this._time = segment === this._segment1 ? 0 : 1;\n      this._point = segment._point.clone();\n    },\n    getSegment: function () {\n      var segment = this._segment;\n      if (!segment) {\n        var curve = this.getCurve(),\n          time = this.getTime();\n        if (time === 0) {\n          segment = curve._segment1;\n        } else if (time === 1) {\n          segment = curve._segment2;\n        } else if (time != null) {\n          segment = curve.getPartLength(0, time) < curve.getPartLength(time, 1) ? curve._segment1 : curve._segment2;\n        }\n        this._segment = segment;\n      }\n      return segment;\n    },\n    getCurve: function () {\n      var path = this._path,\n        that = this;\n      if (path && path._version !== this._version) {\n        this._time = this._offset = this._curveOffset = this._curve = null;\n      }\n      function trySegment(segment) {\n        var curve = segment && segment.getCurve();\n        if (curve && (that._time = curve.getTimeOf(that._point)) != null) {\n          that._setCurve(curve);\n          return curve;\n        }\n      }\n      return this._curve || trySegment(this._segment) || trySegment(this._segment1) || trySegment(this._segment2.getPrevious());\n    },\n    getPath: function () {\n      var curve = this.getCurve();\n      return curve && curve._path;\n    },\n    getIndex: function () {\n      var curve = this.getCurve();\n      return curve && curve.getIndex();\n    },\n    getTime: function () {\n      var curve = this.getCurve(),\n        time = this._time;\n      return curve && time == null ? this._time = curve.getTimeOf(this._point) : time;\n    },\n    getParameter: '#getTime',\n    getPoint: function () {\n      return this._point;\n    },\n    getOffset: function () {\n      var offset = this._offset;\n      if (offset == null) {\n        offset = 0;\n        var path = this.getPath(),\n          index = this.getIndex();\n        if (path && index != null) {\n          var curves = path.getCurves();\n          for (var i = 0; i < index; i++) offset += curves[i].getLength();\n        }\n        this._offset = offset += this.getCurveOffset();\n      }\n      return offset;\n    },\n    getCurveOffset: function () {\n      var offset = this._curveOffset;\n      if (offset == null) {\n        var curve = this.getCurve(),\n          time = this.getTime();\n        this._curveOffset = offset = time != null && curve && curve.getPartLength(0, time);\n      }\n      return offset;\n    },\n    getIntersection: function () {\n      return this._intersection;\n    },\n    getDistance: function () {\n      return this._distance;\n    },\n    divide: function () {\n      var curve = this.getCurve(),\n        res = curve && curve.divideAtTime(this.getTime());\n      if (res) {\n        this._setSegment(res._segment1);\n      }\n      return res;\n    },\n    split: function () {\n      var curve = this.getCurve(),\n        path = curve._path,\n        res = curve && curve.splitAtTime(this.getTime());\n      if (res) {\n        this._setSegment(path.getLastSegment());\n      }\n      return res;\n    },\n    equals: function (loc, _ignoreOther) {\n      var res = this === loc;\n      if (!res && loc instanceof CurveLocation) {\n        var c1 = this.getCurve(),\n          c2 = loc.getCurve(),\n          p1 = c1._path,\n          p2 = c2._path;\n        if (p1 === p2) {\n          var abs = Math.abs,\n            epsilon = 1e-7,\n            diff = abs(this.getOffset() - loc.getOffset()),\n            i1 = !_ignoreOther && this._intersection,\n            i2 = !_ignoreOther && loc._intersection;\n          res = (diff < epsilon || p1 && abs(p1.getLength() - diff) < epsilon) && (!i1 && !i2 || i1 && i2 && i1.equals(i2, true));\n        }\n      }\n      return res;\n    },\n    toString: function () {\n      var parts = [],\n        point = this.getPoint(),\n        f = Formatter.instance;\n      if (point) parts.push('point: ' + point);\n      var index = this.getIndex();\n      if (index != null) parts.push('index: ' + index);\n      var time = this.getTime();\n      if (time != null) parts.push('time: ' + f.number(time));\n      if (this._distance != null) parts.push('distance: ' + f.number(this._distance));\n      return '{ ' + parts.join(', ') + ' }';\n    },\n    isTouching: function () {\n      var inter = this._intersection;\n      if (inter && this.getTangent().isCollinear(inter.getTangent())) {\n        var curve1 = this.getCurve(),\n          curve2 = inter.getCurve();\n        return !(curve1.isStraight() && curve2.isStraight() && curve1.getLine().intersect(curve2.getLine()));\n      }\n      return false;\n    },\n    isCrossing: function () {\n      var inter = this._intersection;\n      if (!inter) return false;\n      var t1 = this.getTime(),\n        t2 = inter.getTime(),\n        tMin = 1e-8,\n        tMax = 1 - tMin,\n        t1Inside = t1 >= tMin && t1 <= tMax,\n        t2Inside = t2 >= tMin && t2 <= tMax;\n      if (t1Inside && t2Inside) return !this.isTouching();\n      var c2 = this.getCurve(),\n        c1 = c2 && t1 < tMin ? c2.getPrevious() : c2,\n        c4 = inter.getCurve(),\n        c3 = c4 && t2 < tMin ? c4.getPrevious() : c4;\n      if (t1 > tMax) c2 = c2.getNext();\n      if (t2 > tMax) c4 = c4.getNext();\n      if (!c1 || !c2 || !c3 || !c4) return false;\n      var offsets = [];\n      function addOffsets(curve, end) {\n        var v = curve.getValues(),\n          roots = Curve.classify(v).roots || Curve.getPeaks(v),\n          count = roots.length,\n          offset = Curve.getLength(v, end && count ? roots[count - 1] : 0, !end && count ? roots[0] : 1);\n        offsets.push(count ? offset : offset / 32);\n      }\n      function isInRange(angle, min, max) {\n        return min < max ? angle > min && angle < max : angle > min || angle < max;\n      }\n      if (!t1Inside) {\n        addOffsets(c1, true);\n        addOffsets(c2, false);\n      }\n      if (!t2Inside) {\n        addOffsets(c3, true);\n        addOffsets(c4, false);\n      }\n      var pt = this.getPoint(),\n        offset = Math.min.apply(Math, offsets),\n        v2 = t1Inside ? c2.getTangentAtTime(t1) : c2.getPointAt(offset).subtract(pt),\n        v1 = t1Inside ? v2.negate() : c1.getPointAt(-offset).subtract(pt),\n        v4 = t2Inside ? c4.getTangentAtTime(t2) : c4.getPointAt(offset).subtract(pt),\n        v3 = t2Inside ? v4.negate() : c3.getPointAt(-offset).subtract(pt),\n        a1 = v1.getAngle(),\n        a2 = v2.getAngle(),\n        a3 = v3.getAngle(),\n        a4 = v4.getAngle();\n      return !!(t1Inside ? isInRange(a1, a3, a4) ^ isInRange(a2, a3, a4) && isInRange(a1, a4, a3) ^ isInRange(a2, a4, a3) : isInRange(a3, a1, a2) ^ isInRange(a4, a1, a2) && isInRange(a3, a2, a1) ^ isInRange(a4, a2, a1));\n    },\n    hasOverlap: function () {\n      return !!this._overlap;\n    }\n  }, Base.each(Curve._evaluateMethods, function (name) {\n    var get = name + 'At';\n    this[name] = function () {\n      var curve = this.getCurve(),\n        time = this.getTime();\n      return time != null && curve && curve[get](time, true);\n    };\n  }, {\n    preserve: true\n  }), new function () {\n    function insert(locations, loc, merge) {\n      var length = locations.length,\n        l = 0,\n        r = length - 1;\n      function search(index, dir) {\n        for (var i = index + dir; i >= -1 && i <= length; i += dir) {\n          var loc2 = locations[(i % length + length) % length];\n          if (!loc.getPoint().isClose(loc2.getPoint(), 1e-7)) break;\n          if (loc.equals(loc2)) return loc2;\n        }\n        return null;\n      }\n      while (l <= r) {\n        var m = l + r >>> 1,\n          loc2 = locations[m],\n          found;\n        if (merge && (found = loc.equals(loc2) ? loc2 : search(m, -1) || search(m, 1))) {\n          if (loc._overlap) {\n            found._overlap = found._intersection._overlap = true;\n          }\n          return found;\n        }\n        var path1 = loc.getPath(),\n          path2 = loc2.getPath(),\n          diff = path1 !== path2 ? path1._id - path2._id : loc.getIndex() + loc.getTime() - (loc2.getIndex() + loc2.getTime());\n        if (diff < 0) {\n          r = m - 1;\n        } else {\n          l = m + 1;\n        }\n      }\n      locations.splice(l, 0, loc);\n      return loc;\n    }\n    return {\n      statics: {\n        insert: insert,\n        expand: function (locations) {\n          var expanded = locations.slice();\n          for (var i = locations.length - 1; i >= 0; i--) {\n            insert(expanded, locations[i]._intersection, false);\n          }\n          return expanded;\n        }\n      }\n    };\n  }());\n  var PathItem = Item.extend({\n    _class: 'PathItem',\n    _selectBounds: false,\n    _canScaleStroke: true,\n    beans: true,\n    initialize: function PathItem() {},\n    statics: {\n      create: function (arg) {\n        var data, segments, compound;\n        if (Base.isPlainObject(arg)) {\n          segments = arg.segments;\n          data = arg.pathData;\n        } else if (Array.isArray(arg)) {\n          segments = arg;\n        } else if (typeof arg === 'string') {\n          data = arg;\n        }\n        if (segments) {\n          var first = segments[0];\n          compound = first && Array.isArray(first[0]);\n        } else if (data) {\n          compound = (data.match(/m/gi) || []).length > 1 || /z\\s*\\S+/i.test(data);\n        }\n        var ctor = compound ? CompoundPath : Path;\n        return new ctor(arg);\n      }\n    },\n    _asPathItem: function () {\n      return this;\n    },\n    isClockwise: function () {\n      return this.getArea() >= 0;\n    },\n    setClockwise: function (clockwise) {\n      if (this.isClockwise() != (clockwise = !!clockwise)) this.reverse();\n    },\n    setPathData: function (data) {\n      var parts = data && data.match(/[mlhvcsqtaz][^mlhvcsqtaz]*/ig),\n        coords,\n        relative = false,\n        previous,\n        control,\n        current = new Point(),\n        start = new Point();\n      function getCoord(index, coord) {\n        var val = +coords[index];\n        if (relative) val += current[coord];\n        return val;\n      }\n      function getPoint(index) {\n        return new Point(getCoord(index, 'x'), getCoord(index + 1, 'y'));\n      }\n      this.clear();\n      for (var i = 0, l = parts && parts.length; i < l; i++) {\n        var part = parts[i],\n          command = part[0],\n          lower = command.toLowerCase();\n        coords = part.match(/[+-]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?/g);\n        var length = coords && coords.length;\n        relative = command === lower;\n        if (previous === 'z' && !/[mz]/.test(lower)) this.moveTo(current);\n        switch (lower) {\n          case 'm':\n          case 'l':\n            var move = lower === 'm';\n            for (var j = 0; j < length; j += 2) {\n              this[move ? 'moveTo' : 'lineTo'](current = getPoint(j));\n              if (move) {\n                start = current;\n                move = false;\n              }\n            }\n            control = current;\n            break;\n          case 'h':\n          case 'v':\n            var coord = lower === 'h' ? 'x' : 'y';\n            current = current.clone();\n            for (var j = 0; j < length; j++) {\n              current[coord] = getCoord(j, coord);\n              this.lineTo(current);\n            }\n            control = current;\n            break;\n          case 'c':\n            for (var j = 0; j < length; j += 6) {\n              this.cubicCurveTo(getPoint(j), control = getPoint(j + 2), current = getPoint(j + 4));\n            }\n            break;\n          case 's':\n            for (var j = 0; j < length; j += 4) {\n              this.cubicCurveTo(/[cs]/.test(previous) ? current.multiply(2).subtract(control) : current, control = getPoint(j), current = getPoint(j + 2));\n              previous = lower;\n            }\n            break;\n          case 'q':\n            for (var j = 0; j < length; j += 4) {\n              this.quadraticCurveTo(control = getPoint(j), current = getPoint(j + 2));\n            }\n            break;\n          case 't':\n            for (var j = 0; j < length; j += 2) {\n              this.quadraticCurveTo(control = /[qt]/.test(previous) ? current.multiply(2).subtract(control) : current, current = getPoint(j));\n              previous = lower;\n            }\n            break;\n          case 'a':\n            for (var j = 0; j < length; j += 7) {\n              this.arcTo(current = getPoint(j + 5), new Size(+coords[j], +coords[j + 1]), +coords[j + 2], +coords[j + 4], +coords[j + 3]);\n            }\n            break;\n          case 'z':\n            this.closePath(1e-12);\n            current = start;\n            break;\n        }\n        previous = lower;\n      }\n    },\n    _canComposite: function () {\n      return !(this.hasFill() && this.hasStroke());\n    },\n    _contains: function (point) {\n      var winding = point.isInside(this.getBounds({\n        internal: true,\n        handle: true\n      })) ? this._getWinding(point) : {};\n      return winding.onPath || !!(this.getFillRule() === 'evenodd' ? winding.windingL & 1 || winding.windingR & 1 : winding.winding);\n    },\n    getIntersections: function (path, include, _matrix, _returnFirst) {\n      var self = this === path || !path,\n        matrix1 = this._matrix._orNullIfIdentity(),\n        matrix2 = self ? matrix1 : (_matrix || path._matrix)._orNullIfIdentity();\n      return self || this.getBounds(matrix1).intersects(path.getBounds(matrix2), 1e-12) ? Curve.getIntersections(this.getCurves(), !self && path.getCurves(), include, matrix1, matrix2, _returnFirst) : [];\n    },\n    getCrossings: function (path) {\n      return this.getIntersections(path, function (inter) {\n        return inter.isCrossing();\n      });\n    },\n    getNearestLocation: function () {\n      var point = Point.read(arguments),\n        curves = this.getCurves(),\n        minDist = Infinity,\n        minLoc = null;\n      for (var i = 0, l = curves.length; i < l; i++) {\n        var loc = curves[i].getNearestLocation(point);\n        if (loc._distance < minDist) {\n          minDist = loc._distance;\n          minLoc = loc;\n        }\n      }\n      return minLoc;\n    },\n    getNearestPoint: function () {\n      var loc = this.getNearestLocation.apply(this, arguments);\n      return loc ? loc.getPoint() : loc;\n    },\n    interpolate: function (from, to, factor) {\n      var isPath = !this._children,\n        name = isPath ? '_segments' : '_children',\n        itemsFrom = from[name],\n        itemsTo = to[name],\n        items = this[name];\n      if (!itemsFrom || !itemsTo || itemsFrom.length !== itemsTo.length) {\n        throw new Error('Invalid operands in interpolate() call: ' + from + ', ' + to);\n      }\n      var current = items.length,\n        length = itemsTo.length;\n      if (current < length) {\n        var ctor = isPath ? Segment : Path;\n        for (var i = current; i < length; i++) {\n          this.add(new ctor());\n        }\n      } else if (current > length) {\n        this[isPath ? 'removeSegments' : 'removeChildren'](length, current);\n      }\n      for (var i = 0; i < length; i++) {\n        items[i].interpolate(itemsFrom[i], itemsTo[i], factor);\n      }\n      if (isPath) {\n        this.setClosed(from._closed);\n        this._changed(9);\n      }\n    },\n    compare: function (path) {\n      var ok = false;\n      if (path) {\n        var paths1 = this._children || [this],\n          paths2 = path._children ? path._children.slice() : [path],\n          length1 = paths1.length,\n          length2 = paths2.length,\n          matched = [],\n          count = 0;\n        ok = true;\n        var boundsOverlaps = CollisionDetection.findItemBoundsCollisions(paths1, paths2, Numerical.GEOMETRIC_EPSILON);\n        for (var i1 = length1 - 1; i1 >= 0 && ok; i1--) {\n          var path1 = paths1[i1];\n          ok = false;\n          var pathBoundsOverlaps = boundsOverlaps[i1];\n          if (pathBoundsOverlaps) {\n            for (var i2 = pathBoundsOverlaps.length - 1; i2 >= 0 && !ok; i2--) {\n              if (path1.compare(paths2[pathBoundsOverlaps[i2]])) {\n                if (!matched[pathBoundsOverlaps[i2]]) {\n                  matched[pathBoundsOverlaps[i2]] = true;\n                  count++;\n                }\n                ok = true;\n              }\n            }\n          }\n        }\n        ok = ok && count === length2;\n      }\n      return ok;\n    }\n  });\n  var Path = PathItem.extend({\n    _class: 'Path',\n    _serializeFields: {\n      segments: [],\n      closed: false\n    },\n    initialize: function Path(arg) {\n      this._closed = false;\n      this._segments = [];\n      this._version = 0;\n      var args = arguments,\n        segments = Array.isArray(arg) ? typeof arg[0] === 'object' ? arg : args : arg && arg.size === undefined && (arg.x !== undefined || arg.point !== undefined) ? args : null;\n      if (segments && segments.length > 0) {\n        this.setSegments(segments);\n      } else {\n        this._curves = undefined;\n        this._segmentSelection = 0;\n        if (!segments && typeof arg === 'string') {\n          this.setPathData(arg);\n          arg = null;\n        }\n      }\n      this._initialize(!segments && arg);\n    },\n    _equals: function (item) {\n      return this._closed === item._closed && Base.equals(this._segments, item._segments);\n    },\n    copyContent: function (source) {\n      this.setSegments(source._segments);\n      this._closed = source._closed;\n    },\n    _changed: function _changed(flags) {\n      _changed.base.call(this, flags);\n      if (flags & 8) {\n        this._length = this._area = undefined;\n        if (flags & 32) {\n          this._version++;\n        } else if (this._curves) {\n          for (var i = 0, l = this._curves.length; i < l; i++) this._curves[i]._changed();\n        }\n      } else if (flags & 64) {\n        this._bounds = undefined;\n      }\n    },\n    getStyle: function () {\n      var parent = this._parent;\n      return (parent instanceof CompoundPath ? parent : this)._style;\n    },\n    getSegments: function () {\n      return this._segments;\n    },\n    setSegments: function (segments) {\n      var fullySelected = this.isFullySelected(),\n        length = segments && segments.length;\n      this._segments.length = 0;\n      this._segmentSelection = 0;\n      this._curves = undefined;\n      if (length) {\n        var last = segments[length - 1];\n        if (typeof last === 'boolean') {\n          this.setClosed(last);\n          length--;\n        }\n        this._add(Segment.readList(segments, 0, {}, length));\n      }\n      if (fullySelected) this.setFullySelected(true);\n    },\n    getFirstSegment: function () {\n      return this._segments[0];\n    },\n    getLastSegment: function () {\n      return this._segments[this._segments.length - 1];\n    },\n    getCurves: function () {\n      var curves = this._curves,\n        segments = this._segments;\n      if (!curves) {\n        var length = this._countCurves();\n        curves = this._curves = new Array(length);\n        for (var i = 0; i < length; i++) curves[i] = new Curve(this, segments[i], segments[i + 1] || segments[0]);\n      }\n      return curves;\n    },\n    getFirstCurve: function () {\n      return this.getCurves()[0];\n    },\n    getLastCurve: function () {\n      var curves = this.getCurves();\n      return curves[curves.length - 1];\n    },\n    isClosed: function () {\n      return this._closed;\n    },\n    setClosed: function (closed) {\n      if (this._closed != (closed = !!closed)) {\n        this._closed = closed;\n        if (this._curves) {\n          var length = this._curves.length = this._countCurves();\n          if (closed) this._curves[length - 1] = new Curve(this, this._segments[length - 1], this._segments[0]);\n        }\n        this._changed(41);\n      }\n    }\n  }, {\n    beans: true,\n    getPathData: function (_matrix, _precision) {\n      var segments = this._segments,\n        length = segments.length,\n        f = new Formatter(_precision),\n        coords = new Array(6),\n        first = true,\n        curX,\n        curY,\n        prevX,\n        prevY,\n        inX,\n        inY,\n        outX,\n        outY,\n        parts = [];\n      function addSegment(segment, skipLine) {\n        segment._transformCoordinates(_matrix, coords);\n        curX = coords[0];\n        curY = coords[1];\n        if (first) {\n          parts.push('M' + f.pair(curX, curY));\n          first = false;\n        } else {\n          inX = coords[2];\n          inY = coords[3];\n          if (inX === curX && inY === curY && outX === prevX && outY === prevY) {\n            if (!skipLine) {\n              var dx = curX - prevX,\n                dy = curY - prevY;\n              parts.push(dx === 0 ? 'v' + f.number(dy) : dy === 0 ? 'h' + f.number(dx) : 'l' + f.pair(dx, dy));\n            }\n          } else {\n            parts.push('c' + f.pair(outX - prevX, outY - prevY) + ' ' + f.pair(inX - prevX, inY - prevY) + ' ' + f.pair(curX - prevX, curY - prevY));\n          }\n        }\n        prevX = curX;\n        prevY = curY;\n        outX = coords[4];\n        outY = coords[5];\n      }\n      if (!length) return '';\n      for (var i = 0; i < length; i++) addSegment(segments[i]);\n      if (this._closed && length > 0) {\n        addSegment(segments[0], true);\n        parts.push('z');\n      }\n      return parts.join('');\n    },\n    isEmpty: function () {\n      return !this._segments.length;\n    },\n    _transformContent: function (matrix) {\n      var segments = this._segments,\n        coords = new Array(6);\n      for (var i = 0, l = segments.length; i < l; i++) segments[i]._transformCoordinates(matrix, coords, true);\n      return true;\n    },\n    _add: function (segs, index) {\n      var segments = this._segments,\n        curves = this._curves,\n        amount = segs.length,\n        append = index == null,\n        index = append ? segments.length : index;\n      for (var i = 0; i < amount; i++) {\n        var segment = segs[i];\n        if (segment._path) segment = segs[i] = segment.clone();\n        segment._path = this;\n        segment._index = index + i;\n        if (segment._selection) this._updateSelection(segment, 0, segment._selection);\n      }\n      if (append) {\n        Base.push(segments, segs);\n      } else {\n        segments.splice.apply(segments, [index, 0].concat(segs));\n        for (var i = index + amount, l = segments.length; i < l; i++) segments[i]._index = i;\n      }\n      if (curves) {\n        var total = this._countCurves(),\n          start = index > 0 && index + amount - 1 === total ? index - 1 : index,\n          insert = start,\n          end = Math.min(start + amount, total);\n        if (segs._curves) {\n          curves.splice.apply(curves, [start, 0].concat(segs._curves));\n          insert += segs._curves.length;\n        }\n        for (var i = insert; i < end; i++) curves.splice(i, 0, new Curve(this, null, null));\n        this._adjustCurves(start, end);\n      }\n      this._changed(41);\n      return segs;\n    },\n    _adjustCurves: function (start, end) {\n      var segments = this._segments,\n        curves = this._curves,\n        curve;\n      for (var i = start; i < end; i++) {\n        curve = curves[i];\n        curve._path = this;\n        curve._segment1 = segments[i];\n        curve._segment2 = segments[i + 1] || segments[0];\n        curve._changed();\n      }\n      if (curve = curves[this._closed && !start ? segments.length - 1 : start - 1]) {\n        curve._segment2 = segments[start] || segments[0];\n        curve._changed();\n      }\n      if (curve = curves[end]) {\n        curve._segment1 = segments[end];\n        curve._changed();\n      }\n    },\n    _countCurves: function () {\n      var length = this._segments.length;\n      return !this._closed && length > 0 ? length - 1 : length;\n    },\n    add: function (segment1) {\n      var args = arguments;\n      return args.length > 1 && typeof segment1 !== 'number' ? this._add(Segment.readList(args)) : this._add([Segment.read(args)])[0];\n    },\n    insert: function (index, segment1) {\n      var args = arguments;\n      return args.length > 2 && typeof segment1 !== 'number' ? this._add(Segment.readList(args, 1), index) : this._add([Segment.read(args, 1)], index)[0];\n    },\n    addSegment: function () {\n      return this._add([Segment.read(arguments)])[0];\n    },\n    insertSegment: function (index) {\n      return this._add([Segment.read(arguments, 1)], index)[0];\n    },\n    addSegments: function (segments) {\n      return this._add(Segment.readList(segments));\n    },\n    insertSegments: function (index, segments) {\n      return this._add(Segment.readList(segments), index);\n    },\n    removeSegment: function (index) {\n      return this.removeSegments(index, index + 1)[0] || null;\n    },\n    removeSegments: function (start, end, _includeCurves) {\n      start = start || 0;\n      end = Base.pick(end, this._segments.length);\n      var segments = this._segments,\n        curves = this._curves,\n        count = segments.length,\n        removed = segments.splice(start, end - start),\n        amount = removed.length;\n      if (!amount) return removed;\n      for (var i = 0; i < amount; i++) {\n        var segment = removed[i];\n        if (segment._selection) this._updateSelection(segment, segment._selection, 0);\n        segment._index = segment._path = null;\n      }\n      for (var i = start, l = segments.length; i < l; i++) segments[i]._index = i;\n      if (curves) {\n        var index = start > 0 && end === count + (this._closed ? 1 : 0) ? start - 1 : start,\n          curves = curves.splice(index, amount);\n        for (var i = curves.length - 1; i >= 0; i--) curves[i]._path = null;\n        if (_includeCurves) removed._curves = curves.slice(1);\n        this._adjustCurves(index, index);\n      }\n      this._changed(41);\n      return removed;\n    },\n    clear: '#removeSegments',\n    hasHandles: function () {\n      var segments = this._segments;\n      for (var i = 0, l = segments.length; i < l; i++) {\n        if (segments[i].hasHandles()) return true;\n      }\n      return false;\n    },\n    clearHandles: function () {\n      var segments = this._segments;\n      for (var i = 0, l = segments.length; i < l; i++) segments[i].clearHandles();\n    },\n    getLength: function () {\n      if (this._length == null) {\n        var curves = this.getCurves(),\n          length = 0;\n        for (var i = 0, l = curves.length; i < l; i++) length += curves[i].getLength();\n        this._length = length;\n      }\n      return this._length;\n    },\n    getArea: function () {\n      var area = this._area;\n      if (area == null) {\n        var segments = this._segments,\n          closed = this._closed;\n        area = 0;\n        for (var i = 0, l = segments.length; i < l; i++) {\n          var last = i + 1 === l;\n          area += Curve.getArea(Curve.getValues(segments[i], segments[last ? 0 : i + 1], null, last && !closed));\n        }\n        this._area = area;\n      }\n      return area;\n    },\n    isFullySelected: function () {\n      var length = this._segments.length;\n      return this.isSelected() && length > 0 && this._segmentSelection === length * 7;\n    },\n    setFullySelected: function (selected) {\n      if (selected) this._selectSegments(true);\n      this.setSelected(selected);\n    },\n    setSelection: function setSelection(selection) {\n      if (!(selection & 1)) this._selectSegments(false);\n      setSelection.base.call(this, selection);\n    },\n    _selectSegments: function (selected) {\n      var segments = this._segments,\n        length = segments.length,\n        selection = selected ? 7 : 0;\n      this._segmentSelection = selection * length;\n      for (var i = 0; i < length; i++) segments[i]._selection = selection;\n    },\n    _updateSelection: function (segment, oldSelection, newSelection) {\n      segment._selection = newSelection;\n      var selection = this._segmentSelection += newSelection - oldSelection;\n      if (selection > 0) this.setSelected(true);\n    },\n    divideAt: function (location) {\n      var loc = this.getLocationAt(location),\n        curve;\n      return loc && (curve = loc.getCurve().divideAt(loc.getCurveOffset())) ? curve._segment1 : null;\n    },\n    splitAt: function (location) {\n      var loc = this.getLocationAt(location),\n        index = loc && loc.index,\n        time = loc && loc.time,\n        tMin = 1e-8,\n        tMax = 1 - tMin;\n      if (time > tMax) {\n        index++;\n        time = 0;\n      }\n      var curves = this.getCurves();\n      if (index >= 0 && index < curves.length) {\n        if (time >= tMin) {\n          curves[index++].divideAtTime(time);\n        }\n        var segs = this.removeSegments(index, this._segments.length, true),\n          path;\n        if (this._closed) {\n          this.setClosed(false);\n          path = this;\n        } else {\n          path = new Path(Item.NO_INSERT);\n          path.insertAbove(this);\n          path.copyAttributes(this);\n        }\n        path._add(segs, 0);\n        this.addSegment(segs[0]);\n        return path;\n      }\n      return null;\n    },\n    split: function (index, time) {\n      var curve,\n        location = time === undefined ? index : (curve = this.getCurves()[index]) && curve.getLocationAtTime(time);\n      return location != null ? this.splitAt(location) : null;\n    },\n    join: function (path, tolerance) {\n      var epsilon = tolerance || 0;\n      if (path && path !== this) {\n        var segments = path._segments,\n          last1 = this.getLastSegment(),\n          last2 = path.getLastSegment();\n        if (!last2) return this;\n        if (last1 && last1._point.isClose(last2._point, epsilon)) path.reverse();\n        var first2 = path.getFirstSegment();\n        if (last1 && last1._point.isClose(first2._point, epsilon)) {\n          last1.setHandleOut(first2._handleOut);\n          this._add(segments.slice(1));\n        } else {\n          var first1 = this.getFirstSegment();\n          if (first1 && first1._point.isClose(first2._point, epsilon)) path.reverse();\n          last2 = path.getLastSegment();\n          if (first1 && first1._point.isClose(last2._point, epsilon)) {\n            first1.setHandleIn(last2._handleIn);\n            this._add(segments.slice(0, segments.length - 1), 0);\n          } else {\n            this._add(segments.slice());\n          }\n        }\n        if (path._closed) this._add([segments[0]]);\n        path.remove();\n      }\n      var first = this.getFirstSegment(),\n        last = this.getLastSegment();\n      if (first !== last && first._point.isClose(last._point, epsilon)) {\n        first.setHandleIn(last._handleIn);\n        last.remove();\n        this.setClosed(true);\n      }\n      return this;\n    },\n    reduce: function (options) {\n      var curves = this.getCurves(),\n        simplify = options && options.simplify,\n        tolerance = simplify ? 1e-7 : 0;\n      for (var i = curves.length - 1; i >= 0; i--) {\n        var curve = curves[i];\n        if (!curve.hasHandles() && (!curve.hasLength(tolerance) || simplify && curve.isCollinear(curve.getNext()))) curve.remove();\n      }\n      return this;\n    },\n    reverse: function () {\n      this._segments.reverse();\n      for (var i = 0, l = this._segments.length; i < l; i++) {\n        var segment = this._segments[i];\n        var handleIn = segment._handleIn;\n        segment._handleIn = segment._handleOut;\n        segment._handleOut = handleIn;\n        segment._index = i;\n      }\n      this._curves = null;\n      this._changed(9);\n    },\n    flatten: function (flatness) {\n      var flattener = new PathFlattener(this, flatness || 0.25, 256, true),\n        parts = flattener.parts,\n        length = parts.length,\n        segments = [];\n      for (var i = 0; i < length; i++) {\n        segments.push(new Segment(parts[i].curve.slice(0, 2)));\n      }\n      if (!this._closed && length > 0) {\n        segments.push(new Segment(parts[length - 1].curve.slice(6)));\n      }\n      this.setSegments(segments);\n    },\n    simplify: function (tolerance) {\n      var segments = new PathFitter(this).fit(tolerance || 2.5);\n      if (segments) this.setSegments(segments);\n      return !!segments;\n    },\n    smooth: function (options) {\n      var that = this,\n        opts = options || {},\n        type = opts.type || 'asymmetric',\n        segments = this._segments,\n        length = segments.length,\n        closed = this._closed;\n      function getIndex(value, _default) {\n        var index = value && value.index;\n        if (index != null) {\n          var path = value.path;\n          if (path && path !== that) throw new Error(value._class + ' ' + index + ' of ' + path + ' is not part of ' + that);\n          if (_default && value instanceof Curve) index++;\n        } else {\n          index = typeof value === 'number' ? value : _default;\n        }\n        return Math.min(index < 0 && closed ? index % length : index < 0 ? index + length : index, length - 1);\n      }\n      var loop = closed && opts.from === undefined && opts.to === undefined,\n        from = getIndex(opts.from, 0),\n        to = getIndex(opts.to, length - 1);\n      if (from > to) {\n        if (closed) {\n          from -= length;\n        } else {\n          var tmp = from;\n          from = to;\n          to = tmp;\n        }\n      }\n      if (/^(?:asymmetric|continuous)$/.test(type)) {\n        var asymmetric = type === 'asymmetric',\n          min = Math.min,\n          amount = to - from + 1,\n          n = amount - 1,\n          padding = loop ? min(amount, 4) : 1,\n          paddingLeft = padding,\n          paddingRight = padding,\n          knots = [];\n        if (!closed) {\n          paddingLeft = min(1, from);\n          paddingRight = min(1, length - to - 1);\n        }\n        n += paddingLeft + paddingRight;\n        if (n <= 1) return;\n        for (var i = 0, j = from - paddingLeft; i <= n; i++, j++) {\n          knots[i] = segments[(j < 0 ? j + length : j) % length]._point;\n        }\n        var x = knots[0]._x + 2 * knots[1]._x,\n          y = knots[0]._y + 2 * knots[1]._y,\n          f = 2,\n          n_1 = n - 1,\n          rx = [x],\n          ry = [y],\n          rf = [f],\n          px = [],\n          py = [];\n        for (var i = 1; i < n; i++) {\n          var internal = i < n_1,\n            a = internal ? 1 : asymmetric ? 1 : 2,\n            b = internal ? 4 : asymmetric ? 2 : 7,\n            u = internal ? 4 : asymmetric ? 3 : 8,\n            v = internal ? 2 : asymmetric ? 0 : 1,\n            m = a / f;\n          f = rf[i] = b - m;\n          x = rx[i] = u * knots[i]._x + v * knots[i + 1]._x - m * x;\n          y = ry[i] = u * knots[i]._y + v * knots[i + 1]._y - m * y;\n        }\n        px[n_1] = rx[n_1] / rf[n_1];\n        py[n_1] = ry[n_1] / rf[n_1];\n        for (var i = n - 2; i >= 0; i--) {\n          px[i] = (rx[i] - px[i + 1]) / rf[i];\n          py[i] = (ry[i] - py[i + 1]) / rf[i];\n        }\n        px[n] = (3 * knots[n]._x - px[n_1]) / 2;\n        py[n] = (3 * knots[n]._y - py[n_1]) / 2;\n        for (var i = paddingLeft, max = n - paddingRight, j = from; i <= max; i++, j++) {\n          var segment = segments[j < 0 ? j + length : j],\n            pt = segment._point,\n            hx = px[i] - pt._x,\n            hy = py[i] - pt._y;\n          if (loop || i < max) segment.setHandleOut(hx, hy);\n          if (loop || i > paddingLeft) segment.setHandleIn(-hx, -hy);\n        }\n      } else {\n        for (var i = from; i <= to; i++) {\n          segments[i < 0 ? i + length : i].smooth(opts, !loop && i === from, !loop && i === to);\n        }\n      }\n    },\n    toShape: function (insert) {\n      if (!this._closed) return null;\n      var segments = this._segments,\n        type,\n        size,\n        radius,\n        topCenter;\n      function isCollinear(i, j) {\n        var seg1 = segments[i],\n          seg2 = seg1.getNext(),\n          seg3 = segments[j],\n          seg4 = seg3.getNext();\n        return seg1._handleOut.isZero() && seg2._handleIn.isZero() && seg3._handleOut.isZero() && seg4._handleIn.isZero() && seg2._point.subtract(seg1._point).isCollinear(seg4._point.subtract(seg3._point));\n      }\n      function isOrthogonal(i) {\n        var seg2 = segments[i],\n          seg1 = seg2.getPrevious(),\n          seg3 = seg2.getNext();\n        return seg1._handleOut.isZero() && seg2._handleIn.isZero() && seg2._handleOut.isZero() && seg3._handleIn.isZero() && seg2._point.subtract(seg1._point).isOrthogonal(seg3._point.subtract(seg2._point));\n      }\n      function isArc(i) {\n        var seg1 = segments[i],\n          seg2 = seg1.getNext(),\n          handle1 = seg1._handleOut,\n          handle2 = seg2._handleIn,\n          kappa = 0.5522847498307936;\n        if (handle1.isOrthogonal(handle2)) {\n          var pt1 = seg1._point,\n            pt2 = seg2._point,\n            corner = new Line(pt1, handle1, true).intersect(new Line(pt2, handle2, true), true);\n          return corner && Numerical.isZero(handle1.getLength() / corner.subtract(pt1).getLength() - kappa) && Numerical.isZero(handle2.getLength() / corner.subtract(pt2).getLength() - kappa);\n        }\n        return false;\n      }\n      function getDistance(i, j) {\n        return segments[i]._point.getDistance(segments[j]._point);\n      }\n      if (!this.hasHandles() && segments.length === 4 && isCollinear(0, 2) && isCollinear(1, 3) && isOrthogonal(1)) {\n        type = Shape.Rectangle;\n        size = new Size(getDistance(0, 3), getDistance(0, 1));\n        topCenter = segments[1]._point.add(segments[2]._point).divide(2);\n      } else if (segments.length === 8 && isArc(0) && isArc(2) && isArc(4) && isArc(6) && isCollinear(1, 5) && isCollinear(3, 7)) {\n        type = Shape.Rectangle;\n        size = new Size(getDistance(1, 6), getDistance(0, 3));\n        radius = size.subtract(new Size(getDistance(0, 7), getDistance(1, 2))).divide(2);\n        topCenter = segments[3]._point.add(segments[4]._point).divide(2);\n      } else if (segments.length === 4 && isArc(0) && isArc(1) && isArc(2) && isArc(3)) {\n        if (Numerical.isZero(getDistance(0, 2) - getDistance(1, 3))) {\n          type = Shape.Circle;\n          radius = getDistance(0, 2) / 2;\n        } else {\n          type = Shape.Ellipse;\n          radius = new Size(getDistance(2, 0) / 2, getDistance(3, 1) / 2);\n        }\n        topCenter = segments[1]._point;\n      }\n      if (type) {\n        var center = this.getPosition(true),\n          shape = new type({\n            center: center,\n            size: size,\n            radius: radius,\n            insert: false\n          });\n        shape.copyAttributes(this, true);\n        shape._matrix.prepend(this._matrix);\n        shape.rotate(topCenter.subtract(center).getAngle() + 90);\n        if (insert === undefined || insert) shape.insertAbove(this);\n        return shape;\n      }\n      return null;\n    },\n    toPath: '#clone',\n    compare: function compare(path) {\n      if (!path || path instanceof CompoundPath) return compare.base.call(this, path);\n      var curves1 = this.getCurves(),\n        curves2 = path.getCurves(),\n        length1 = curves1.length,\n        length2 = curves2.length;\n      if (!length1 || !length2) {\n        return length1 == length2;\n      }\n      var v1 = curves1[0].getValues(),\n        values2 = [],\n        pos1 = 0,\n        pos2,\n        end1 = 0,\n        end2;\n      for (var i = 0; i < length2; i++) {\n        var v2 = curves2[i].getValues();\n        values2.push(v2);\n        var overlaps = Curve.getOverlaps(v1, v2);\n        if (overlaps) {\n          pos2 = !i && overlaps[0][0] > 0 ? length2 - 1 : i;\n          end2 = overlaps[0][1];\n          break;\n        }\n      }\n      var abs = Math.abs,\n        epsilon = 1e-8,\n        v2 = values2[pos2],\n        start2;\n      while (v1 && v2) {\n        var overlaps = Curve.getOverlaps(v1, v2);\n        if (overlaps) {\n          var t1 = overlaps[0][0];\n          if (abs(t1 - end1) < epsilon) {\n            end1 = overlaps[1][0];\n            if (end1 === 1) {\n              v1 = ++pos1 < length1 ? curves1[pos1].getValues() : null;\n              end1 = 0;\n            }\n            var t2 = overlaps[0][1];\n            if (abs(t2 - end2) < epsilon) {\n              if (!start2) start2 = [pos2, t2];\n              end2 = overlaps[1][1];\n              if (end2 === 1) {\n                if (++pos2 >= length2) pos2 = 0;\n                v2 = values2[pos2] || curves2[pos2].getValues();\n                end2 = 0;\n              }\n              if (!v1) {\n                return start2[0] === pos2 && start2[1] === end2;\n              }\n              continue;\n            }\n          }\n        }\n        break;\n      }\n      return false;\n    },\n    _hitTestSelf: function (point, options, viewMatrix, strokeMatrix) {\n      var that = this,\n        style = this.getStyle(),\n        segments = this._segments,\n        numSegments = segments.length,\n        closed = this._closed,\n        tolerancePadding = options._tolerancePadding,\n        strokePadding = tolerancePadding,\n        join,\n        cap,\n        miterLimit,\n        area,\n        loc,\n        res,\n        hitStroke = options.stroke && style.hasStroke(),\n        hitFill = options.fill && style.hasFill(),\n        hitCurves = options.curves,\n        strokeRadius = hitStroke ? style.getStrokeWidth() / 2 : hitFill && options.tolerance > 0 || hitCurves ? 0 : null;\n      if (strokeRadius !== null) {\n        if (strokeRadius > 0) {\n          join = style.getStrokeJoin();\n          cap = style.getStrokeCap();\n          miterLimit = style.getMiterLimit();\n          strokePadding = strokePadding.add(Path._getStrokePadding(strokeRadius, strokeMatrix));\n        } else {\n          join = cap = 'round';\n        }\n      }\n      function isCloseEnough(pt, padding) {\n        return point.subtract(pt).divide(padding).length <= 1;\n      }\n      function checkSegmentPoint(seg, pt, name) {\n        if (!options.selected || pt.isSelected()) {\n          var anchor = seg._point;\n          if (pt !== anchor) pt = pt.add(anchor);\n          if (isCloseEnough(pt, strokePadding)) {\n            return new HitResult(name, that, {\n              segment: seg,\n              point: pt\n            });\n          }\n        }\n      }\n      function checkSegmentPoints(seg, ends) {\n        return (ends || options.segments) && checkSegmentPoint(seg, seg._point, 'segment') || !ends && options.handles && (checkSegmentPoint(seg, seg._handleIn, 'handle-in') || checkSegmentPoint(seg, seg._handleOut, 'handle-out'));\n      }\n      function addToArea(point) {\n        area.add(point);\n      }\n      function checkSegmentStroke(segment) {\n        var isJoin = closed || segment._index > 0 && segment._index < numSegments - 1;\n        if ((isJoin ? join : cap) === 'round') {\n          return isCloseEnough(segment._point, strokePadding);\n        } else {\n          area = new Path({\n            internal: true,\n            closed: true\n          });\n          if (isJoin) {\n            if (!segment.isSmooth()) {\n              Path._addBevelJoin(segment, join, strokeRadius, miterLimit, null, strokeMatrix, addToArea, true);\n            }\n          } else if (cap === 'square') {\n            Path._addSquareCap(segment, cap, strokeRadius, null, strokeMatrix, addToArea, true);\n          }\n          if (!area.isEmpty()) {\n            var loc;\n            return area.contains(point) || (loc = area.getNearestLocation(point)) && isCloseEnough(loc.getPoint(), tolerancePadding);\n          }\n        }\n      }\n      if (options.ends && !options.segments && !closed) {\n        if (res = checkSegmentPoints(segments[0], true) || checkSegmentPoints(segments[numSegments - 1], true)) return res;\n      } else if (options.segments || options.handles) {\n        for (var i = 0; i < numSegments; i++) if (res = checkSegmentPoints(segments[i])) return res;\n      }\n      if (strokeRadius !== null) {\n        loc = this.getNearestLocation(point);\n        if (loc) {\n          var time = loc.getTime();\n          if (time === 0 || time === 1 && numSegments > 1) {\n            if (!checkSegmentStroke(loc.getSegment())) loc = null;\n          } else if (!isCloseEnough(loc.getPoint(), strokePadding)) {\n            loc = null;\n          }\n        }\n        if (!loc && join === 'miter' && numSegments > 1) {\n          for (var i = 0; i < numSegments; i++) {\n            var segment = segments[i];\n            if (point.getDistance(segment._point) <= miterLimit * strokeRadius && checkSegmentStroke(segment)) {\n              loc = segment.getLocation();\n              break;\n            }\n          }\n        }\n      }\n      return !loc && hitFill && this._contains(point) || loc && !hitStroke && !hitCurves ? new HitResult('fill', this) : loc ? new HitResult(hitStroke ? 'stroke' : 'curve', this, {\n        location: loc,\n        point: loc.getPoint()\n      }) : null;\n    }\n  }, Base.each(Curve._evaluateMethods, function (name) {\n    this[name + 'At'] = function (offset) {\n      var loc = this.getLocationAt(offset);\n      return loc && loc[name]();\n    };\n  }, {\n    beans: false,\n    getLocationOf: function () {\n      var point = Point.read(arguments),\n        curves = this.getCurves();\n      for (var i = 0, l = curves.length; i < l; i++) {\n        var loc = curves[i].getLocationOf(point);\n        if (loc) return loc;\n      }\n      return null;\n    },\n    getOffsetOf: function () {\n      var loc = this.getLocationOf.apply(this, arguments);\n      return loc ? loc.getOffset() : null;\n    },\n    getLocationAt: function (offset) {\n      if (typeof offset === 'number') {\n        var curves = this.getCurves(),\n          length = 0;\n        for (var i = 0, l = curves.length; i < l; i++) {\n          var start = length,\n            curve = curves[i];\n          length += curve.getLength();\n          if (length > offset) {\n            return curve.getLocationAt(offset - start);\n          }\n        }\n        if (curves.length > 0 && offset <= this.getLength()) {\n          return new CurveLocation(curves[curves.length - 1], 1);\n        }\n      } else if (offset && offset.getPath && offset.getPath() === this) {\n        return offset;\n      }\n      return null;\n    },\n    getOffsetsWithTangent: function () {\n      var tangent = Point.read(arguments);\n      if (tangent.isZero()) {\n        return [];\n      }\n      var offsets = [];\n      var curveStart = 0;\n      var curves = this.getCurves();\n      for (var i = 0, l = curves.length; i < l; i++) {\n        var curve = curves[i];\n        var curveTimes = curve.getTimesWithTangent(tangent);\n        for (var j = 0, m = curveTimes.length; j < m; j++) {\n          var offset = curveStart + curve.getOffsetAtTime(curveTimes[j]);\n          if (offsets.indexOf(offset) < 0) {\n            offsets.push(offset);\n          }\n        }\n        curveStart += curve.length;\n      }\n      return offsets;\n    }\n  }), new function () {\n    function drawHandles(ctx, segments, matrix, size) {\n      if (size <= 0) return;\n      var half = size / 2,\n        miniSize = size - 2,\n        miniHalf = half - 1,\n        coords = new Array(6),\n        pX,\n        pY;\n      function drawHandle(index) {\n        var hX = coords[index],\n          hY = coords[index + 1];\n        if (pX != hX || pY != hY) {\n          ctx.beginPath();\n          ctx.moveTo(pX, pY);\n          ctx.lineTo(hX, hY);\n          ctx.stroke();\n          ctx.beginPath();\n          ctx.arc(hX, hY, half, 0, Math.PI * 2, true);\n          ctx.fill();\n        }\n      }\n      for (var i = 0, l = segments.length; i < l; i++) {\n        var segment = segments[i],\n          selection = segment._selection;\n        segment._transformCoordinates(matrix, coords);\n        pX = coords[0];\n        pY = coords[1];\n        if (selection & 2) drawHandle(2);\n        if (selection & 4) drawHandle(4);\n        ctx.fillRect(pX - half, pY - half, size, size);\n        if (miniSize > 0 && !(selection & 1)) {\n          var fillStyle = ctx.fillStyle;\n          ctx.fillStyle = '#ffffff';\n          ctx.fillRect(pX - miniHalf, pY - miniHalf, miniSize, miniSize);\n          ctx.fillStyle = fillStyle;\n        }\n      }\n    }\n    function drawSegments(ctx, path, matrix) {\n      var segments = path._segments,\n        length = segments.length,\n        coords = new Array(6),\n        first = true,\n        curX,\n        curY,\n        prevX,\n        prevY,\n        inX,\n        inY,\n        outX,\n        outY;\n      function drawSegment(segment) {\n        if (matrix) {\n          segment._transformCoordinates(matrix, coords);\n          curX = coords[0];\n          curY = coords[1];\n        } else {\n          var point = segment._point;\n          curX = point._x;\n          curY = point._y;\n        }\n        if (first) {\n          ctx.moveTo(curX, curY);\n          first = false;\n        } else {\n          if (matrix) {\n            inX = coords[2];\n            inY = coords[3];\n          } else {\n            var handle = segment._handleIn;\n            inX = curX + handle._x;\n            inY = curY + handle._y;\n          }\n          if (inX === curX && inY === curY && outX === prevX && outY === prevY) {\n            ctx.lineTo(curX, curY);\n          } else {\n            ctx.bezierCurveTo(outX, outY, inX, inY, curX, curY);\n          }\n        }\n        prevX = curX;\n        prevY = curY;\n        if (matrix) {\n          outX = coords[4];\n          outY = coords[5];\n        } else {\n          var handle = segment._handleOut;\n          outX = prevX + handle._x;\n          outY = prevY + handle._y;\n        }\n      }\n      for (var i = 0; i < length; i++) drawSegment(segments[i]);\n      if (path._closed && length > 0) drawSegment(segments[0]);\n    }\n    return {\n      _draw: function (ctx, param, viewMatrix, strokeMatrix) {\n        var dontStart = param.dontStart,\n          dontPaint = param.dontFinish || param.clip,\n          style = this.getStyle(),\n          hasFill = style.hasFill(),\n          hasStroke = style.hasStroke(),\n          dashArray = style.getDashArray(),\n          dashLength = !paper.support.nativeDash && hasStroke && dashArray && dashArray.length;\n        if (!dontStart) ctx.beginPath();\n        if (hasFill || hasStroke && !dashLength || dontPaint) {\n          drawSegments(ctx, this, strokeMatrix);\n          if (this._closed) ctx.closePath();\n        }\n        function getOffset(i) {\n          return dashArray[(i % dashLength + dashLength) % dashLength];\n        }\n        if (!dontPaint && (hasFill || hasStroke)) {\n          this._setStyles(ctx, param, viewMatrix);\n          if (hasFill) {\n            ctx.fill(style.getFillRule());\n            ctx.shadowColor = 'rgba(0,0,0,0)';\n          }\n          if (hasStroke) {\n            if (dashLength) {\n              if (!dontStart) ctx.beginPath();\n              var flattener = new PathFlattener(this, 0.25, 32, false, strokeMatrix),\n                length = flattener.length,\n                from = -style.getDashOffset(),\n                to,\n                i = 0;\n              while (from > 0) {\n                from -= getOffset(i--) + getOffset(i--);\n              }\n              while (from < length) {\n                to = from + getOffset(i++);\n                if (from > 0 || to > 0) flattener.drawPart(ctx, Math.max(from, 0), Math.max(to, 0));\n                from = to + getOffset(i++);\n              }\n            }\n            ctx.stroke();\n          }\n        }\n      },\n      _drawSelected: function (ctx, matrix) {\n        ctx.beginPath();\n        drawSegments(ctx, this, matrix);\n        ctx.stroke();\n        drawHandles(ctx, this._segments, matrix, paper.settings.handleSize);\n      }\n    };\n  }(), new function () {\n    function getCurrentSegment(that) {\n      var segments = that._segments;\n      if (!segments.length) throw new Error('Use a moveTo() command first');\n      return segments[segments.length - 1];\n    }\n    return {\n      moveTo: function () {\n        var segments = this._segments;\n        if (segments.length === 1) this.removeSegment(0);\n        if (!segments.length) this._add([new Segment(Point.read(arguments))]);\n      },\n      moveBy: function () {\n        throw new Error('moveBy() is unsupported on Path items.');\n      },\n      lineTo: function () {\n        this._add([new Segment(Point.read(arguments))]);\n      },\n      cubicCurveTo: function () {\n        var args = arguments,\n          handle1 = Point.read(args),\n          handle2 = Point.read(args),\n          to = Point.read(args),\n          current = getCurrentSegment(this);\n        current.setHandleOut(handle1.subtract(current._point));\n        this._add([new Segment(to, handle2.subtract(to))]);\n      },\n      quadraticCurveTo: function () {\n        var args = arguments,\n          handle = Point.read(args),\n          to = Point.read(args),\n          current = getCurrentSegment(this)._point;\n        this.cubicCurveTo(handle.add(current.subtract(handle).multiply(1 / 3)), handle.add(to.subtract(handle).multiply(1 / 3)), to);\n      },\n      curveTo: function () {\n        var args = arguments,\n          through = Point.read(args),\n          to = Point.read(args),\n          t = Base.pick(Base.read(args), 0.5),\n          t1 = 1 - t,\n          current = getCurrentSegment(this)._point,\n          handle = through.subtract(current.multiply(t1 * t1)).subtract(to.multiply(t * t)).divide(2 * t * t1);\n        if (handle.isNaN()) throw new Error('Cannot put a curve through points with parameter = ' + t);\n        this.quadraticCurveTo(handle, to);\n      },\n      arcTo: function () {\n        var args = arguments,\n          abs = Math.abs,\n          sqrt = Math.sqrt,\n          current = getCurrentSegment(this),\n          from = current._point,\n          to = Point.read(args),\n          through,\n          peek = Base.peek(args),\n          clockwise = Base.pick(peek, true),\n          center,\n          extent,\n          vector,\n          matrix;\n        if (typeof clockwise === 'boolean') {\n          var middle = from.add(to).divide(2),\n            through = middle.add(middle.subtract(from).rotate(clockwise ? -90 : 90));\n        } else if (Base.remain(args) <= 2) {\n          through = to;\n          to = Point.read(args);\n        } else if (!from.equals(to)) {\n          var radius = Size.read(args),\n            isZero = Numerical.isZero;\n          if (isZero(radius.width) || isZero(radius.height)) return this.lineTo(to);\n          var rotation = Base.read(args),\n            clockwise = !!Base.read(args),\n            large = !!Base.read(args),\n            middle = from.add(to).divide(2),\n            pt = from.subtract(middle).rotate(-rotation),\n            x = pt.x,\n            y = pt.y,\n            rx = abs(radius.width),\n            ry = abs(radius.height),\n            rxSq = rx * rx,\n            rySq = ry * ry,\n            xSq = x * x,\n            ySq = y * y;\n          var factor = sqrt(xSq / rxSq + ySq / rySq);\n          if (factor > 1) {\n            rx *= factor;\n            ry *= factor;\n            rxSq = rx * rx;\n            rySq = ry * ry;\n          }\n          factor = (rxSq * rySq - rxSq * ySq - rySq * xSq) / (rxSq * ySq + rySq * xSq);\n          if (abs(factor) < 1e-12) factor = 0;\n          if (factor < 0) throw new Error('Cannot create an arc with the given arguments');\n          center = new Point(rx * y / ry, -ry * x / rx).multiply((large === clockwise ? -1 : 1) * sqrt(factor)).rotate(rotation).add(middle);\n          matrix = new Matrix().translate(center).rotate(rotation).scale(rx, ry);\n          vector = matrix._inverseTransform(from);\n          extent = vector.getDirectedAngle(matrix._inverseTransform(to));\n          if (!clockwise && extent > 0) extent -= 360;else if (clockwise && extent < 0) extent += 360;\n        }\n        if (through) {\n          var l1 = new Line(from.add(through).divide(2), through.subtract(from).rotate(90), true),\n            l2 = new Line(through.add(to).divide(2), to.subtract(through).rotate(90), true),\n            line = new Line(from, to),\n            throughSide = line.getSide(through);\n          center = l1.intersect(l2, true);\n          if (!center) {\n            if (!throughSide) return this.lineTo(to);\n            throw new Error('Cannot create an arc with the given arguments');\n          }\n          vector = from.subtract(center);\n          extent = vector.getDirectedAngle(to.subtract(center));\n          var centerSide = line.getSide(center, true);\n          if (centerSide === 0) {\n            extent = throughSide * abs(extent);\n          } else if (throughSide === centerSide) {\n            extent += extent < 0 ? 360 : -360;\n          }\n        }\n        if (extent) {\n          var epsilon = 1e-7,\n            ext = abs(extent),\n            count = ext >= 360 ? 4 : Math.ceil((ext - epsilon) / 90),\n            inc = extent / count,\n            half = inc * Math.PI / 360,\n            z = 4 / 3 * Math.sin(half) / (1 + Math.cos(half)),\n            segments = [];\n          for (var i = 0; i <= count; i++) {\n            var pt = to,\n              out = null;\n            if (i < count) {\n              out = vector.rotate(90).multiply(z);\n              if (matrix) {\n                pt = matrix._transformPoint(vector);\n                out = matrix._transformPoint(vector.add(out)).subtract(pt);\n              } else {\n                pt = center.add(vector);\n              }\n            }\n            if (!i) {\n              current.setHandleOut(out);\n            } else {\n              var _in = vector.rotate(-90).multiply(z);\n              if (matrix) {\n                _in = matrix._transformPoint(vector.add(_in)).subtract(pt);\n              }\n              segments.push(new Segment(pt, _in, out));\n            }\n            vector = vector.rotate(inc);\n          }\n          this._add(segments);\n        }\n      },\n      lineBy: function () {\n        var to = Point.read(arguments),\n          current = getCurrentSegment(this)._point;\n        this.lineTo(current.add(to));\n      },\n      curveBy: function () {\n        var args = arguments,\n          through = Point.read(args),\n          to = Point.read(args),\n          parameter = Base.read(args),\n          current = getCurrentSegment(this)._point;\n        this.curveTo(current.add(through), current.add(to), parameter);\n      },\n      cubicCurveBy: function () {\n        var args = arguments,\n          handle1 = Point.read(args),\n          handle2 = Point.read(args),\n          to = Point.read(args),\n          current = getCurrentSegment(this)._point;\n        this.cubicCurveTo(current.add(handle1), current.add(handle2), current.add(to));\n      },\n      quadraticCurveBy: function () {\n        var args = arguments,\n          handle = Point.read(args),\n          to = Point.read(args),\n          current = getCurrentSegment(this)._point;\n        this.quadraticCurveTo(current.add(handle), current.add(to));\n      },\n      arcBy: function () {\n        var args = arguments,\n          current = getCurrentSegment(this)._point,\n          point = current.add(Point.read(args)),\n          clockwise = Base.pick(Base.peek(args), true);\n        if (typeof clockwise === 'boolean') {\n          this.arcTo(point, clockwise);\n        } else {\n          this.arcTo(point, current.add(Point.read(args)));\n        }\n      },\n      closePath: function (tolerance) {\n        this.setClosed(true);\n        this.join(this, tolerance);\n      }\n    };\n  }(), {\n    _getBounds: function (matrix, options) {\n      var method = options.handle ? 'getHandleBounds' : options.stroke ? 'getStrokeBounds' : 'getBounds';\n      return Path[method](this._segments, this._closed, this, matrix, options);\n    },\n    statics: {\n      getBounds: function (segments, closed, path, matrix, options, strokePadding) {\n        var first = segments[0];\n        if (!first) return new Rectangle();\n        var coords = new Array(6),\n          prevCoords = first._transformCoordinates(matrix, new Array(6)),\n          min = prevCoords.slice(0, 2),\n          max = min.slice(),\n          roots = new Array(2);\n        function processSegment(segment) {\n          segment._transformCoordinates(matrix, coords);\n          for (var i = 0; i < 2; i++) {\n            Curve._addBounds(prevCoords[i], prevCoords[i + 4], coords[i + 2], coords[i], i, strokePadding ? strokePadding[i] : 0, min, max, roots);\n          }\n          var tmp = prevCoords;\n          prevCoords = coords;\n          coords = tmp;\n        }\n        for (var i = 1, l = segments.length; i < l; i++) processSegment(segments[i]);\n        if (closed) processSegment(first);\n        return new Rectangle(min[0], min[1], max[0] - min[0], max[1] - min[1]);\n      },\n      getStrokeBounds: function (segments, closed, path, matrix, options) {\n        var style = path.getStyle(),\n          stroke = style.hasStroke(),\n          strokeWidth = style.getStrokeWidth(),\n          strokeMatrix = stroke && path._getStrokeMatrix(matrix, options),\n          strokePadding = stroke && Path._getStrokePadding(strokeWidth, strokeMatrix),\n          bounds = Path.getBounds(segments, closed, path, matrix, options, strokePadding);\n        if (!stroke) return bounds;\n        var strokeRadius = strokeWidth / 2,\n          join = style.getStrokeJoin(),\n          cap = style.getStrokeCap(),\n          miterLimit = style.getMiterLimit(),\n          joinBounds = new Rectangle(new Size(strokePadding));\n        function addPoint(point) {\n          bounds = bounds.include(point);\n        }\n        function addRound(segment) {\n          bounds = bounds.unite(joinBounds.setCenter(segment._point.transform(matrix)));\n        }\n        function addJoin(segment, join) {\n          if (join === 'round' || segment.isSmooth()) {\n            addRound(segment);\n          } else {\n            Path._addBevelJoin(segment, join, strokeRadius, miterLimit, matrix, strokeMatrix, addPoint);\n          }\n        }\n        function addCap(segment, cap) {\n          if (cap === 'round') {\n            addRound(segment);\n          } else {\n            Path._addSquareCap(segment, cap, strokeRadius, matrix, strokeMatrix, addPoint);\n          }\n        }\n        var length = segments.length - (closed ? 0 : 1);\n        if (length > 0) {\n          for (var i = 1; i < length; i++) {\n            addJoin(segments[i], join);\n          }\n          if (closed) {\n            addJoin(segments[0], join);\n          } else {\n            addCap(segments[0], cap);\n            addCap(segments[segments.length - 1], cap);\n          }\n        }\n        return bounds;\n      },\n      _getStrokePadding: function (radius, matrix) {\n        if (!matrix) return [radius, radius];\n        var hor = new Point(radius, 0).transform(matrix),\n          ver = new Point(0, radius).transform(matrix),\n          phi = hor.getAngleInRadians(),\n          a = hor.getLength(),\n          b = ver.getLength();\n        var sin = Math.sin(phi),\n          cos = Math.cos(phi),\n          tan = Math.tan(phi),\n          tx = Math.atan2(b * tan, a),\n          ty = Math.atan2(b, tan * a);\n        return [Math.abs(a * Math.cos(tx) * cos + b * Math.sin(tx) * sin), Math.abs(b * Math.sin(ty) * cos + a * Math.cos(ty) * sin)];\n      },\n      _addBevelJoin: function (segment, join, radius, miterLimit, matrix, strokeMatrix, addPoint, isArea) {\n        var curve2 = segment.getCurve(),\n          curve1 = curve2.getPrevious(),\n          point = curve2.getPoint1().transform(matrix),\n          normal1 = curve1.getNormalAtTime(1).multiply(radius).transform(strokeMatrix),\n          normal2 = curve2.getNormalAtTime(0).multiply(radius).transform(strokeMatrix),\n          angle = normal1.getDirectedAngle(normal2);\n        if (angle < 0 || angle >= 180) {\n          normal1 = normal1.negate();\n          normal2 = normal2.negate();\n        }\n        if (isArea) addPoint(point);\n        addPoint(point.add(normal1));\n        if (join === 'miter') {\n          var corner = new Line(point.add(normal1), new Point(-normal1.y, normal1.x), true).intersect(new Line(point.add(normal2), new Point(-normal2.y, normal2.x), true), true);\n          if (corner && point.getDistance(corner) <= miterLimit * radius) {\n            addPoint(corner);\n          }\n        }\n        addPoint(point.add(normal2));\n      },\n      _addSquareCap: function (segment, cap, radius, matrix, strokeMatrix, addPoint, isArea) {\n        var point = segment._point.transform(matrix),\n          loc = segment.getLocation(),\n          normal = loc.getNormal().multiply(loc.getTime() === 0 ? radius : -radius).transform(strokeMatrix);\n        if (cap === 'square') {\n          if (isArea) {\n            addPoint(point.subtract(normal));\n            addPoint(point.add(normal));\n          }\n          point = point.add(normal.rotate(-90));\n        }\n        addPoint(point.add(normal));\n        addPoint(point.subtract(normal));\n      },\n      getHandleBounds: function (segments, closed, path, matrix, options) {\n        var style = path.getStyle(),\n          stroke = options.stroke && style.hasStroke(),\n          strokePadding,\n          joinPadding;\n        if (stroke) {\n          var strokeMatrix = path._getStrokeMatrix(matrix, options),\n            strokeRadius = style.getStrokeWidth() / 2,\n            joinRadius = strokeRadius;\n          if (style.getStrokeJoin() === 'miter') joinRadius = strokeRadius * style.getMiterLimit();\n          if (style.getStrokeCap() === 'square') joinRadius = Math.max(joinRadius, strokeRadius * Math.SQRT2);\n          strokePadding = Path._getStrokePadding(strokeRadius, strokeMatrix);\n          joinPadding = Path._getStrokePadding(joinRadius, strokeMatrix);\n        }\n        var coords = new Array(6),\n          x1 = Infinity,\n          x2 = -x1,\n          y1 = x1,\n          y2 = x2;\n        for (var i = 0, l = segments.length; i < l; i++) {\n          var segment = segments[i];\n          segment._transformCoordinates(matrix, coords);\n          for (var j = 0; j < 6; j += 2) {\n            var padding = !j ? joinPadding : strokePadding,\n              paddingX = padding ? padding[0] : 0,\n              paddingY = padding ? padding[1] : 0,\n              x = coords[j],\n              y = coords[j + 1],\n              xn = x - paddingX,\n              xx = x + paddingX,\n              yn = y - paddingY,\n              yx = y + paddingY;\n            if (xn < x1) x1 = xn;\n            if (xx > x2) x2 = xx;\n            if (yn < y1) y1 = yn;\n            if (yx > y2) y2 = yx;\n          }\n        }\n        return new Rectangle(x1, y1, x2 - x1, y2 - y1);\n      }\n    }\n  });\n  Path.inject({\n    statics: new function () {\n      var kappa = 0.5522847498307936,\n        ellipseSegments = [new Segment([-1, 0], [0, kappa], [0, -kappa]), new Segment([0, -1], [-kappa, 0], [kappa, 0]), new Segment([1, 0], [0, -kappa], [0, kappa]), new Segment([0, 1], [kappa, 0], [-kappa, 0])];\n      function createPath(segments, closed, args) {\n        var props = Base.getNamed(args),\n          path = new Path(props && props.insert == false && Item.NO_INSERT);\n        path._add(segments);\n        path._closed = closed;\n        return path.set(props, {\n          insert: true\n        });\n      }\n      function createEllipse(center, radius, args) {\n        var segments = new Array(4);\n        for (var i = 0; i < 4; i++) {\n          var segment = ellipseSegments[i];\n          segments[i] = new Segment(segment._point.multiply(radius).add(center), segment._handleIn.multiply(radius), segment._handleOut.multiply(radius));\n        }\n        return createPath(segments, true, args);\n      }\n      return {\n        Line: function () {\n          var args = arguments;\n          return createPath([new Segment(Point.readNamed(args, 'from')), new Segment(Point.readNamed(args, 'to'))], false, args);\n        },\n        Circle: function () {\n          var args = arguments,\n            center = Point.readNamed(args, 'center'),\n            radius = Base.readNamed(args, 'radius');\n          return createEllipse(center, new Size(radius), args);\n        },\n        Rectangle: function () {\n          var args = arguments,\n            rect = Rectangle.readNamed(args, 'rectangle'),\n            radius = Size.readNamed(args, 'radius', 0, {\n              readNull: true\n            }),\n            bl = rect.getBottomLeft(true),\n            tl = rect.getTopLeft(true),\n            tr = rect.getTopRight(true),\n            br = rect.getBottomRight(true),\n            segments;\n          if (!radius || radius.isZero()) {\n            segments = [new Segment(bl), new Segment(tl), new Segment(tr), new Segment(br)];\n          } else {\n            radius = Size.min(radius, rect.getSize(true).divide(2));\n            var rx = radius.width,\n              ry = radius.height,\n              hx = rx * kappa,\n              hy = ry * kappa;\n            segments = [new Segment(bl.add(rx, 0), null, [-hx, 0]), new Segment(bl.subtract(0, ry), [0, hy]), new Segment(tl.add(0, ry), null, [0, -hy]), new Segment(tl.add(rx, 0), [-hx, 0], null), new Segment(tr.subtract(rx, 0), null, [hx, 0]), new Segment(tr.add(0, ry), [0, -hy], null), new Segment(br.subtract(0, ry), null, [0, hy]), new Segment(br.subtract(rx, 0), [hx, 0])];\n          }\n          return createPath(segments, true, args);\n        },\n        RoundRectangle: '#Rectangle',\n        Ellipse: function () {\n          var args = arguments,\n            ellipse = Shape._readEllipse(args);\n          return createEllipse(ellipse.center, ellipse.radius, args);\n        },\n        Oval: '#Ellipse',\n        Arc: function () {\n          var args = arguments,\n            from = Point.readNamed(args, 'from'),\n            through = Point.readNamed(args, 'through'),\n            to = Point.readNamed(args, 'to'),\n            props = Base.getNamed(args),\n            path = new Path(props && props.insert == false && Item.NO_INSERT);\n          path.moveTo(from);\n          path.arcTo(through, to);\n          return path.set(props);\n        },\n        RegularPolygon: function () {\n          var args = arguments,\n            center = Point.readNamed(args, 'center'),\n            sides = Base.readNamed(args, 'sides'),\n            radius = Base.readNamed(args, 'radius'),\n            step = 360 / sides,\n            three = sides % 3 === 0,\n            vector = new Point(0, three ? -radius : radius),\n            offset = three ? -1 : 0.5,\n            segments = new Array(sides);\n          for (var i = 0; i < sides; i++) segments[i] = new Segment(center.add(vector.rotate((i + offset) * step)));\n          return createPath(segments, true, args);\n        },\n        Star: function () {\n          var args = arguments,\n            center = Point.readNamed(args, 'center'),\n            points = Base.readNamed(args, 'points') * 2,\n            radius1 = Base.readNamed(args, 'radius1'),\n            radius2 = Base.readNamed(args, 'radius2'),\n            step = 360 / points,\n            vector = new Point(0, -1),\n            segments = new Array(points);\n          for (var i = 0; i < points; i++) segments[i] = new Segment(center.add(vector.rotate(step * i).multiply(i % 2 ? radius2 : radius1)));\n          return createPath(segments, true, args);\n        }\n      };\n    }()\n  });\n  var CompoundPath = PathItem.extend({\n    _class: 'CompoundPath',\n    _serializeFields: {\n      children: []\n    },\n    beans: true,\n    initialize: function CompoundPath(arg) {\n      this._children = [];\n      this._namedChildren = {};\n      if (!this._initialize(arg)) {\n        if (typeof arg === 'string') {\n          this.setPathData(arg);\n        } else {\n          this.addChildren(Array.isArray(arg) ? arg : arguments);\n        }\n      }\n    },\n    insertChildren: function insertChildren(index, items) {\n      var list = items,\n        first = list[0];\n      if (first && typeof first[0] === 'number') list = [list];\n      for (var i = items.length - 1; i >= 0; i--) {\n        var item = list[i];\n        if (list === items && !(item instanceof Path)) list = Base.slice(list);\n        if (Array.isArray(item)) {\n          list[i] = new Path({\n            segments: item,\n            insert: false\n          });\n        } else if (item instanceof CompoundPath) {\n          list.splice.apply(list, [i, 1].concat(item.removeChildren()));\n          item.remove();\n        }\n      }\n      return insertChildren.base.call(this, index, list);\n    },\n    reduce: function reduce(options) {\n      var children = this._children;\n      for (var i = children.length - 1; i >= 0; i--) {\n        var path = children[i].reduce(options);\n        if (path.isEmpty()) path.remove();\n      }\n      if (!children.length) {\n        var path = new Path(Item.NO_INSERT);\n        path.copyAttributes(this);\n        path.insertAbove(this);\n        this.remove();\n        return path;\n      }\n      return reduce.base.call(this);\n    },\n    isClosed: function () {\n      var children = this._children;\n      for (var i = 0, l = children.length; i < l; i++) {\n        if (!children[i]._closed) return false;\n      }\n      return true;\n    },\n    setClosed: function (closed) {\n      var children = this._children;\n      for (var i = 0, l = children.length; i < l; i++) {\n        children[i].setClosed(closed);\n      }\n    },\n    getFirstSegment: function () {\n      var first = this.getFirstChild();\n      return first && first.getFirstSegment();\n    },\n    getLastSegment: function () {\n      var last = this.getLastChild();\n      return last && last.getLastSegment();\n    },\n    getCurves: function () {\n      var children = this._children,\n        curves = [];\n      for (var i = 0, l = children.length; i < l; i++) {\n        Base.push(curves, children[i].getCurves());\n      }\n      return curves;\n    },\n    getFirstCurve: function () {\n      var first = this.getFirstChild();\n      return first && first.getFirstCurve();\n    },\n    getLastCurve: function () {\n      var last = this.getLastChild();\n      return last && last.getLastCurve();\n    },\n    getArea: function () {\n      var children = this._children,\n        area = 0;\n      for (var i = 0, l = children.length; i < l; i++) area += children[i].getArea();\n      return area;\n    },\n    getLength: function () {\n      var children = this._children,\n        length = 0;\n      for (var i = 0, l = children.length; i < l; i++) length += children[i].getLength();\n      return length;\n    },\n    getPathData: function (_matrix, _precision) {\n      var children = this._children,\n        paths = [];\n      for (var i = 0, l = children.length; i < l; i++) {\n        var child = children[i],\n          mx = child._matrix;\n        paths.push(child.getPathData(_matrix && !mx.isIdentity() ? _matrix.appended(mx) : _matrix, _precision));\n      }\n      return paths.join('');\n    },\n    _hitTestChildren: function _hitTestChildren(point, options, viewMatrix) {\n      return _hitTestChildren.base.call(this, point, options.class === Path || options.type === 'path' ? options : Base.set({}, options, {\n        fill: false\n      }), viewMatrix);\n    },\n    _draw: function (ctx, param, viewMatrix, strokeMatrix) {\n      var children = this._children;\n      if (!children.length) return;\n      param = param.extend({\n        dontStart: true,\n        dontFinish: true\n      });\n      ctx.beginPath();\n      for (var i = 0, l = children.length; i < l; i++) children[i].draw(ctx, param, strokeMatrix);\n      if (!param.clip) {\n        this._setStyles(ctx, param, viewMatrix);\n        var style = this._style;\n        if (style.hasFill()) {\n          ctx.fill(style.getFillRule());\n          ctx.shadowColor = 'rgba(0,0,0,0)';\n        }\n        if (style.hasStroke()) ctx.stroke();\n      }\n    },\n    _drawSelected: function (ctx, matrix, selectionItems) {\n      var children = this._children;\n      for (var i = 0, l = children.length; i < l; i++) {\n        var child = children[i],\n          mx = child._matrix;\n        if (!selectionItems[child._id]) {\n          child._drawSelected(ctx, mx.isIdentity() ? matrix : matrix.appended(mx));\n        }\n      }\n    }\n  }, new function () {\n    function getCurrentPath(that, check) {\n      var children = that._children;\n      if (check && !children.length) throw new Error('Use a moveTo() command first');\n      return children[children.length - 1];\n    }\n    return Base.each(['lineTo', 'cubicCurveTo', 'quadraticCurveTo', 'curveTo', 'arcTo', 'lineBy', 'cubicCurveBy', 'quadraticCurveBy', 'curveBy', 'arcBy'], function (key) {\n      this[key] = function () {\n        var path = getCurrentPath(this, true);\n        path[key].apply(path, arguments);\n      };\n    }, {\n      moveTo: function () {\n        var current = getCurrentPath(this),\n          path = current && current.isEmpty() ? current : new Path(Item.NO_INSERT);\n        if (path !== current) this.addChild(path);\n        path.moveTo.apply(path, arguments);\n      },\n      moveBy: function () {\n        var current = getCurrentPath(this, true),\n          last = current && current.getLastSegment(),\n          point = Point.read(arguments);\n        this.moveTo(last ? point.add(last._point) : point);\n      },\n      closePath: function (tolerance) {\n        getCurrentPath(this, true).closePath(tolerance);\n      }\n    });\n  }(), Base.each(['reverse', 'flatten', 'simplify', 'smooth'], function (key) {\n    this[key] = function (param) {\n      var children = this._children,\n        res;\n      for (var i = 0, l = children.length; i < l; i++) {\n        res = children[i][key](param) || res;\n      }\n      return res;\n    };\n  }, {}));\n  PathItem.inject(new function () {\n    var min = Math.min,\n      max = Math.max,\n      abs = Math.abs,\n      operators = {\n        unite: {\n          '1': true,\n          '2': true\n        },\n        intersect: {\n          '2': true\n        },\n        subtract: {\n          '1': true\n        },\n        exclude: {\n          '1': true,\n          '-1': true\n        }\n      };\n    function getPaths(path) {\n      return path._children || [path];\n    }\n    function preparePath(path, resolve) {\n      var res = path.clone(false).reduce({\n        simplify: true\n      }).transform(null, true, true);\n      if (resolve) {\n        var paths = getPaths(res);\n        for (var i = 0, l = paths.length; i < l; i++) {\n          var path = paths[i];\n          if (!path._closed && !path.isEmpty()) {\n            path.closePath(1e-12);\n            path.getFirstSegment().setHandleIn(0, 0);\n            path.getLastSegment().setHandleOut(0, 0);\n          }\n        }\n        res = res.resolveCrossings().reorient(res.getFillRule() === 'nonzero', true);\n      }\n      return res;\n    }\n    function createResult(paths, simplify, path1, path2, options) {\n      var result = new CompoundPath(Item.NO_INSERT);\n      result.addChildren(paths, true);\n      result = result.reduce({\n        simplify: simplify\n      });\n      if (!(options && options.insert == false)) {\n        result.insertAbove(path2 && path1.isSibling(path2) && path1.getIndex() < path2.getIndex() ? path2 : path1);\n      }\n      result.copyAttributes(path1, true);\n      return result;\n    }\n    function filterIntersection(inter) {\n      return inter.hasOverlap() || inter.isCrossing();\n    }\n    function traceBoolean(path1, path2, operation, options) {\n      if (options && (options.trace == false || options.stroke) && /^(subtract|intersect)$/.test(operation)) return splitBoolean(path1, path2, operation);\n      var _path1 = preparePath(path1, true),\n        _path2 = path2 && path1 !== path2 && preparePath(path2, true),\n        operator = operators[operation];\n      operator[operation] = true;\n      if (_path2 && (operator.subtract || operator.exclude) ^ (_path2.isClockwise() ^ _path1.isClockwise())) _path2.reverse();\n      var crossings = divideLocations(CurveLocation.expand(_path1.getIntersections(_path2, filterIntersection))),\n        paths1 = getPaths(_path1),\n        paths2 = _path2 && getPaths(_path2),\n        segments = [],\n        curves = [],\n        paths;\n      function collectPaths(paths) {\n        for (var i = 0, l = paths.length; i < l; i++) {\n          var path = paths[i];\n          Base.push(segments, path._segments);\n          Base.push(curves, path.getCurves());\n          path._overlapsOnly = true;\n        }\n      }\n      function getCurves(indices) {\n        var list = [];\n        for (var i = 0, l = indices && indices.length; i < l; i++) {\n          list.push(curves[indices[i]]);\n        }\n        return list;\n      }\n      if (crossings.length) {\n        collectPaths(paths1);\n        if (paths2) collectPaths(paths2);\n        var curvesValues = new Array(curves.length);\n        for (var i = 0, l = curves.length; i < l; i++) {\n          curvesValues[i] = curves[i].getValues();\n        }\n        var curveCollisions = CollisionDetection.findCurveBoundsCollisions(curvesValues, curvesValues, 0, true);\n        var curveCollisionsMap = {};\n        for (var i = 0; i < curves.length; i++) {\n          var curve = curves[i],\n            id = curve._path._id,\n            map = curveCollisionsMap[id] = curveCollisionsMap[id] || {};\n          map[curve.getIndex()] = {\n            hor: getCurves(curveCollisions[i].hor),\n            ver: getCurves(curveCollisions[i].ver)\n          };\n        }\n        for (var i = 0, l = crossings.length; i < l; i++) {\n          propagateWinding(crossings[i]._segment, _path1, _path2, curveCollisionsMap, operator);\n        }\n        for (var i = 0, l = segments.length; i < l; i++) {\n          var segment = segments[i],\n            inter = segment._intersection;\n          if (!segment._winding) {\n            propagateWinding(segment, _path1, _path2, curveCollisionsMap, operator);\n          }\n          if (!(inter && inter._overlap)) segment._path._overlapsOnly = false;\n        }\n        paths = tracePaths(segments, operator);\n      } else {\n        paths = reorientPaths(paths2 ? paths1.concat(paths2) : paths1.slice(), function (w) {\n          return !!operator[w];\n        });\n      }\n      return createResult(paths, true, path1, path2, options);\n    }\n    function splitBoolean(path1, path2, operation) {\n      var _path1 = preparePath(path1),\n        _path2 = preparePath(path2),\n        crossings = _path1.getIntersections(_path2, filterIntersection),\n        subtract = operation === 'subtract',\n        divide = operation === 'divide',\n        added = {},\n        paths = [];\n      function addPath(path) {\n        if (!added[path._id] && (divide || _path2.contains(path.getPointAt(path.getLength() / 2)) ^ subtract)) {\n          paths.unshift(path);\n          return added[path._id] = true;\n        }\n      }\n      for (var i = crossings.length - 1; i >= 0; i--) {\n        var path = crossings[i].split();\n        if (path) {\n          if (addPath(path)) path.getFirstSegment().setHandleIn(0, 0);\n          _path1.getLastSegment().setHandleOut(0, 0);\n        }\n      }\n      addPath(_path1);\n      return createResult(paths, false, path1, path2);\n    }\n    function linkIntersections(from, to) {\n      var prev = from;\n      while (prev) {\n        if (prev === to) return;\n        prev = prev._previous;\n      }\n      while (from._next && from._next !== to) from = from._next;\n      if (!from._next) {\n        while (to._previous) to = to._previous;\n        from._next = to;\n        to._previous = from;\n      }\n    }\n    function clearCurveHandles(curves) {\n      for (var i = curves.length - 1; i >= 0; i--) curves[i].clearHandles();\n    }\n    function reorientPaths(paths, isInside, clockwise) {\n      var length = paths && paths.length;\n      if (length) {\n        var lookup = Base.each(paths, function (path, i) {\n            this[path._id] = {\n              container: null,\n              winding: path.isClockwise() ? 1 : -1,\n              index: i\n            };\n          }, {}),\n          sorted = paths.slice().sort(function (a, b) {\n            return abs(b.getArea()) - abs(a.getArea());\n          }),\n          first = sorted[0];\n        var collisions = CollisionDetection.findItemBoundsCollisions(sorted, null, Numerical.GEOMETRIC_EPSILON);\n        if (clockwise == null) clockwise = first.isClockwise();\n        for (var i = 0; i < length; i++) {\n          var path1 = sorted[i],\n            entry1 = lookup[path1._id],\n            containerWinding = 0,\n            indices = collisions[i];\n          if (indices) {\n            var point = null;\n            for (var j = indices.length - 1; j >= 0; j--) {\n              if (indices[j] < i) {\n                point = point || path1.getInteriorPoint();\n                var path2 = sorted[indices[j]];\n                if (path2.contains(point)) {\n                  var entry2 = lookup[path2._id];\n                  containerWinding = entry2.winding;\n                  entry1.winding += containerWinding;\n                  entry1.container = entry2.exclude ? entry2.container : path2;\n                  break;\n                }\n              }\n            }\n          }\n          if (isInside(entry1.winding) === isInside(containerWinding)) {\n            entry1.exclude = true;\n            paths[entry1.index] = null;\n          } else {\n            var container = entry1.container;\n            path1.setClockwise(container ? !container.isClockwise() : clockwise);\n          }\n        }\n      }\n      return paths;\n    }\n    function divideLocations(locations, include, clearLater) {\n      var results = include && [],\n        tMin = 1e-8,\n        tMax = 1 - tMin,\n        clearHandles = false,\n        clearCurves = clearLater || [],\n        clearLookup = clearLater && {},\n        renormalizeLocs,\n        prevCurve,\n        prevTime;\n      function getId(curve) {\n        return curve._path._id + '.' + curve._segment1._index;\n      }\n      for (var i = (clearLater && clearLater.length) - 1; i >= 0; i--) {\n        var curve = clearLater[i];\n        if (curve._path) clearLookup[getId(curve)] = true;\n      }\n      for (var i = locations.length - 1; i >= 0; i--) {\n        var loc = locations[i],\n          time = loc._time,\n          origTime = time,\n          exclude = include && !include(loc),\n          curve = loc._curve,\n          segment;\n        if (curve) {\n          if (curve !== prevCurve) {\n            clearHandles = !curve.hasHandles() || clearLookup && clearLookup[getId(curve)];\n            renormalizeLocs = [];\n            prevTime = null;\n            prevCurve = curve;\n          } else if (prevTime >= tMin) {\n            time /= prevTime;\n          }\n        }\n        if (exclude) {\n          if (renormalizeLocs) renormalizeLocs.push(loc);\n          continue;\n        } else if (include) {\n          results.unshift(loc);\n        }\n        prevTime = origTime;\n        if (time < tMin) {\n          segment = curve._segment1;\n        } else if (time > tMax) {\n          segment = curve._segment2;\n        } else {\n          var newCurve = curve.divideAtTime(time, true);\n          if (clearHandles) clearCurves.push(curve, newCurve);\n          segment = newCurve._segment1;\n          for (var j = renormalizeLocs.length - 1; j >= 0; j--) {\n            var l = renormalizeLocs[j];\n            l._time = (l._time - time) / (1 - time);\n          }\n        }\n        loc._setSegment(segment);\n        var inter = segment._intersection,\n          dest = loc._intersection;\n        if (inter) {\n          linkIntersections(inter, dest);\n          var other = inter;\n          while (other) {\n            linkIntersections(other._intersection, inter);\n            other = other._next;\n          }\n        } else {\n          segment._intersection = dest;\n        }\n      }\n      if (!clearLater) clearCurveHandles(clearCurves);\n      return results || locations;\n    }\n    function getWinding(point, curves, dir, closed, dontFlip) {\n      var curvesList = Array.isArray(curves) ? curves : curves[dir ? 'hor' : 'ver'];\n      var ia = dir ? 1 : 0,\n        io = ia ^ 1,\n        pv = [point.x, point.y],\n        pa = pv[ia],\n        po = pv[io],\n        windingEpsilon = 1e-9,\n        qualityEpsilon = 1e-6,\n        paL = pa - windingEpsilon,\n        paR = pa + windingEpsilon,\n        windingL = 0,\n        windingR = 0,\n        pathWindingL = 0,\n        pathWindingR = 0,\n        onPath = false,\n        onAnyPath = false,\n        quality = 1,\n        roots = [],\n        vPrev,\n        vClose;\n      function addWinding(v) {\n        var o0 = v[io + 0],\n          o3 = v[io + 6];\n        if (po < min(o0, o3) || po > max(o0, o3)) {\n          return;\n        }\n        var a0 = v[ia + 0],\n          a1 = v[ia + 2],\n          a2 = v[ia + 4],\n          a3 = v[ia + 6];\n        if (o0 === o3) {\n          if (a0 < paR && a3 > paL || a3 < paR && a0 > paL) {\n            onPath = true;\n          }\n          return;\n        }\n        var t = po === o0 ? 0 : po === o3 ? 1 : paL > max(a0, a1, a2, a3) || paR < min(a0, a1, a2, a3) ? 1 : Curve.solveCubic(v, io, po, roots, 0, 1) > 0 ? roots[0] : 1,\n          a = t === 0 ? a0 : t === 1 ? a3 : Curve.getPoint(v, t)[dir ? 'y' : 'x'],\n          winding = o0 > o3 ? 1 : -1,\n          windingPrev = vPrev[io] > vPrev[io + 6] ? 1 : -1,\n          a3Prev = vPrev[ia + 6];\n        if (po !== o0) {\n          if (a < paL) {\n            pathWindingL += winding;\n          } else if (a > paR) {\n            pathWindingR += winding;\n          } else {\n            onPath = true;\n          }\n          if (a > pa - qualityEpsilon && a < pa + qualityEpsilon) quality /= 2;\n        } else {\n          if (winding !== windingPrev) {\n            if (a0 < paL) {\n              pathWindingL += winding;\n            } else if (a0 > paR) {\n              pathWindingR += winding;\n            }\n          } else if (a0 != a3Prev) {\n            if (a3Prev < paR && a > paR) {\n              pathWindingR += winding;\n              onPath = true;\n            } else if (a3Prev > paL && a < paL) {\n              pathWindingL += winding;\n              onPath = true;\n            }\n          }\n          quality /= 4;\n        }\n        vPrev = v;\n        return !dontFlip && a > paL && a < paR && Curve.getTangent(v, t)[dir ? 'x' : 'y'] === 0 && getWinding(point, curves, !dir, closed, true);\n      }\n      function handleCurve(v) {\n        var o0 = v[io + 0],\n          o1 = v[io + 2],\n          o2 = v[io + 4],\n          o3 = v[io + 6];\n        if (po <= max(o0, o1, o2, o3) && po >= min(o0, o1, o2, o3)) {\n          var a0 = v[ia + 0],\n            a1 = v[ia + 2],\n            a2 = v[ia + 4],\n            a3 = v[ia + 6],\n            monoCurves = paL > max(a0, a1, a2, a3) || paR < min(a0, a1, a2, a3) ? [v] : Curve.getMonoCurves(v, dir),\n            res;\n          for (var i = 0, l = monoCurves.length; i < l; i++) {\n            if (res = addWinding(monoCurves[i])) return res;\n          }\n        }\n      }\n      for (var i = 0, l = curvesList.length; i < l; i++) {\n        var curve = curvesList[i],\n          path = curve._path,\n          v = curve.getValues(),\n          res;\n        if (!i || curvesList[i - 1]._path !== path) {\n          vPrev = null;\n          if (!path._closed) {\n            vClose = Curve.getValues(path.getLastCurve().getSegment2(), curve.getSegment1(), null, !closed);\n            if (vClose[io] !== vClose[io + 6]) {\n              vPrev = vClose;\n            }\n          }\n          if (!vPrev) {\n            vPrev = v;\n            var prev = path.getLastCurve();\n            while (prev && prev !== curve) {\n              var v2 = prev.getValues();\n              if (v2[io] !== v2[io + 6]) {\n                vPrev = v2;\n                break;\n              }\n              prev = prev.getPrevious();\n            }\n          }\n        }\n        if (res = handleCurve(v)) return res;\n        if (i + 1 === l || curvesList[i + 1]._path !== path) {\n          if (vClose && (res = handleCurve(vClose))) return res;\n          if (onPath && !pathWindingL && !pathWindingR) {\n            pathWindingL = pathWindingR = path.isClockwise(closed) ^ dir ? 1 : -1;\n          }\n          windingL += pathWindingL;\n          windingR += pathWindingR;\n          pathWindingL = pathWindingR = 0;\n          if (onPath) {\n            onAnyPath = true;\n            onPath = false;\n          }\n          vClose = null;\n        }\n      }\n      windingL = abs(windingL);\n      windingR = abs(windingR);\n      return {\n        winding: max(windingL, windingR),\n        windingL: windingL,\n        windingR: windingR,\n        quality: quality,\n        onPath: onAnyPath\n      };\n    }\n    function propagateWinding(segment, path1, path2, curveCollisionsMap, operator) {\n      var chain = [],\n        start = segment,\n        totalLength = 0,\n        winding;\n      do {\n        var curve = segment.getCurve();\n        if (curve) {\n          var length = curve.getLength();\n          chain.push({\n            segment: segment,\n            curve: curve,\n            length: length\n          });\n          totalLength += length;\n        }\n        segment = segment.getNext();\n      } while (segment && !segment._intersection && segment !== start);\n      var offsets = [0.5, 0.25, 0.75],\n        winding = {\n          winding: 0,\n          quality: -1\n        },\n        tMin = 1e-3,\n        tMax = 1 - tMin;\n      for (var i = 0; i < offsets.length && winding.quality < 0.5; i++) {\n        var length = totalLength * offsets[i];\n        for (var j = 0, l = chain.length; j < l; j++) {\n          var entry = chain[j],\n            curveLength = entry.length;\n          if (length <= curveLength) {\n            var curve = entry.curve,\n              path = curve._path,\n              parent = path._parent,\n              operand = parent instanceof CompoundPath ? parent : path,\n              t = Numerical.clamp(curve.getTimeAt(length), tMin, tMax),\n              pt = curve.getPointAtTime(t),\n              dir = abs(curve.getTangentAtTime(t).y) < Math.SQRT1_2;\n            var wind = null;\n            if (operator.subtract && path2) {\n              var otherPath = operand === path1 ? path2 : path1,\n                pathWinding = otherPath._getWinding(pt, dir, true);\n              if (operand === path1 && pathWinding.winding || operand === path2 && !pathWinding.winding) {\n                if (pathWinding.quality < 1) {\n                  continue;\n                } else {\n                  wind = {\n                    winding: 0,\n                    quality: 1\n                  };\n                }\n              }\n            }\n            wind = wind || getWinding(pt, curveCollisionsMap[path._id][curve.getIndex()], dir, true);\n            if (wind.quality > winding.quality) winding = wind;\n            break;\n          }\n          length -= curveLength;\n        }\n      }\n      for (var j = chain.length - 1; j >= 0; j--) {\n        chain[j].segment._winding = winding;\n      }\n    }\n    function tracePaths(segments, operator) {\n      var paths = [],\n        starts;\n      function isValid(seg) {\n        var winding;\n        return !!(seg && !seg._visited && (!operator || operator[(winding = seg._winding || {}).winding] && !(operator.unite && winding.winding === 2 && winding.windingL && winding.windingR)));\n      }\n      function isStart(seg) {\n        if (seg) {\n          for (var i = 0, l = starts.length; i < l; i++) {\n            if (seg === starts[i]) return true;\n          }\n        }\n        return false;\n      }\n      function visitPath(path) {\n        var segments = path._segments;\n        for (var i = 0, l = segments.length; i < l; i++) {\n          segments[i]._visited = true;\n        }\n      }\n      function getCrossingSegments(segment, collectStarts) {\n        var inter = segment._intersection,\n          start = inter,\n          crossings = [];\n        if (collectStarts) starts = [segment];\n        function collect(inter, end) {\n          while (inter && inter !== end) {\n            var other = inter._segment,\n              path = other && other._path;\n            if (path) {\n              var next = other.getNext() || path.getFirstSegment(),\n                nextInter = next._intersection;\n              if (other !== segment && (isStart(other) || isStart(next) || next && isValid(other) && (isValid(next) || nextInter && isValid(nextInter._segment)))) {\n                crossings.push(other);\n              }\n              if (collectStarts) starts.push(other);\n            }\n            inter = inter._next;\n          }\n        }\n        if (inter) {\n          collect(inter);\n          while (inter && inter._previous) inter = inter._previous;\n          collect(inter, start);\n        }\n        return crossings;\n      }\n      segments.sort(function (seg1, seg2) {\n        var inter1 = seg1._intersection,\n          inter2 = seg2._intersection,\n          over1 = !!(inter1 && inter1._overlap),\n          over2 = !!(inter2 && inter2._overlap),\n          path1 = seg1._path,\n          path2 = seg2._path;\n        return over1 ^ over2 ? over1 ? 1 : -1 : !inter1 ^ !inter2 ? inter1 ? 1 : -1 : path1 !== path2 ? path1._id - path2._id : seg1._index - seg2._index;\n      });\n      for (var i = 0, l = segments.length; i < l; i++) {\n        var seg = segments[i],\n          valid = isValid(seg),\n          path = null,\n          finished = false,\n          closed = true,\n          branches = [],\n          branch,\n          visited,\n          handleIn;\n        if (valid && seg._path._overlapsOnly) {\n          var path1 = seg._path,\n            path2 = seg._intersection._segment._path;\n          if (path1.compare(path2)) {\n            if (path1.getArea()) paths.push(path1.clone(false));\n            visitPath(path1);\n            visitPath(path2);\n            valid = false;\n          }\n        }\n        while (valid) {\n          var first = !path,\n            crossings = getCrossingSegments(seg, first),\n            other = crossings.shift(),\n            finished = !first && (isStart(seg) || isStart(other)),\n            cross = !finished && other;\n          if (first) {\n            path = new Path(Item.NO_INSERT);\n            branch = null;\n          }\n          if (finished) {\n            if (seg.isFirst() || seg.isLast()) closed = seg._path._closed;\n            seg._visited = true;\n            break;\n          }\n          if (cross && branch) {\n            branches.push(branch);\n            branch = null;\n          }\n          if (!branch) {\n            if (cross) crossings.push(seg);\n            branch = {\n              start: path._segments.length,\n              crossings: crossings,\n              visited: visited = [],\n              handleIn: handleIn\n            };\n          }\n          if (cross) seg = other;\n          if (!isValid(seg)) {\n            path.removeSegments(branch.start);\n            for (var j = 0, k = visited.length; j < k; j++) {\n              visited[j]._visited = false;\n            }\n            visited.length = 0;\n            do {\n              seg = branch && branch.crossings.shift();\n              if (!seg || !seg._path) {\n                seg = null;\n                branch = branches.pop();\n                if (branch) {\n                  visited = branch.visited;\n                  handleIn = branch.handleIn;\n                }\n              }\n            } while (branch && !isValid(seg));\n            if (!seg) break;\n          }\n          var next = seg.getNext();\n          path.add(new Segment(seg._point, handleIn, next && seg._handleOut));\n          seg._visited = true;\n          visited.push(seg);\n          seg = next || seg._path.getFirstSegment();\n          handleIn = next && next._handleIn;\n        }\n        if (finished) {\n          if (closed) {\n            path.getFirstSegment().setHandleIn(handleIn);\n            path.setClosed(closed);\n          }\n          if (path.getArea() !== 0) {\n            paths.push(path);\n          }\n        }\n      }\n      return paths;\n    }\n    return {\n      _getWinding: function (point, dir, closed) {\n        return getWinding(point, this.getCurves(), dir, closed);\n      },\n      unite: function (path, options) {\n        return traceBoolean(this, path, 'unite', options);\n      },\n      intersect: function (path, options) {\n        return traceBoolean(this, path, 'intersect', options);\n      },\n      subtract: function (path, options) {\n        return traceBoolean(this, path, 'subtract', options);\n      },\n      exclude: function (path, options) {\n        return traceBoolean(this, path, 'exclude', options);\n      },\n      divide: function (path, options) {\n        return options && (options.trace == false || options.stroke) ? splitBoolean(this, path, 'divide') : createResult([this.subtract(path, options), this.intersect(path, options)], true, this, path, options);\n      },\n      resolveCrossings: function () {\n        var children = this._children,\n          paths = children || [this];\n        function hasOverlap(seg, path) {\n          var inter = seg && seg._intersection;\n          return inter && inter._overlap && inter._path === path;\n        }\n        var hasOverlaps = false,\n          hasCrossings = false,\n          intersections = this.getIntersections(null, function (inter) {\n            return inter.hasOverlap() && (hasOverlaps = true) || inter.isCrossing() && (hasCrossings = true);\n          }),\n          clearCurves = hasOverlaps && hasCrossings && [];\n        intersections = CurveLocation.expand(intersections);\n        if (hasOverlaps) {\n          var overlaps = divideLocations(intersections, function (inter) {\n            return inter.hasOverlap();\n          }, clearCurves);\n          for (var i = overlaps.length - 1; i >= 0; i--) {\n            var overlap = overlaps[i],\n              path = overlap._path,\n              seg = overlap._segment,\n              prev = seg.getPrevious(),\n              next = seg.getNext();\n            if (hasOverlap(prev, path) && hasOverlap(next, path)) {\n              seg.remove();\n              prev._handleOut._set(0, 0);\n              next._handleIn._set(0, 0);\n              if (prev !== seg && !prev.getCurve().hasLength()) {\n                next._handleIn.set(prev._handleIn);\n                prev.remove();\n              }\n            }\n          }\n        }\n        if (hasCrossings) {\n          divideLocations(intersections, hasOverlaps && function (inter) {\n            var curve1 = inter.getCurve(),\n              seg1 = inter.getSegment(),\n              other = inter._intersection,\n              curve2 = other._curve,\n              seg2 = other._segment;\n            if (curve1 && curve2 && curve1._path && curve2._path) return true;\n            if (seg1) seg1._intersection = null;\n            if (seg2) seg2._intersection = null;\n          }, clearCurves);\n          if (clearCurves) clearCurveHandles(clearCurves);\n          paths = tracePaths(Base.each(paths, function (path) {\n            Base.push(this, path._segments);\n          }, []));\n        }\n        var length = paths.length,\n          item;\n        if (length > 1 && children) {\n          if (paths !== children) this.setChildren(paths);\n          item = this;\n        } else if (length === 1 && !children) {\n          if (paths[0] !== this) this.setSegments(paths[0].removeSegments());\n          item = this;\n        }\n        if (!item) {\n          item = new CompoundPath(Item.NO_INSERT);\n          item.addChildren(paths);\n          item = item.reduce();\n          item.copyAttributes(this);\n          this.replaceWith(item);\n        }\n        return item;\n      },\n      reorient: function (nonZero, clockwise) {\n        var children = this._children;\n        if (children && children.length) {\n          this.setChildren(reorientPaths(this.removeChildren(), function (w) {\n            return !!(nonZero ? w : w & 1);\n          }, clockwise));\n        } else if (clockwise !== undefined) {\n          this.setClockwise(clockwise);\n        }\n        return this;\n      },\n      getInteriorPoint: function () {\n        var bounds = this.getBounds(),\n          point = bounds.getCenter(true);\n        if (!this.contains(point)) {\n          var curves = this.getCurves(),\n            y = point.y,\n            intercepts = [],\n            roots = [];\n          for (var i = 0, l = curves.length; i < l; i++) {\n            var v = curves[i].getValues(),\n              o0 = v[1],\n              o1 = v[3],\n              o2 = v[5],\n              o3 = v[7];\n            if (y >= min(o0, o1, o2, o3) && y <= max(o0, o1, o2, o3)) {\n              var monoCurves = Curve.getMonoCurves(v);\n              for (var j = 0, m = monoCurves.length; j < m; j++) {\n                var mv = monoCurves[j],\n                  mo0 = mv[1],\n                  mo3 = mv[7];\n                if (mo0 !== mo3 && (y >= mo0 && y <= mo3 || y >= mo3 && y <= mo0)) {\n                  var x = y === mo0 ? mv[0] : y === mo3 ? mv[6] : Curve.solveCubic(mv, 1, y, roots, 0, 1) === 1 ? Curve.getPoint(mv, roots[0]).x : (mv[0] + mv[6]) / 2;\n                  intercepts.push(x);\n                }\n              }\n            }\n          }\n          if (intercepts.length > 1) {\n            intercepts.sort(function (a, b) {\n              return a - b;\n            });\n            point.x = (intercepts[0] + intercepts[1]) / 2;\n          }\n        }\n        return point;\n      }\n    };\n  }());\n  var PathFlattener = Base.extend({\n    _class: 'PathFlattener',\n    initialize: function (path, flatness, maxRecursion, ignoreStraight, matrix) {\n      var curves = [],\n        parts = [],\n        length = 0,\n        minSpan = 1 / (maxRecursion || 32),\n        segments = path._segments,\n        segment1 = segments[0],\n        segment2;\n      function addCurve(segment1, segment2) {\n        var curve = Curve.getValues(segment1, segment2, matrix);\n        curves.push(curve);\n        computeParts(curve, segment1._index, 0, 1);\n      }\n      function computeParts(curve, index, t1, t2) {\n        if (t2 - t1 > minSpan && !(ignoreStraight && Curve.isStraight(curve)) && !Curve.isFlatEnough(curve, flatness || 0.25)) {\n          var halves = Curve.subdivide(curve, 0.5),\n            tMid = (t1 + t2) / 2;\n          computeParts(halves[0], index, t1, tMid);\n          computeParts(halves[1], index, tMid, t2);\n        } else {\n          var dx = curve[6] - curve[0],\n            dy = curve[7] - curve[1],\n            dist = Math.sqrt(dx * dx + dy * dy);\n          if (dist > 0) {\n            length += dist;\n            parts.push({\n              offset: length,\n              curve: curve,\n              index: index,\n              time: t2\n            });\n          }\n        }\n      }\n      for (var i = 1, l = segments.length; i < l; i++) {\n        segment2 = segments[i];\n        addCurve(segment1, segment2);\n        segment1 = segment2;\n      }\n      if (path._closed) addCurve(segment2 || segment1, segments[0]);\n      this.curves = curves;\n      this.parts = parts;\n      this.length = length;\n      this.index = 0;\n    },\n    _get: function (offset) {\n      var parts = this.parts,\n        length = parts.length,\n        start,\n        i,\n        j = this.index;\n      for (;;) {\n        i = j;\n        if (!j || parts[--j].offset < offset) break;\n      }\n      for (; i < length; i++) {\n        var part = parts[i];\n        if (part.offset >= offset) {\n          this.index = i;\n          var prev = parts[i - 1],\n            prevTime = prev && prev.index === part.index ? prev.time : 0,\n            prevOffset = prev ? prev.offset : 0;\n          return {\n            index: part.index,\n            time: prevTime + (part.time - prevTime) * (offset - prevOffset) / (part.offset - prevOffset)\n          };\n        }\n      }\n      return {\n        index: parts[length - 1].index,\n        time: 1\n      };\n    },\n    drawPart: function (ctx, from, to) {\n      var start = this._get(from),\n        end = this._get(to);\n      for (var i = start.index, l = end.index; i <= l; i++) {\n        var curve = Curve.getPart(this.curves[i], i === start.index ? start.time : 0, i === end.index ? end.time : 1);\n        if (i === start.index) ctx.moveTo(curve[0], curve[1]);\n        ctx.bezierCurveTo.apply(ctx, curve.slice(2));\n      }\n    }\n  }, Base.each(Curve._evaluateMethods, function (name) {\n    this[name + 'At'] = function (offset) {\n      var param = this._get(offset);\n      return Curve[name](this.curves[param.index], param.time);\n    };\n  }, {}));\n  var PathFitter = Base.extend({\n    initialize: function (path) {\n      var points = this.points = [],\n        segments = path._segments,\n        closed = path._closed;\n      for (var i = 0, prev, l = segments.length; i < l; i++) {\n        var point = segments[i].point;\n        if (!prev || !prev.equals(point)) {\n          points.push(prev = point.clone());\n        }\n      }\n      if (closed) {\n        points.unshift(points[points.length - 1]);\n        points.push(points[1]);\n      }\n      this.closed = closed;\n    },\n    fit: function (error) {\n      var points = this.points,\n        length = points.length,\n        segments = null;\n      if (length > 0) {\n        segments = [new Segment(points[0])];\n        if (length > 1) {\n          this.fitCubic(segments, error, 0, length - 1, points[1].subtract(points[0]), points[length - 2].subtract(points[length - 1]));\n          if (this.closed) {\n            segments.shift();\n            segments.pop();\n          }\n        }\n      }\n      return segments;\n    },\n    fitCubic: function (segments, error, first, last, tan1, tan2) {\n      var points = this.points;\n      if (last - first === 1) {\n        var pt1 = points[first],\n          pt2 = points[last],\n          dist = pt1.getDistance(pt2) / 3;\n        this.addCurve(segments, [pt1, pt1.add(tan1.normalize(dist)), pt2.add(tan2.normalize(dist)), pt2]);\n        return;\n      }\n      var uPrime = this.chordLengthParameterize(first, last),\n        maxError = Math.max(error, error * error),\n        split,\n        parametersInOrder = true;\n      for (var i = 0; i <= 4; i++) {\n        var curve = this.generateBezier(first, last, uPrime, tan1, tan2);\n        var max = this.findMaxError(first, last, curve, uPrime);\n        if (max.error < error && parametersInOrder) {\n          this.addCurve(segments, curve);\n          return;\n        }\n        split = max.index;\n        if (max.error >= maxError) break;\n        parametersInOrder = this.reparameterize(first, last, uPrime, curve);\n        maxError = max.error;\n      }\n      var tanCenter = points[split - 1].subtract(points[split + 1]);\n      this.fitCubic(segments, error, first, split, tan1, tanCenter);\n      this.fitCubic(segments, error, split, last, tanCenter.negate(), tan2);\n    },\n    addCurve: function (segments, curve) {\n      var prev = segments[segments.length - 1];\n      prev.setHandleOut(curve[1].subtract(curve[0]));\n      segments.push(new Segment(curve[3], curve[2].subtract(curve[3])));\n    },\n    generateBezier: function (first, last, uPrime, tan1, tan2) {\n      var epsilon = 1e-12,\n        abs = Math.abs,\n        points = this.points,\n        pt1 = points[first],\n        pt2 = points[last],\n        C = [[0, 0], [0, 0]],\n        X = [0, 0];\n      for (var i = 0, l = last - first + 1; i < l; i++) {\n        var u = uPrime[i],\n          t = 1 - u,\n          b = 3 * u * t,\n          b0 = t * t * t,\n          b1 = b * t,\n          b2 = b * u,\n          b3 = u * u * u,\n          a1 = tan1.normalize(b1),\n          a2 = tan2.normalize(b2),\n          tmp = points[first + i].subtract(pt1.multiply(b0 + b1)).subtract(pt2.multiply(b2 + b3));\n        C[0][0] += a1.dot(a1);\n        C[0][1] += a1.dot(a2);\n        C[1][0] = C[0][1];\n        C[1][1] += a2.dot(a2);\n        X[0] += a1.dot(tmp);\n        X[1] += a2.dot(tmp);\n      }\n      var detC0C1 = C[0][0] * C[1][1] - C[1][0] * C[0][1],\n        alpha1,\n        alpha2;\n      if (abs(detC0C1) > epsilon) {\n        var detC0X = C[0][0] * X[1] - C[1][0] * X[0],\n          detXC1 = X[0] * C[1][1] - X[1] * C[0][1];\n        alpha1 = detXC1 / detC0C1;\n        alpha2 = detC0X / detC0C1;\n      } else {\n        var c0 = C[0][0] + C[0][1],\n          c1 = C[1][0] + C[1][1];\n        alpha1 = alpha2 = abs(c0) > epsilon ? X[0] / c0 : abs(c1) > epsilon ? X[1] / c1 : 0;\n      }\n      var segLength = pt2.getDistance(pt1),\n        eps = epsilon * segLength,\n        handle1,\n        handle2;\n      if (alpha1 < eps || alpha2 < eps) {\n        alpha1 = alpha2 = segLength / 3;\n      } else {\n        var line = pt2.subtract(pt1);\n        handle1 = tan1.normalize(alpha1);\n        handle2 = tan2.normalize(alpha2);\n        if (handle1.dot(line) - handle2.dot(line) > segLength * segLength) {\n          alpha1 = alpha2 = segLength / 3;\n          handle1 = handle2 = null;\n        }\n      }\n      return [pt1, pt1.add(handle1 || tan1.normalize(alpha1)), pt2.add(handle2 || tan2.normalize(alpha2)), pt2];\n    },\n    reparameterize: function (first, last, u, curve) {\n      for (var i = first; i <= last; i++) {\n        u[i - first] = this.findRoot(curve, this.points[i], u[i - first]);\n      }\n      for (var i = 1, l = u.length; i < l; i++) {\n        if (u[i] <= u[i - 1]) return false;\n      }\n      return true;\n    },\n    findRoot: function (curve, point, u) {\n      var curve1 = [],\n        curve2 = [];\n      for (var i = 0; i <= 2; i++) {\n        curve1[i] = curve[i + 1].subtract(curve[i]).multiply(3);\n      }\n      for (var i = 0; i <= 1; i++) {\n        curve2[i] = curve1[i + 1].subtract(curve1[i]).multiply(2);\n      }\n      var pt = this.evaluate(3, curve, u),\n        pt1 = this.evaluate(2, curve1, u),\n        pt2 = this.evaluate(1, curve2, u),\n        diff = pt.subtract(point),\n        df = pt1.dot(pt1) + diff.dot(pt2);\n      return Numerical.isMachineZero(df) ? u : u - diff.dot(pt1) / df;\n    },\n    evaluate: function (degree, curve, t) {\n      var tmp = curve.slice();\n      for (var i = 1; i <= degree; i++) {\n        for (var j = 0; j <= degree - i; j++) {\n          tmp[j] = tmp[j].multiply(1 - t).add(tmp[j + 1].multiply(t));\n        }\n      }\n      return tmp[0];\n    },\n    chordLengthParameterize: function (first, last) {\n      var u = [0];\n      for (var i = first + 1; i <= last; i++) {\n        u[i - first] = u[i - first - 1] + this.points[i].getDistance(this.points[i - 1]);\n      }\n      for (var i = 1, m = last - first; i <= m; i++) {\n        u[i] /= u[m];\n      }\n      return u;\n    },\n    findMaxError: function (first, last, curve, u) {\n      var index = Math.floor((last - first + 1) / 2),\n        maxDist = 0;\n      for (var i = first + 1; i < last; i++) {\n        var P = this.evaluate(3, curve, u[i - first]);\n        var v = P.subtract(this.points[i]);\n        var dist = v.x * v.x + v.y * v.y;\n        if (dist >= maxDist) {\n          maxDist = dist;\n          index = i;\n        }\n      }\n      return {\n        error: maxDist,\n        index: index\n      };\n    }\n  });\n  var TextItem = Item.extend({\n    _class: 'TextItem',\n    _applyMatrix: false,\n    _canApplyMatrix: false,\n    _serializeFields: {\n      content: null\n    },\n    _boundsOptions: {\n      stroke: false,\n      handle: false\n    },\n    initialize: function TextItem(arg) {\n      this._content = '';\n      this._lines = [];\n      var hasProps = arg && Base.isPlainObject(arg) && arg.x === undefined && arg.y === undefined;\n      this._initialize(hasProps && arg, !hasProps && Point.read(arguments));\n    },\n    _equals: function (item) {\n      return this._content === item._content;\n    },\n    copyContent: function (source) {\n      this.setContent(source._content);\n    },\n    getContent: function () {\n      return this._content;\n    },\n    setContent: function (content) {\n      this._content = '' + content;\n      this._lines = this._content.split(/\\r\\n|\\n|\\r/mg);\n      this._changed(521);\n    },\n    isEmpty: function () {\n      return !this._content;\n    },\n    getCharacterStyle: '#getStyle',\n    setCharacterStyle: '#setStyle',\n    getParagraphStyle: '#getStyle',\n    setParagraphStyle: '#setStyle'\n  });\n  var PointText = TextItem.extend({\n    _class: 'PointText',\n    initialize: function PointText() {\n      TextItem.apply(this, arguments);\n    },\n    getPoint: function () {\n      var point = this._matrix.getTranslation();\n      return new LinkedPoint(point.x, point.y, this, 'setPoint');\n    },\n    setPoint: function () {\n      var point = Point.read(arguments);\n      this.translate(point.subtract(this._matrix.getTranslation()));\n    },\n    _draw: function (ctx, param, viewMatrix) {\n      if (!this._content) return;\n      this._setStyles(ctx, param, viewMatrix);\n      var lines = this._lines,\n        style = this._style,\n        hasFill = style.hasFill(),\n        hasStroke = style.hasStroke(),\n        leading = style.getLeading(),\n        shadowColor = ctx.shadowColor;\n      ctx.font = style.getFontStyle();\n      ctx.textAlign = style.getJustification();\n      for (var i = 0, l = lines.length; i < l; i++) {\n        ctx.shadowColor = shadowColor;\n        var line = lines[i];\n        if (hasFill) {\n          ctx.fillText(line, 0, 0);\n          ctx.shadowColor = 'rgba(0,0,0,0)';\n        }\n        if (hasStroke) ctx.strokeText(line, 0, 0);\n        ctx.translate(0, leading);\n      }\n    },\n    _getBounds: function (matrix, options) {\n      var style = this._style,\n        lines = this._lines,\n        numLines = lines.length,\n        justification = style.getJustification(),\n        leading = style.getLeading(),\n        width = this.getView().getTextWidth(style.getFontStyle(), lines),\n        x = 0;\n      if (justification !== 'left') x -= width / (justification === 'center' ? 2 : 1);\n      var rect = new Rectangle(x, numLines ? -0.75 * leading : 0, width, numLines * leading);\n      return matrix ? matrix._transformBounds(rect, rect) : rect;\n    }\n  });\n  var Color = Base.extend(new function () {\n    var types = {\n      gray: ['gray'],\n      rgb: ['red', 'green', 'blue'],\n      hsb: ['hue', 'saturation', 'brightness'],\n      hsl: ['hue', 'saturation', 'lightness'],\n      gradient: ['gradient', 'origin', 'destination', 'highlight']\n    };\n    var componentParsers = {},\n      namedColors = {\n        transparent: [0, 0, 0, 0]\n      },\n      colorCtx;\n    function fromCSS(string) {\n      var match = string.match(/^#([\\da-f]{2})([\\da-f]{2})([\\da-f]{2})([\\da-f]{2})?$/i) || string.match(/^#([\\da-f])([\\da-f])([\\da-f])([\\da-f])?$/i),\n        type = 'rgb',\n        components;\n      if (match) {\n        var amount = match[4] ? 4 : 3;\n        components = new Array(amount);\n        for (var i = 0; i < amount; i++) {\n          var value = match[i + 1];\n          components[i] = parseInt(value.length == 1 ? value + value : value, 16) / 255;\n        }\n      } else if (match = string.match(/^(rgb|hsl)a?\\((.*)\\)$/)) {\n        type = match[1];\n        components = match[2].trim().split(/[,\\s]+/g);\n        var isHSL = type === 'hsl';\n        for (var i = 0, l = Math.min(components.length, 4); i < l; i++) {\n          var component = components[i];\n          var value = parseFloat(component);\n          if (isHSL) {\n            if (i === 0) {\n              var unit = component.match(/([a-z]*)$/)[1];\n              value *= {\n                turn: 360,\n                rad: 180 / Math.PI,\n                grad: 0.9\n              }[unit] || 1;\n            } else if (i < 3) {\n              value /= 100;\n            }\n          } else if (i < 3) {\n            value /= /%$/.test(component) ? 100 : 255;\n          }\n          components[i] = value;\n        }\n      } else {\n        var color = namedColors[string];\n        if (!color) {\n          if (window) {\n            if (!colorCtx) {\n              colorCtx = CanvasProvider.getContext(1, 1);\n              colorCtx.globalCompositeOperation = 'copy';\n            }\n            colorCtx.fillStyle = 'rgba(0,0,0,0)';\n            colorCtx.fillStyle = string;\n            colorCtx.fillRect(0, 0, 1, 1);\n            var data = colorCtx.getImageData(0, 0, 1, 1).data;\n            color = namedColors[string] = [data[0] / 255, data[1] / 255, data[2] / 255];\n          } else {\n            color = [0, 0, 0];\n          }\n        }\n        components = color.slice();\n      }\n      return [type, components];\n    }\n    var hsbIndices = [[0, 3, 1], [2, 0, 1], [1, 0, 3], [1, 2, 0], [3, 1, 0], [0, 1, 2]];\n    var converters = {\n      'rgb-hsb': function (r, g, b) {\n        var max = Math.max(r, g, b),\n          min = Math.min(r, g, b),\n          delta = max - min,\n          h = delta === 0 ? 0 : (max == r ? (g - b) / delta + (g < b ? 6 : 0) : max == g ? (b - r) / delta + 2 : (r - g) / delta + 4) * 60;\n        return [h, max === 0 ? 0 : delta / max, max];\n      },\n      'hsb-rgb': function (h, s, b) {\n        h = (h / 60 % 6 + 6) % 6;\n        var i = Math.floor(h),\n          f = h - i,\n          i = hsbIndices[i],\n          v = [b, b * (1 - s), b * (1 - s * f), b * (1 - s * (1 - f))];\n        return [v[i[0]], v[i[1]], v[i[2]]];\n      },\n      'rgb-hsl': function (r, g, b) {\n        var max = Math.max(r, g, b),\n          min = Math.min(r, g, b),\n          delta = max - min,\n          achromatic = delta === 0,\n          h = achromatic ? 0 : (max == r ? (g - b) / delta + (g < b ? 6 : 0) : max == g ? (b - r) / delta + 2 : (r - g) / delta + 4) * 60,\n          l = (max + min) / 2,\n          s = achromatic ? 0 : l < 0.5 ? delta / (max + min) : delta / (2 - max - min);\n        return [h, s, l];\n      },\n      'hsl-rgb': function (h, s, l) {\n        h = (h / 360 % 1 + 1) % 1;\n        if (s === 0) return [l, l, l];\n        var t3s = [h + 1 / 3, h, h - 1 / 3],\n          t2 = l < 0.5 ? l * (1 + s) : l + s - l * s,\n          t1 = 2 * l - t2,\n          c = [];\n        for (var i = 0; i < 3; i++) {\n          var t3 = t3s[i];\n          if (t3 < 0) t3 += 1;\n          if (t3 > 1) t3 -= 1;\n          c[i] = 6 * t3 < 1 ? t1 + (t2 - t1) * 6 * t3 : 2 * t3 < 1 ? t2 : 3 * t3 < 2 ? t1 + (t2 - t1) * (2 / 3 - t3) * 6 : t1;\n        }\n        return c;\n      },\n      'rgb-gray': function (r, g, b) {\n        return [r * 0.2989 + g * 0.587 + b * 0.114];\n      },\n      'gray-rgb': function (g) {\n        return [g, g, g];\n      },\n      'gray-hsb': function (g) {\n        return [0, 0, g];\n      },\n      'gray-hsl': function (g) {\n        return [0, 0, g];\n      },\n      'gradient-rgb': function () {\n        return [];\n      },\n      'rgb-gradient': function () {\n        return [];\n      }\n    };\n    return Base.each(types, function (properties, type) {\n      componentParsers[type] = [];\n      Base.each(properties, function (name, index) {\n        var part = Base.capitalize(name),\n          hasOverlap = /^(hue|saturation)$/.test(name),\n          parser = componentParsers[type][index] = type === 'gradient' ? name === 'gradient' ? function (value) {\n            var current = this._components[0];\n            value = Gradient.read(Array.isArray(value) ? value : arguments, 0, {\n              readNull: true\n            });\n            if (current !== value) {\n              if (current) current._removeOwner(this);\n              if (value) value._addOwner(this);\n            }\n            return value;\n          } : function () {\n            return Point.read(arguments, 0, {\n              readNull: name === 'highlight',\n              clone: true\n            });\n          } : function (value) {\n            return value == null || isNaN(value) ? 0 : +value;\n          };\n        this['get' + part] = function () {\n          return this._type === type || hasOverlap && /^hs[bl]$/.test(this._type) ? this._components[index] : this._convert(type)[index];\n        };\n        this['set' + part] = function (value) {\n          if (this._type !== type && !(hasOverlap && /^hs[bl]$/.test(this._type))) {\n            this._components = this._convert(type);\n            this._properties = types[type];\n            this._type = type;\n          }\n          this._components[index] = parser.call(this, value);\n          this._changed();\n        };\n      }, this);\n    }, {\n      _class: 'Color',\n      _readIndex: true,\n      initialize: function Color(arg) {\n        var args = arguments,\n          reading = this.__read,\n          read = 0,\n          type,\n          components,\n          alpha,\n          values;\n        if (Array.isArray(arg)) {\n          args = arg;\n          arg = args[0];\n        }\n        var argType = arg != null && typeof arg;\n        if (argType === 'string' && arg in types) {\n          type = arg;\n          arg = args[1];\n          if (Array.isArray(arg)) {\n            components = arg;\n            alpha = args[2];\n          } else {\n            if (reading) read = 1;\n            args = Base.slice(args, 1);\n            argType = typeof arg;\n          }\n        }\n        if (!components) {\n          values = argType === 'number' ? args : argType === 'object' && arg.length != null ? arg : null;\n          if (values) {\n            if (!type) type = values.length >= 3 ? 'rgb' : 'gray';\n            var length = types[type].length;\n            alpha = values[length];\n            if (reading) {\n              read += values === arguments ? length + (alpha != null ? 1 : 0) : 1;\n            }\n            if (values.length > length) values = Base.slice(values, 0, length);\n          } else if (argType === 'string') {\n            var converted = fromCSS(arg);\n            type = converted[0];\n            components = converted[1];\n            if (components.length === 4) {\n              alpha = components[3];\n              components.length--;\n            }\n          } else if (argType === 'object') {\n            if (arg.constructor === Color) {\n              type = arg._type;\n              components = arg._components.slice();\n              alpha = arg._alpha;\n              if (type === 'gradient') {\n                for (var i = 1, l = components.length; i < l; i++) {\n                  var point = components[i];\n                  if (point) components[i] = point.clone();\n                }\n              }\n            } else if (arg.constructor === Gradient) {\n              type = 'gradient';\n              values = args;\n            } else {\n              type = 'hue' in arg ? 'lightness' in arg ? 'hsl' : 'hsb' : 'gradient' in arg || 'stops' in arg || 'radial' in arg ? 'gradient' : 'gray' in arg ? 'gray' : 'rgb';\n              var properties = types[type],\n                parsers = componentParsers[type];\n              this._components = components = [];\n              for (var i = 0, l = properties.length; i < l; i++) {\n                var value = arg[properties[i]];\n                if (value == null && !i && type === 'gradient' && 'stops' in arg) {\n                  value = {\n                    stops: arg.stops,\n                    radial: arg.radial\n                  };\n                }\n                value = parsers[i].call(this, value);\n                if (value != null) components[i] = value;\n              }\n              alpha = arg.alpha;\n            }\n          }\n          if (reading && type) read = 1;\n        }\n        this._type = type || 'rgb';\n        if (!components) {\n          this._components = components = [];\n          var parsers = componentParsers[this._type];\n          for (var i = 0, l = parsers.length; i < l; i++) {\n            var value = parsers[i].call(this, values && values[i]);\n            if (value != null) components[i] = value;\n          }\n        }\n        this._components = components;\n        this._properties = types[this._type];\n        this._alpha = alpha;\n        if (reading) this.__read = read;\n        return this;\n      },\n      set: '#initialize',\n      _serialize: function (options, dictionary) {\n        var components = this.getComponents();\n        return Base.serialize(/^(gray|rgb)$/.test(this._type) ? components : [this._type].concat(components), options, true, dictionary);\n      },\n      _changed: function () {\n        this._canvasStyle = null;\n        if (this._owner) {\n          if (this._setter) {\n            this._owner[this._setter](this);\n          } else {\n            this._owner._changed(129);\n          }\n        }\n      },\n      _convert: function (type) {\n        var converter;\n        return this._type === type ? this._components.slice() : (converter = converters[this._type + '-' + type]) ? converter.apply(this, this._components) : converters['rgb-' + type].apply(this, converters[this._type + '-rgb'].apply(this, this._components));\n      },\n      convert: function (type) {\n        return new Color(type, this._convert(type), this._alpha);\n      },\n      getType: function () {\n        return this._type;\n      },\n      setType: function (type) {\n        this._components = this._convert(type);\n        this._properties = types[type];\n        this._type = type;\n      },\n      getComponents: function () {\n        var components = this._components.slice();\n        if (this._alpha != null) components.push(this._alpha);\n        return components;\n      },\n      getAlpha: function () {\n        return this._alpha != null ? this._alpha : 1;\n      },\n      setAlpha: function (alpha) {\n        this._alpha = alpha == null ? null : Math.min(Math.max(alpha, 0), 1);\n        this._changed();\n      },\n      hasAlpha: function () {\n        return this._alpha != null;\n      },\n      equals: function (color) {\n        var col = Base.isPlainValue(color, true) ? Color.read(arguments) : color;\n        return col === this || col && this._class === col._class && this._type === col._type && this.getAlpha() === col.getAlpha() && Base.equals(this._components, col._components) || false;\n      },\n      toString: function () {\n        var properties = this._properties,\n          parts = [],\n          isGradient = this._type === 'gradient',\n          f = Formatter.instance;\n        for (var i = 0, l = properties.length; i < l; i++) {\n          var value = this._components[i];\n          if (value != null) parts.push(properties[i] + ': ' + (isGradient ? value : f.number(value)));\n        }\n        if (this._alpha != null) parts.push('alpha: ' + f.number(this._alpha));\n        return '{ ' + parts.join(', ') + ' }';\n      },\n      toCSS: function (hex) {\n        var components = this._convert('rgb'),\n          alpha = hex || this._alpha == null ? 1 : this._alpha;\n        function convert(val) {\n          return Math.round((val < 0 ? 0 : val > 1 ? 1 : val) * 255);\n        }\n        components = [convert(components[0]), convert(components[1]), convert(components[2])];\n        if (alpha < 1) components.push(alpha < 0 ? 0 : alpha);\n        return hex ? '#' + ((1 << 24) + (components[0] << 16) + (components[1] << 8) + components[2]).toString(16).slice(1) : (components.length == 4 ? 'rgba(' : 'rgb(') + components.join(',') + ')';\n      },\n      toCanvasStyle: function (ctx, matrix) {\n        if (this._canvasStyle) return this._canvasStyle;\n        if (this._type !== 'gradient') return this._canvasStyle = this.toCSS();\n        var components = this._components,\n          gradient = components[0],\n          stops = gradient._stops,\n          origin = components[1],\n          destination = components[2],\n          highlight = components[3],\n          inverse = matrix && matrix.inverted(),\n          canvasGradient;\n        if (inverse) {\n          origin = inverse._transformPoint(origin);\n          destination = inverse._transformPoint(destination);\n          if (highlight) highlight = inverse._transformPoint(highlight);\n        }\n        if (gradient._radial) {\n          var radius = destination.getDistance(origin);\n          if (highlight) {\n            var vector = highlight.subtract(origin);\n            if (vector.getLength() > radius) highlight = origin.add(vector.normalize(radius - 0.1));\n          }\n          var start = highlight || origin;\n          canvasGradient = ctx.createRadialGradient(start.x, start.y, 0, origin.x, origin.y, radius);\n        } else {\n          canvasGradient = ctx.createLinearGradient(origin.x, origin.y, destination.x, destination.y);\n        }\n        for (var i = 0, l = stops.length; i < l; i++) {\n          var stop = stops[i],\n            offset = stop._offset;\n          canvasGradient.addColorStop(offset == null ? i / (l - 1) : offset, stop._color.toCanvasStyle());\n        }\n        return this._canvasStyle = canvasGradient;\n      },\n      transform: function (matrix) {\n        if (this._type === 'gradient') {\n          var components = this._components;\n          for (var i = 1, l = components.length; i < l; i++) {\n            var point = components[i];\n            matrix._transformPoint(point, point, true);\n          }\n          this._changed();\n        }\n      },\n      statics: {\n        _types: types,\n        random: function () {\n          var random = Math.random;\n          return new Color(random(), random(), random());\n        },\n        _setOwner: function (color, owner, setter) {\n          if (color) {\n            if (color._owner && owner && color._owner !== owner) {\n              color = color.clone();\n            }\n            if (!color._owner ^ !owner) {\n              color._owner = owner || null;\n              color._setter = setter || null;\n            }\n          }\n          return color;\n        }\n      }\n    });\n  }(), new function () {\n    var operators = {\n      add: function (a, b) {\n        return a + b;\n      },\n      subtract: function (a, b) {\n        return a - b;\n      },\n      multiply: function (a, b) {\n        return a * b;\n      },\n      divide: function (a, b) {\n        return a / b;\n      }\n    };\n    return Base.each(operators, function (operator, name) {\n      this[name] = function (color) {\n        color = Color.read(arguments);\n        var type = this._type,\n          components1 = this._components,\n          components2 = color._convert(type);\n        for (var i = 0, l = components1.length; i < l; i++) components2[i] = operator(components1[i], components2[i]);\n        return new Color(type, components2, this._alpha != null ? operator(this._alpha, color.getAlpha()) : null);\n      };\n    }, {});\n  }());\n  var Gradient = Base.extend({\n    _class: 'Gradient',\n    initialize: function Gradient(stops, radial) {\n      this._id = UID.get();\n      if (stops && Base.isPlainObject(stops)) {\n        this.set(stops);\n        stops = radial = null;\n      }\n      if (this._stops == null) {\n        this.setStops(stops || ['white', 'black']);\n      }\n      if (this._radial == null) {\n        this.setRadial(typeof radial === 'string' && radial === 'radial' || radial || false);\n      }\n    },\n    _serialize: function (options, dictionary) {\n      return dictionary.add(this, function () {\n        return Base.serialize([this._stops, this._radial], options, true, dictionary);\n      });\n    },\n    _changed: function () {\n      for (var i = 0, l = this._owners && this._owners.length; i < l; i++) {\n        this._owners[i]._changed();\n      }\n    },\n    _addOwner: function (color) {\n      if (!this._owners) this._owners = [];\n      this._owners.push(color);\n    },\n    _removeOwner: function (color) {\n      var index = this._owners ? this._owners.indexOf(color) : -1;\n      if (index != -1) {\n        this._owners.splice(index, 1);\n        if (!this._owners.length) this._owners = undefined;\n      }\n    },\n    clone: function () {\n      var stops = [];\n      for (var i = 0, l = this._stops.length; i < l; i++) {\n        stops[i] = this._stops[i].clone();\n      }\n      return new Gradient(stops, this._radial);\n    },\n    getStops: function () {\n      return this._stops;\n    },\n    setStops: function (stops) {\n      if (stops.length < 2) {\n        throw new Error('Gradient stop list needs to contain at least two stops.');\n      }\n      var _stops = this._stops;\n      if (_stops) {\n        for (var i = 0, l = _stops.length; i < l; i++) _stops[i]._owner = undefined;\n      }\n      _stops = this._stops = GradientStop.readList(stops, 0, {\n        clone: true\n      });\n      for (var i = 0, l = _stops.length; i < l; i++) _stops[i]._owner = this;\n      this._changed();\n    },\n    getRadial: function () {\n      return this._radial;\n    },\n    setRadial: function (radial) {\n      this._radial = radial;\n      this._changed();\n    },\n    equals: function (gradient) {\n      if (gradient === this) return true;\n      if (gradient && this._class === gradient._class) {\n        var stops1 = this._stops,\n          stops2 = gradient._stops,\n          length = stops1.length;\n        if (length === stops2.length) {\n          for (var i = 0; i < length; i++) {\n            if (!stops1[i].equals(stops2[i])) return false;\n          }\n          return true;\n        }\n      }\n      return false;\n    }\n  });\n  var GradientStop = Base.extend({\n    _class: 'GradientStop',\n    initialize: function GradientStop(arg0, arg1) {\n      var color = arg0,\n        offset = arg1;\n      if (typeof arg0 === 'object' && arg1 === undefined) {\n        if (Array.isArray(arg0) && typeof arg0[0] !== 'number') {\n          color = arg0[0];\n          offset = arg0[1];\n        } else if ('color' in arg0 || 'offset' in arg0 || 'rampPoint' in arg0) {\n          color = arg0.color;\n          offset = arg0.offset || arg0.rampPoint || 0;\n        }\n      }\n      this.setColor(color);\n      this.setOffset(offset);\n    },\n    clone: function () {\n      return new GradientStop(this._color.clone(), this._offset);\n    },\n    _serialize: function (options, dictionary) {\n      var color = this._color,\n        offset = this._offset;\n      return Base.serialize(offset == null ? [color] : [color, offset], options, true, dictionary);\n    },\n    _changed: function () {\n      if (this._owner) this._owner._changed(129);\n    },\n    getOffset: function () {\n      return this._offset;\n    },\n    setOffset: function (offset) {\n      this._offset = offset;\n      this._changed();\n    },\n    getRampPoint: '#getOffset',\n    setRampPoint: '#setOffset',\n    getColor: function () {\n      return this._color;\n    },\n    setColor: function () {\n      Color._setOwner(this._color, null);\n      this._color = Color._setOwner(Color.read(arguments, 0), this, 'setColor');\n      this._changed();\n    },\n    equals: function (stop) {\n      return stop === this || stop && this._class === stop._class && this._color.equals(stop._color) && this._offset == stop._offset || false;\n    }\n  });\n  var Style = Base.extend(new function () {\n    var itemDefaults = {\n        fillColor: null,\n        fillRule: 'nonzero',\n        strokeColor: null,\n        strokeWidth: 1,\n        strokeCap: 'butt',\n        strokeJoin: 'miter',\n        strokeScaling: true,\n        miterLimit: 10,\n        dashOffset: 0,\n        dashArray: [],\n        shadowColor: null,\n        shadowBlur: 0,\n        shadowOffset: new Point(),\n        selectedColor: null\n      },\n      groupDefaults = Base.set({}, itemDefaults, {\n        fontFamily: 'sans-serif',\n        fontWeight: 'normal',\n        fontSize: 12,\n        leading: null,\n        justification: 'left'\n      }),\n      textDefaults = Base.set({}, groupDefaults, {\n        fillColor: new Color()\n      }),\n      flags = {\n        strokeWidth: 193,\n        strokeCap: 193,\n        strokeJoin: 193,\n        strokeScaling: 201,\n        miterLimit: 193,\n        fontFamily: 9,\n        fontWeight: 9,\n        fontSize: 9,\n        font: 9,\n        leading: 9,\n        justification: 9\n      },\n      item = {\n        beans: true\n      },\n      fields = {\n        _class: 'Style',\n        beans: true,\n        initialize: function Style(style, _owner, _project) {\n          this._values = {};\n          this._owner = _owner;\n          this._project = _owner && _owner._project || _project || paper.project;\n          this._defaults = !_owner || _owner instanceof Group ? groupDefaults : _owner instanceof TextItem ? textDefaults : itemDefaults;\n          if (style) this.set(style);\n        }\n      };\n    Base.each(groupDefaults, function (value, key) {\n      var isColor = /Color$/.test(key),\n        isPoint = key === 'shadowOffset',\n        part = Base.capitalize(key),\n        flag = flags[key],\n        set = 'set' + part,\n        get = 'get' + part;\n      fields[set] = function (value) {\n        var owner = this._owner,\n          children = owner && owner._children,\n          applyToChildren = children && children.length > 0 && !(owner instanceof CompoundPath);\n        if (applyToChildren) {\n          for (var i = 0, l = children.length; i < l; i++) children[i]._style[set](value);\n        }\n        if ((key === 'selectedColor' || !applyToChildren) && key in this._defaults) {\n          var old = this._values[key];\n          if (old !== value) {\n            if (isColor) {\n              if (old) {\n                Color._setOwner(old, null);\n                old._canvasStyle = null;\n              }\n              if (value && value.constructor === Color) {\n                value = Color._setOwner(value, owner, applyToChildren && set);\n              }\n            }\n            this._values[key] = value;\n            if (owner) owner._changed(flag || 129);\n          }\n        }\n      };\n      fields[get] = function (_dontMerge) {\n        var owner = this._owner,\n          children = owner && owner._children,\n          applyToChildren = children && children.length > 0 && !(owner instanceof CompoundPath),\n          value;\n        if (applyToChildren && !_dontMerge) {\n          for (var i = 0, l = children.length; i < l; i++) {\n            var childValue = children[i]._style[get]();\n            if (!i) {\n              value = childValue;\n            } else if (!Base.equals(value, childValue)) {\n              return undefined;\n            }\n          }\n        } else if (key in this._defaults) {\n          var value = this._values[key];\n          if (value === undefined) {\n            value = this._defaults[key];\n            if (value && value.clone) {\n              value = value.clone();\n            }\n          } else {\n            var ctor = isColor ? Color : isPoint ? Point : null;\n            if (ctor && !(value && value.constructor === ctor)) {\n              this._values[key] = value = ctor.read([value], 0, {\n                readNull: true,\n                clone: true\n              });\n            }\n          }\n        }\n        if (value && isColor) {\n          value = Color._setOwner(value, owner, applyToChildren && set);\n        }\n        return value;\n      };\n      item[get] = function (_dontMerge) {\n        return this._style[get](_dontMerge);\n      };\n      item[set] = function (value) {\n        this._style[set](value);\n      };\n    });\n    Base.each({\n      Font: 'FontFamily',\n      WindingRule: 'FillRule'\n    }, function (value, key) {\n      var get = 'get' + key,\n        set = 'set' + key;\n      fields[get] = item[get] = '#get' + value;\n      fields[set] = item[set] = '#set' + value;\n    });\n    Item.inject(item);\n    return fields;\n  }(), {\n    set: function (style) {\n      var isStyle = style instanceof Style,\n        values = isStyle ? style._values : style;\n      if (values) {\n        for (var key in values) {\n          if (key in this._defaults) {\n            var value = values[key];\n            this[key] = value && isStyle && value.clone ? value.clone() : value;\n          }\n        }\n      }\n    },\n    equals: function (style) {\n      function compare(style1, style2, secondary) {\n        var values1 = style1._values,\n          values2 = style2._values,\n          defaults2 = style2._defaults;\n        for (var key in values1) {\n          var value1 = values1[key],\n            value2 = values2[key];\n          if (!(secondary && key in values2) && !Base.equals(value1, value2 === undefined ? defaults2[key] : value2)) return false;\n        }\n        return true;\n      }\n      return style === this || style && this._class === style._class && compare(this, style) && compare(style, this, true) || false;\n    },\n    _dispose: function () {\n      var color;\n      color = this.getFillColor();\n      if (color) color._canvasStyle = null;\n      color = this.getStrokeColor();\n      if (color) color._canvasStyle = null;\n      color = this.getShadowColor();\n      if (color) color._canvasStyle = null;\n    },\n    hasFill: function () {\n      var color = this.getFillColor();\n      return !!color && color.alpha > 0;\n    },\n    hasStroke: function () {\n      var color = this.getStrokeColor();\n      return !!color && color.alpha > 0 && this.getStrokeWidth() > 0;\n    },\n    hasShadow: function () {\n      var color = this.getShadowColor();\n      return !!color && color.alpha > 0 && (this.getShadowBlur() > 0 || !this.getShadowOffset().isZero());\n    },\n    getView: function () {\n      return this._project._view;\n    },\n    getFontStyle: function () {\n      var fontSize = this.getFontSize();\n      return this.getFontWeight() + ' ' + fontSize + (/[a-z]/i.test(fontSize + '') ? ' ' : 'px ') + this.getFontFamily();\n    },\n    getFont: '#getFontFamily',\n    setFont: '#setFontFamily',\n    getLeading: function getLeading() {\n      var leading = getLeading.base.call(this),\n        fontSize = this.getFontSize();\n      if (/pt|em|%|px/.test(fontSize)) fontSize = this.getView().getPixelSize(fontSize);\n      return leading != null ? leading : fontSize * 1.2;\n    }\n  });\n  var DomElement = new function () {\n    function handlePrefix(el, name, set, value) {\n      var prefixes = ['', 'webkit', 'moz', 'Moz', 'ms', 'o'],\n        suffix = name[0].toUpperCase() + name.substring(1);\n      for (var i = 0; i < 6; i++) {\n        var prefix = prefixes[i],\n          key = prefix ? prefix + suffix : name;\n        if (key in el) {\n          if (set) {\n            el[key] = value;\n          } else {\n            return el[key];\n          }\n          break;\n        }\n      }\n    }\n    return {\n      getStyles: function (el) {\n        var doc = el && el.nodeType !== 9 ? el.ownerDocument : el,\n          view = doc && doc.defaultView;\n        return view && view.getComputedStyle(el, '');\n      },\n      getBounds: function (el, viewport) {\n        var doc = el.ownerDocument,\n          body = doc.body,\n          html = doc.documentElement,\n          rect;\n        try {\n          rect = el.getBoundingClientRect();\n        } catch (e) {\n          rect = {\n            left: 0,\n            top: 0,\n            width: 0,\n            height: 0\n          };\n        }\n        var x = rect.left - (html.clientLeft || body.clientLeft || 0),\n          y = rect.top - (html.clientTop || body.clientTop || 0);\n        if (!viewport) {\n          var view = doc.defaultView;\n          x += view.pageXOffset || html.scrollLeft || body.scrollLeft;\n          y += view.pageYOffset || html.scrollTop || body.scrollTop;\n        }\n        return new Rectangle(x, y, rect.width, rect.height);\n      },\n      getViewportBounds: function (el) {\n        var doc = el.ownerDocument,\n          view = doc.defaultView,\n          html = doc.documentElement;\n        return new Rectangle(0, 0, view.innerWidth || html.clientWidth, view.innerHeight || html.clientHeight);\n      },\n      getOffset: function (el, viewport) {\n        return DomElement.getBounds(el, viewport).getPoint();\n      },\n      getSize: function (el) {\n        return DomElement.getBounds(el, true).getSize();\n      },\n      isInvisible: function (el) {\n        return DomElement.getSize(el).equals(new Size(0, 0));\n      },\n      isInView: function (el) {\n        return !DomElement.isInvisible(el) && DomElement.getViewportBounds(el).intersects(DomElement.getBounds(el, true));\n      },\n      isInserted: function (el) {\n        return document.body.contains(el);\n      },\n      getPrefixed: function (el, name) {\n        return el && handlePrefix(el, name);\n      },\n      setPrefixed: function (el, name, value) {\n        if (typeof name === 'object') {\n          for (var key in name) handlePrefix(el, key, true, name[key]);\n        } else {\n          handlePrefix(el, name, true, value);\n        }\n      }\n    };\n  }();\n  var DomEvent = {\n    add: function (el, events) {\n      if (el) {\n        for (var type in events) {\n          var func = events[type],\n            parts = type.split(/[\\s,]+/g);\n          for (var i = 0, l = parts.length; i < l; i++) {\n            var name = parts[i];\n            var options = el === document && (name === 'touchstart' || name === 'touchmove') ? {\n              passive: false\n            } : false;\n            el.addEventListener(name, func, options);\n          }\n        }\n      }\n    },\n    remove: function (el, events) {\n      if (el) {\n        for (var type in events) {\n          var func = events[type],\n            parts = type.split(/[\\s,]+/g);\n          for (var i = 0, l = parts.length; i < l; i++) el.removeEventListener(parts[i], func, false);\n        }\n      }\n    },\n    getPoint: function (event) {\n      var pos = event.targetTouches ? event.targetTouches.length ? event.targetTouches[0] : event.changedTouches[0] : event;\n      return new Point(pos.pageX || pos.clientX + document.documentElement.scrollLeft, pos.pageY || pos.clientY + document.documentElement.scrollTop);\n    },\n    getTarget: function (event) {\n      return event.target || event.srcElement;\n    },\n    getRelatedTarget: function (event) {\n      return event.relatedTarget || event.toElement;\n    },\n    getOffset: function (event, target) {\n      return DomEvent.getPoint(event).subtract(DomElement.getOffset(target || DomEvent.getTarget(event)));\n    }\n  };\n  DomEvent.requestAnimationFrame = new function () {\n    var nativeRequest = DomElement.getPrefixed(window, 'requestAnimationFrame'),\n      requested = false,\n      callbacks = [],\n      timer;\n    function handleCallbacks() {\n      var functions = callbacks;\n      callbacks = [];\n      for (var i = 0, l = functions.length; i < l; i++) functions[i]();\n      requested = nativeRequest && callbacks.length;\n      if (requested) nativeRequest(handleCallbacks);\n    }\n    return function (callback) {\n      callbacks.push(callback);\n      if (nativeRequest) {\n        if (!requested) {\n          nativeRequest(handleCallbacks);\n          requested = true;\n        }\n      } else if (!timer) {\n        timer = setInterval(handleCallbacks, 1000 / 60);\n      }\n    };\n  }();\n  var View = Base.extend(Emitter, {\n    _class: 'View',\n    initialize: function View(project, element) {\n      function getSize(name) {\n        return element[name] || parseInt(element.getAttribute(name), 10);\n      }\n      function getCanvasSize() {\n        var size = DomElement.getSize(element);\n        return size.isNaN() || size.isZero() ? new Size(getSize('width'), getSize('height')) : size;\n      }\n      var size;\n      if (window && element) {\n        this._id = element.getAttribute('id');\n        if (this._id == null) element.setAttribute('id', this._id = 'paper-view-' + View._id++);\n        DomEvent.add(element, this._viewEvents);\n        var none = 'none';\n        DomElement.setPrefixed(element.style, {\n          userDrag: none,\n          userSelect: none,\n          touchCallout: none,\n          contentZooming: none,\n          tapHighlightColor: 'rgba(0,0,0,0)'\n        });\n        if (PaperScope.hasAttribute(element, 'resize')) {\n          var that = this;\n          DomEvent.add(window, this._windowEvents = {\n            resize: function () {\n              that.setViewSize(getCanvasSize());\n            }\n          });\n        }\n        size = getCanvasSize();\n        if (PaperScope.hasAttribute(element, 'stats') && typeof Stats !== 'undefined') {\n          this._stats = new Stats();\n          var stats = this._stats.domElement,\n            style = stats.style,\n            offset = DomElement.getOffset(element);\n          style.position = 'absolute';\n          style.left = offset.x + 'px';\n          style.top = offset.y + 'px';\n          document.body.appendChild(stats);\n        }\n      } else {\n        size = new Size(element);\n        element = null;\n      }\n      this._project = project;\n      this._scope = project._scope;\n      this._element = element;\n      if (!this._pixelRatio) this._pixelRatio = window && window.devicePixelRatio || 1;\n      this._setElementSize(size.width, size.height);\n      this._viewSize = size;\n      View._views.push(this);\n      View._viewsById[this._id] = this;\n      (this._matrix = new Matrix())._owner = this;\n      if (!View._focused) View._focused = this;\n      this._frameItems = {};\n      this._frameItemCount = 0;\n      this._itemEvents = {\n        native: {},\n        virtual: {}\n      };\n      this._autoUpdate = !paper.agent.node;\n      this._needsUpdate = false;\n    },\n    remove: function () {\n      if (!this._project) return false;\n      if (View._focused === this) View._focused = null;\n      View._views.splice(View._views.indexOf(this), 1);\n      delete View._viewsById[this._id];\n      var project = this._project;\n      if (project._view === this) project._view = null;\n      DomEvent.remove(this._element, this._viewEvents);\n      DomEvent.remove(window, this._windowEvents);\n      this._element = this._project = null;\n      this.off('frame');\n      this._animate = false;\n      this._frameItems = {};\n      return true;\n    },\n    _events: Base.each(Item._itemHandlers.concat(['onResize', 'onKeyDown', 'onKeyUp']), function (name) {\n      this[name] = {};\n    }, {\n      onFrame: {\n        install: function () {\n          this.play();\n        },\n        uninstall: function () {\n          this.pause();\n        }\n      }\n    }),\n    _animate: false,\n    _time: 0,\n    _count: 0,\n    getAutoUpdate: function () {\n      return this._autoUpdate;\n    },\n    setAutoUpdate: function (autoUpdate) {\n      this._autoUpdate = autoUpdate;\n      if (autoUpdate) this.requestUpdate();\n    },\n    update: function () {},\n    draw: function () {\n      this.update();\n    },\n    requestUpdate: function () {\n      if (!this._requested) {\n        var that = this;\n        DomEvent.requestAnimationFrame(function () {\n          that._requested = false;\n          if (that._animate) {\n            that.requestUpdate();\n            var element = that._element;\n            if ((!DomElement.getPrefixed(document, 'hidden') || PaperScope.getAttribute(element, 'keepalive') === 'true') && DomElement.isInView(element)) {\n              that._handleFrame();\n            }\n          }\n          if (that._autoUpdate) that.update();\n        });\n        this._requested = true;\n      }\n    },\n    play: function () {\n      this._animate = true;\n      this.requestUpdate();\n    },\n    pause: function () {\n      this._animate = false;\n    },\n    _handleFrame: function () {\n      paper = this._scope;\n      var now = Date.now() / 1000,\n        delta = this._last ? now - this._last : 0;\n      this._last = now;\n      this.emit('frame', new Base({\n        delta: delta,\n        time: this._time += delta,\n        count: this._count++\n      }));\n      if (this._stats) this._stats.update();\n    },\n    _animateItem: function (item, animate) {\n      var items = this._frameItems;\n      if (animate) {\n        items[item._id] = {\n          item: item,\n          time: 0,\n          count: 0\n        };\n        if (++this._frameItemCount === 1) this.on('frame', this._handleFrameItems);\n      } else {\n        delete items[item._id];\n        if (--this._frameItemCount === 0) {\n          this.off('frame', this._handleFrameItems);\n        }\n      }\n    },\n    _handleFrameItems: function (event) {\n      for (var i in this._frameItems) {\n        var entry = this._frameItems[i];\n        entry.item.emit('frame', new Base(event, {\n          time: entry.time += event.delta,\n          count: entry.count++\n        }));\n      }\n    },\n    _changed: function () {\n      this._project._changed(4097);\n      this._bounds = this._decomposed = undefined;\n    },\n    getElement: function () {\n      return this._element;\n    },\n    getPixelRatio: function () {\n      return this._pixelRatio;\n    },\n    getResolution: function () {\n      return this._pixelRatio * 72;\n    },\n    getViewSize: function () {\n      var size = this._viewSize;\n      return new LinkedSize(size.width, size.height, this, 'setViewSize');\n    },\n    setViewSize: function () {\n      var size = Size.read(arguments),\n        delta = size.subtract(this._viewSize);\n      if (delta.isZero()) return;\n      this._setElementSize(size.width, size.height);\n      this._viewSize.set(size);\n      this._changed();\n      this.emit('resize', {\n        size: size,\n        delta: delta\n      });\n      if (this._autoUpdate) {\n        this.update();\n      }\n    },\n    _setElementSize: function (width, height) {\n      var element = this._element;\n      if (element) {\n        if (element.width !== width) element.width = width;\n        if (element.height !== height) element.height = height;\n      }\n    },\n    getBounds: function () {\n      if (!this._bounds) this._bounds = this._matrix.inverted()._transformBounds(new Rectangle(new Point(), this._viewSize));\n      return this._bounds;\n    },\n    getSize: function () {\n      return this.getBounds().getSize();\n    },\n    isVisible: function () {\n      return DomElement.isInView(this._element);\n    },\n    isInserted: function () {\n      return DomElement.isInserted(this._element);\n    },\n    getPixelSize: function (size) {\n      var element = this._element,\n        pixels;\n      if (element) {\n        var parent = element.parentNode,\n          temp = document.createElement('div');\n        temp.style.fontSize = size;\n        parent.appendChild(temp);\n        pixels = parseFloat(DomElement.getStyles(temp).fontSize);\n        parent.removeChild(temp);\n      } else {\n        pixels = parseFloat(pixels);\n      }\n      return pixels;\n    },\n    getTextWidth: function (font, lines) {\n      return 0;\n    }\n  }, Base.each(['rotate', 'scale', 'shear', 'skew'], function (key) {\n    var rotate = key === 'rotate';\n    this[key] = function () {\n      var args = arguments,\n        value = (rotate ? Base : Point).read(args),\n        center = Point.read(args, 0, {\n          readNull: true\n        });\n      return this.transform(new Matrix()[key](value, center || this.getCenter(true)));\n    };\n  }, {\n    _decompose: function () {\n      return this._decomposed || (this._decomposed = this._matrix.decompose());\n    },\n    translate: function () {\n      var mx = new Matrix();\n      return this.transform(mx.translate.apply(mx, arguments));\n    },\n    getCenter: function () {\n      return this.getBounds().getCenter();\n    },\n    setCenter: function () {\n      var center = Point.read(arguments);\n      this.translate(this.getCenter().subtract(center));\n    },\n    getZoom: function () {\n      var scaling = this._decompose().scaling;\n      return (scaling.x + scaling.y) / 2;\n    },\n    setZoom: function (zoom) {\n      this.transform(new Matrix().scale(zoom / this.getZoom(), this.getCenter()));\n    },\n    getRotation: function () {\n      return this._decompose().rotation;\n    },\n    setRotation: function (rotation) {\n      var current = this.getRotation();\n      if (current != null && rotation != null) {\n        this.rotate(rotation - current);\n      }\n    },\n    getScaling: function () {\n      var scaling = this._decompose().scaling;\n      return new LinkedPoint(scaling.x, scaling.y, this, 'setScaling');\n    },\n    setScaling: function () {\n      var current = this.getScaling(),\n        scaling = Point.read(arguments, 0, {\n          clone: true,\n          readNull: true\n        });\n      if (current && scaling) {\n        this.scale(scaling.x / current.x, scaling.y / current.y);\n      }\n    },\n    getMatrix: function () {\n      return this._matrix;\n    },\n    setMatrix: function () {\n      var matrix = this._matrix;\n      matrix.set.apply(matrix, arguments);\n    },\n    transform: function (matrix) {\n      this._matrix.append(matrix);\n    },\n    scrollBy: function () {\n      this.translate(Point.read(arguments).negate());\n    }\n  }), {\n    projectToView: function () {\n      return this._matrix._transformPoint(Point.read(arguments));\n    },\n    viewToProject: function () {\n      return this._matrix._inverseTransform(Point.read(arguments));\n    },\n    getEventPoint: function (event) {\n      return this.viewToProject(DomEvent.getOffset(event, this._element));\n    }\n  }, {\n    statics: {\n      _views: [],\n      _viewsById: {},\n      _id: 0,\n      create: function (project, element) {\n        if (document && typeof element === 'string') element = document.getElementById(element);\n        var ctor = window ? CanvasView : View;\n        return new ctor(project, element);\n      }\n    }\n  }, new function () {\n    if (!window) return;\n    var prevFocus,\n      tempFocus,\n      dragging = false,\n      mouseDown = false;\n    function getView(event) {\n      var target = DomEvent.getTarget(event);\n      return target.getAttribute && View._viewsById[target.getAttribute('id')];\n    }\n    function updateFocus() {\n      var view = View._focused;\n      if (!view || !view.isVisible()) {\n        for (var i = 0, l = View._views.length; i < l; i++) {\n          if ((view = View._views[i]).isVisible()) {\n            View._focused = tempFocus = view;\n            break;\n          }\n        }\n      }\n    }\n    function handleMouseMove(view, event, point) {\n      view._handleMouseEvent('mousemove', event, point);\n    }\n    var navigator = window.navigator,\n      mousedown,\n      mousemove,\n      mouseup;\n    if (navigator.pointerEnabled || navigator.msPointerEnabled) {\n      mousedown = 'pointerdown MSPointerDown';\n      mousemove = 'pointermove MSPointerMove';\n      mouseup = 'pointerup pointercancel MSPointerUp MSPointerCancel';\n    } else {\n      mousedown = 'touchstart';\n      mousemove = 'touchmove';\n      mouseup = 'touchend touchcancel';\n      if (!('ontouchstart' in window && navigator.userAgent.match(/mobile|tablet|ip(ad|hone|od)|android|silk/i))) {\n        mousedown += ' mousedown';\n        mousemove += ' mousemove';\n        mouseup += ' mouseup';\n      }\n    }\n    var viewEvents = {},\n      docEvents = {\n        mouseout: function (event) {\n          var view = View._focused,\n            target = DomEvent.getRelatedTarget(event);\n          if (view && (!target || target.nodeName === 'HTML')) {\n            var offset = DomEvent.getOffset(event, view._element),\n              x = offset.x,\n              abs = Math.abs,\n              ax = abs(x),\n              max = 1 << 25,\n              diff = ax - max;\n            offset.x = abs(diff) < ax ? diff * (x < 0 ? -1 : 1) : x;\n            handleMouseMove(view, event, view.viewToProject(offset));\n          }\n        },\n        scroll: updateFocus\n      };\n    viewEvents[mousedown] = function (event) {\n      var view = View._focused = getView(event);\n      if (!dragging) {\n        dragging = true;\n        view._handleMouseEvent('mousedown', event);\n      }\n    };\n    docEvents[mousemove] = function (event) {\n      var view = View._focused;\n      if (!mouseDown) {\n        var target = getView(event);\n        if (target) {\n          if (view !== target) {\n            if (view) handleMouseMove(view, event);\n            if (!prevFocus) prevFocus = view;\n            view = View._focused = tempFocus = target;\n          }\n        } else if (tempFocus && tempFocus === view) {\n          if (prevFocus && !prevFocus.isInserted()) prevFocus = null;\n          view = View._focused = prevFocus;\n          prevFocus = null;\n          updateFocus();\n        }\n      }\n      if (view) handleMouseMove(view, event);\n    };\n    docEvents[mousedown] = function () {\n      mouseDown = true;\n    };\n    docEvents[mouseup] = function (event) {\n      var view = View._focused;\n      if (view && dragging) view._handleMouseEvent('mouseup', event);\n      mouseDown = dragging = false;\n    };\n    DomEvent.add(document, docEvents);\n    DomEvent.add(window, {\n      load: updateFocus\n    });\n    var called = false,\n      prevented = false,\n      fallbacks = {\n        doubleclick: 'click',\n        mousedrag: 'mousemove'\n      },\n      wasInView = false,\n      overView,\n      downPoint,\n      lastPoint,\n      downItem,\n      overItem,\n      dragItem,\n      clickItem,\n      clickTime,\n      dblClick;\n    function emitMouseEvent(obj, target, type, event, point, prevPoint, stopItem) {\n      var stopped = false,\n        mouseEvent;\n      function emit(obj, type) {\n        if (obj.responds(type)) {\n          if (!mouseEvent) {\n            mouseEvent = new MouseEvent(type, event, point, target || obj, prevPoint ? point.subtract(prevPoint) : null);\n          }\n          if (obj.emit(type, mouseEvent)) {\n            called = true;\n            if (mouseEvent.prevented) prevented = true;\n            if (mouseEvent.stopped) return stopped = true;\n          }\n        } else {\n          var fallback = fallbacks[type];\n          if (fallback) return emit(obj, fallback);\n        }\n      }\n      while (obj && obj !== stopItem) {\n        if (emit(obj, type)) break;\n        obj = obj._parent;\n      }\n      return stopped;\n    }\n    function emitMouseEvents(view, hitItem, type, event, point, prevPoint) {\n      view._project.removeOn(type);\n      prevented = called = false;\n      return dragItem && emitMouseEvent(dragItem, null, type, event, point, prevPoint) || hitItem && hitItem !== dragItem && !hitItem.isDescendant(dragItem) && emitMouseEvent(hitItem, null, type === 'mousedrag' ? 'mousemove' : type, event, point, prevPoint, dragItem) || emitMouseEvent(view, dragItem || hitItem || view, type, event, point, prevPoint);\n    }\n    var itemEventsMap = {\n      mousedown: {\n        mousedown: 1,\n        mousedrag: 1,\n        click: 1,\n        doubleclick: 1\n      },\n      mouseup: {\n        mouseup: 1,\n        mousedrag: 1,\n        click: 1,\n        doubleclick: 1\n      },\n      mousemove: {\n        mousedrag: 1,\n        mousemove: 1,\n        mouseenter: 1,\n        mouseleave: 1\n      }\n    };\n    return {\n      _viewEvents: viewEvents,\n      _handleMouseEvent: function (type, event, point) {\n        var itemEvents = this._itemEvents,\n          hitItems = itemEvents.native[type],\n          nativeMove = type === 'mousemove',\n          tool = this._scope.tool,\n          view = this;\n        function responds(type) {\n          return itemEvents.virtual[type] || view.responds(type) || tool && tool.responds(type);\n        }\n        if (nativeMove && dragging && responds('mousedrag')) type = 'mousedrag';\n        if (!point) point = this.getEventPoint(event);\n        var inView = this.getBounds().contains(point),\n          hit = hitItems && inView && view._project.hitTest(point, {\n            tolerance: 0,\n            fill: true,\n            stroke: true\n          }),\n          hitItem = hit && hit.item || null,\n          handle = false,\n          mouse = {};\n        mouse[type.substr(5)] = true;\n        if (hitItems && hitItem !== overItem) {\n          if (overItem) {\n            emitMouseEvent(overItem, null, 'mouseleave', event, point);\n          }\n          if (hitItem) {\n            emitMouseEvent(hitItem, null, 'mouseenter', event, point);\n          }\n          overItem = hitItem;\n        }\n        if (wasInView ^ inView) {\n          emitMouseEvent(this, null, inView ? 'mouseenter' : 'mouseleave', event, point);\n          overView = inView ? this : null;\n          handle = true;\n        }\n        if ((inView || mouse.drag) && !point.equals(lastPoint)) {\n          emitMouseEvents(this, hitItem, nativeMove ? type : 'mousemove', event, point, lastPoint);\n          handle = true;\n        }\n        wasInView = inView;\n        if (mouse.down && inView || mouse.up && downPoint) {\n          emitMouseEvents(this, hitItem, type, event, point, downPoint);\n          if (mouse.down) {\n            dblClick = hitItem === clickItem && Date.now() - clickTime < 300;\n            downItem = clickItem = hitItem;\n            if (!prevented && hitItem) {\n              var item = hitItem;\n              while (item && !item.responds('mousedrag')) item = item._parent;\n              if (item) dragItem = hitItem;\n            }\n            downPoint = point;\n          } else if (mouse.up) {\n            if (!prevented && hitItem === downItem) {\n              clickTime = Date.now();\n              emitMouseEvents(this, hitItem, dblClick ? 'doubleclick' : 'click', event, point, downPoint);\n              dblClick = false;\n            }\n            downItem = dragItem = null;\n          }\n          wasInView = false;\n          handle = true;\n        }\n        lastPoint = point;\n        if (handle && tool) {\n          called = tool._handleMouseEvent(type, event, point, mouse) || called;\n        }\n        if (event.cancelable !== false && (called && !mouse.move || mouse.down && responds('mouseup'))) {\n          event.preventDefault();\n        }\n      },\n      _handleKeyEvent: function (type, event, key, character) {\n        var scope = this._scope,\n          tool = scope.tool,\n          keyEvent;\n        function emit(obj) {\n          if (obj.responds(type)) {\n            paper = scope;\n            obj.emit(type, keyEvent = keyEvent || new KeyEvent(type, event, key, character));\n          }\n        }\n        if (this.isVisible()) {\n          emit(this);\n          if (tool && tool.responds(type)) emit(tool);\n        }\n      },\n      _countItemEvent: function (type, sign) {\n        var itemEvents = this._itemEvents,\n          native = itemEvents.native,\n          virtual = itemEvents.virtual;\n        for (var key in itemEventsMap) {\n          native[key] = (native[key] || 0) + (itemEventsMap[key][type] || 0) * sign;\n        }\n        virtual[type] = (virtual[type] || 0) + sign;\n      },\n      statics: {\n        updateFocus: updateFocus,\n        _resetState: function () {\n          dragging = mouseDown = called = wasInView = false;\n          prevFocus = tempFocus = overView = downPoint = lastPoint = downItem = overItem = dragItem = clickItem = clickTime = dblClick = null;\n        }\n      }\n    };\n  }());\n  var CanvasView = View.extend({\n    _class: 'CanvasView',\n    initialize: function CanvasView(project, canvas) {\n      if (!(canvas instanceof window.HTMLCanvasElement)) {\n        var size = Size.read(arguments, 1);\n        if (size.isZero()) throw new Error('Cannot create CanvasView with the provided argument: ' + Base.slice(arguments, 1));\n        canvas = CanvasProvider.getCanvas(size);\n      }\n      var ctx = this._context = canvas.getContext('2d');\n      ctx.save();\n      this._pixelRatio = 1;\n      if (!/^off|false$/.test(PaperScope.getAttribute(canvas, 'hidpi'))) {\n        var deviceRatio = window.devicePixelRatio || 1,\n          backingStoreRatio = DomElement.getPrefixed(ctx, 'backingStorePixelRatio') || 1;\n        this._pixelRatio = deviceRatio / backingStoreRatio;\n      }\n      View.call(this, project, canvas);\n      this._needsUpdate = true;\n    },\n    remove: function remove() {\n      this._context.restore();\n      return remove.base.call(this);\n    },\n    _setElementSize: function _setElementSize(width, height) {\n      var pixelRatio = this._pixelRatio;\n      _setElementSize.base.call(this, width * pixelRatio, height * pixelRatio);\n      if (pixelRatio !== 1) {\n        var element = this._element,\n          ctx = this._context;\n        if (!PaperScope.hasAttribute(element, 'resize')) {\n          var style = element.style;\n          style.width = width + 'px';\n          style.height = height + 'px';\n        }\n        ctx.restore();\n        ctx.save();\n        ctx.scale(pixelRatio, pixelRatio);\n      }\n    },\n    getContext: function () {\n      return this._context;\n    },\n    getPixelSize: function getPixelSize(size) {\n      var agent = paper.agent,\n        pixels;\n      if (agent && agent.firefox) {\n        pixels = getPixelSize.base.call(this, size);\n      } else {\n        var ctx = this._context,\n          prevFont = ctx.font;\n        ctx.font = size + ' serif';\n        pixels = parseFloat(ctx.font);\n        ctx.font = prevFont;\n      }\n      return pixels;\n    },\n    getTextWidth: function (font, lines) {\n      var ctx = this._context,\n        prevFont = ctx.font,\n        width = 0;\n      ctx.font = font;\n      for (var i = 0, l = lines.length; i < l; i++) width = Math.max(width, ctx.measureText(lines[i]).width);\n      ctx.font = prevFont;\n      return width;\n    },\n    update: function () {\n      if (!this._needsUpdate) return false;\n      var project = this._project,\n        ctx = this._context,\n        size = this._viewSize;\n      ctx.clearRect(0, 0, size.width + 1, size.height + 1);\n      if (project) project.draw(ctx, this._matrix, this._pixelRatio);\n      this._needsUpdate = false;\n      return true;\n    }\n  });\n  var Event = Base.extend({\n    _class: 'Event',\n    initialize: function Event(event) {\n      this.event = event;\n      this.type = event && event.type;\n    },\n    prevented: false,\n    stopped: false,\n    preventDefault: function () {\n      this.prevented = true;\n      this.event.preventDefault();\n    },\n    stopPropagation: function () {\n      this.stopped = true;\n      this.event.stopPropagation();\n    },\n    stop: function () {\n      this.stopPropagation();\n      this.preventDefault();\n    },\n    getTimeStamp: function () {\n      return this.event.timeStamp;\n    },\n    getModifiers: function () {\n      return Key.modifiers;\n    }\n  });\n  var KeyEvent = Event.extend({\n    _class: 'KeyEvent',\n    initialize: function KeyEvent(type, event, key, character) {\n      this.type = type;\n      this.event = event;\n      this.key = key;\n      this.character = character;\n    },\n    toString: function () {\n      return \"{ type: '\" + this.type + \"', key: '\" + this.key + \"', character: '\" + this.character + \"', modifiers: \" + this.getModifiers() + \" }\";\n    }\n  });\n  var Key = new function () {\n    var keyLookup = {\n        '\\t': 'tab',\n        ' ': 'space',\n        '\\b': 'backspace',\n        '\\x7f': 'delete',\n        'Spacebar': 'space',\n        'Del': 'delete',\n        'Win': 'meta',\n        'Esc': 'escape'\n      },\n      charLookup = {\n        'tab': '\\t',\n        'space': ' ',\n        'enter': '\\r'\n      },\n      keyMap = {},\n      charMap = {},\n      metaFixMap,\n      downKey,\n      modifiers = new Base({\n        shift: false,\n        control: false,\n        alt: false,\n        meta: false,\n        capsLock: false,\n        space: false\n      }).inject({\n        option: {\n          get: function () {\n            return this.alt;\n          }\n        },\n        command: {\n          get: function () {\n            var agent = paper && paper.agent;\n            return agent && agent.mac ? this.meta : this.control;\n          }\n        }\n      });\n    function getKey(event) {\n      var key = event.key || event.keyIdentifier;\n      key = /^U\\+/.test(key) ? String.fromCharCode(parseInt(key.substr(2), 16)) : /^Arrow[A-Z]/.test(key) ? key.substr(5) : key === 'Unidentified' || key === undefined ? String.fromCharCode(event.keyCode) : key;\n      return keyLookup[key] || (key.length > 1 ? Base.hyphenate(key) : key.toLowerCase());\n    }\n    function handleKey(down, key, character, event) {\n      var type = down ? 'keydown' : 'keyup',\n        view = View._focused,\n        name;\n      keyMap[key] = down;\n      if (down) {\n        charMap[key] = character;\n      } else {\n        delete charMap[key];\n      }\n      if (key.length > 1 && (name = Base.camelize(key)) in modifiers) {\n        modifiers[name] = down;\n        var agent = paper && paper.agent;\n        if (name === 'meta' && agent && agent.mac) {\n          if (down) {\n            metaFixMap = {};\n          } else {\n            for (var k in metaFixMap) {\n              if (k in charMap) handleKey(false, k, metaFixMap[k], event);\n            }\n            metaFixMap = null;\n          }\n        }\n      } else if (down && metaFixMap) {\n        metaFixMap[key] = character;\n      }\n      if (view) {\n        view._handleKeyEvent(down ? 'keydown' : 'keyup', event, key, character);\n      }\n    }\n    DomEvent.add(document, {\n      keydown: function (event) {\n        var key = getKey(event),\n          agent = paper && paper.agent;\n        if (key.length > 1 || agent && agent.chrome && (event.altKey || agent.mac && event.metaKey || !agent.mac && event.ctrlKey)) {\n          handleKey(true, key, charLookup[key] || (key.length > 1 ? '' : key), event);\n        } else {\n          downKey = key;\n        }\n      },\n      keypress: function (event) {\n        if (downKey) {\n          var key = getKey(event),\n            code = event.charCode,\n            character = code >= 32 ? String.fromCharCode(code) : key.length > 1 ? '' : key;\n          if (key !== downKey) {\n            key = character.toLowerCase();\n          }\n          handleKey(true, key, character, event);\n          downKey = null;\n        }\n      },\n      keyup: function (event) {\n        var key = getKey(event);\n        if (key in charMap) handleKey(false, key, charMap[key], event);\n      }\n    });\n    DomEvent.add(window, {\n      blur: function (event) {\n        for (var key in charMap) handleKey(false, key, charMap[key], event);\n      }\n    });\n    return {\n      modifiers: modifiers,\n      isDown: function (key) {\n        return !!keyMap[key];\n      }\n    };\n  }();\n  var MouseEvent = Event.extend({\n    _class: 'MouseEvent',\n    initialize: function MouseEvent(type, event, point, target, delta) {\n      this.type = type;\n      this.event = event;\n      this.point = point;\n      this.target = target;\n      this.delta = delta;\n    },\n    toString: function () {\n      return \"{ type: '\" + this.type + \"', point: \" + this.point + ', target: ' + this.target + (this.delta ? ', delta: ' + this.delta : '') + ', modifiers: ' + this.getModifiers() + ' }';\n    }\n  });\n  var ToolEvent = Event.extend({\n    _class: 'ToolEvent',\n    _item: null,\n    initialize: function ToolEvent(tool, type, event) {\n      this.tool = tool;\n      this.type = type;\n      this.event = event;\n    },\n    _choosePoint: function (point, toolPoint) {\n      return point ? point : toolPoint ? toolPoint.clone() : null;\n    },\n    getPoint: function () {\n      return this._choosePoint(this._point, this.tool._point);\n    },\n    setPoint: function (point) {\n      this._point = point;\n    },\n    getLastPoint: function () {\n      return this._choosePoint(this._lastPoint, this.tool._lastPoint);\n    },\n    setLastPoint: function (lastPoint) {\n      this._lastPoint = lastPoint;\n    },\n    getDownPoint: function () {\n      return this._choosePoint(this._downPoint, this.tool._downPoint);\n    },\n    setDownPoint: function (downPoint) {\n      this._downPoint = downPoint;\n    },\n    getMiddlePoint: function () {\n      if (!this._middlePoint && this.tool._lastPoint) {\n        return this.tool._point.add(this.tool._lastPoint).divide(2);\n      }\n      return this._middlePoint;\n    },\n    setMiddlePoint: function (middlePoint) {\n      this._middlePoint = middlePoint;\n    },\n    getDelta: function () {\n      return !this._delta && this.tool._lastPoint ? this.tool._point.subtract(this.tool._lastPoint) : this._delta;\n    },\n    setDelta: function (delta) {\n      this._delta = delta;\n    },\n    getCount: function () {\n      return this.tool[/^mouse(down|up)$/.test(this.type) ? '_downCount' : '_moveCount'];\n    },\n    setCount: function (count) {\n      this.tool[/^mouse(down|up)$/.test(this.type) ? 'downCount' : 'count'] = count;\n    },\n    getItem: function () {\n      if (!this._item) {\n        var result = this.tool._scope.project.hitTest(this.getPoint());\n        if (result) {\n          var item = result.item,\n            parent = item._parent;\n          while (/^(Group|CompoundPath)$/.test(parent._class)) {\n            item = parent;\n            parent = parent._parent;\n          }\n          this._item = item;\n        }\n      }\n      return this._item;\n    },\n    setItem: function (item) {\n      this._item = item;\n    },\n    toString: function () {\n      return '{ type: ' + this.type + ', point: ' + this.getPoint() + ', count: ' + this.getCount() + ', modifiers: ' + this.getModifiers() + ' }';\n    }\n  });\n  var Tool = PaperScopeItem.extend({\n    _class: 'Tool',\n    _list: 'tools',\n    _reference: 'tool',\n    _events: ['onMouseDown', 'onMouseUp', 'onMouseDrag', 'onMouseMove', 'onActivate', 'onDeactivate', 'onEditOptions', 'onKeyDown', 'onKeyUp'],\n    initialize: function Tool(props) {\n      PaperScopeItem.call(this);\n      this._moveCount = -1;\n      this._downCount = -1;\n      this.set(props);\n    },\n    getMinDistance: function () {\n      return this._minDistance;\n    },\n    setMinDistance: function (minDistance) {\n      this._minDistance = minDistance;\n      if (minDistance != null && this._maxDistance != null && minDistance > this._maxDistance) {\n        this._maxDistance = minDistance;\n      }\n    },\n    getMaxDistance: function () {\n      return this._maxDistance;\n    },\n    setMaxDistance: function (maxDistance) {\n      this._maxDistance = maxDistance;\n      if (this._minDistance != null && maxDistance != null && maxDistance < this._minDistance) {\n        this._minDistance = maxDistance;\n      }\n    },\n    getFixedDistance: function () {\n      return this._minDistance == this._maxDistance ? this._minDistance : null;\n    },\n    setFixedDistance: function (distance) {\n      this._minDistance = this._maxDistance = distance;\n    },\n    _handleMouseEvent: function (type, event, point, mouse) {\n      paper = this._scope;\n      if (mouse.drag && !this.responds(type)) type = 'mousemove';\n      var move = mouse.move || mouse.drag,\n        responds = this.responds(type),\n        minDistance = this.minDistance,\n        maxDistance = this.maxDistance,\n        called = false,\n        tool = this;\n      function update(minDistance, maxDistance) {\n        var pt = point,\n          toolPoint = move ? tool._point : tool._downPoint || pt;\n        if (move) {\n          if (tool._moveCount >= 0 && pt.equals(toolPoint)) {\n            return false;\n          }\n          if (toolPoint && (minDistance != null || maxDistance != null)) {\n            var vector = pt.subtract(toolPoint),\n              distance = vector.getLength();\n            if (distance < (minDistance || 0)) return false;\n            if (maxDistance) {\n              pt = toolPoint.add(vector.normalize(Math.min(distance, maxDistance)));\n            }\n          }\n          tool._moveCount++;\n        }\n        tool._point = pt;\n        tool._lastPoint = toolPoint || pt;\n        if (mouse.down) {\n          tool._moveCount = -1;\n          tool._downPoint = pt;\n          tool._downCount++;\n        }\n        return true;\n      }\n      function emit() {\n        if (responds) {\n          called = tool.emit(type, new ToolEvent(tool, type, event)) || called;\n        }\n      }\n      if (mouse.down) {\n        update();\n        emit();\n      } else if (mouse.up) {\n        update(null, maxDistance);\n        emit();\n      } else if (responds) {\n        while (update(minDistance, maxDistance)) emit();\n      }\n      return called;\n    }\n  });\n  var Tween = Base.extend(Emitter, {\n    _class: 'Tween',\n    statics: {\n      easings: new Base({\n        linear: function (t) {\n          return t;\n        },\n        easeInQuad: function (t) {\n          return t * t;\n        },\n        easeOutQuad: function (t) {\n          return t * (2 - t);\n        },\n        easeInOutQuad: function (t) {\n          return t < 0.5 ? 2 * t * t : -1 + 2 * (2 - t) * t;\n        },\n        easeInCubic: function (t) {\n          return t * t * t;\n        },\n        easeOutCubic: function (t) {\n          return --t * t * t + 1;\n        },\n        easeInOutCubic: function (t) {\n          return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n        },\n        easeInQuart: function (t) {\n          return t * t * t * t;\n        },\n        easeOutQuart: function (t) {\n          return 1 - --t * t * t * t;\n        },\n        easeInOutQuart: function (t) {\n          return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n        },\n        easeInQuint: function (t) {\n          return t * t * t * t * t;\n        },\n        easeOutQuint: function (t) {\n          return 1 + --t * t * t * t * t;\n        },\n        easeInOutQuint: function (t) {\n          return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n        }\n      })\n    },\n    initialize: function Tween(object, from, to, duration, easing, start) {\n      this.object = object;\n      var type = typeof easing;\n      var isFunction = type === 'function';\n      this.type = isFunction ? type : type === 'string' ? easing : 'linear';\n      this.easing = isFunction ? easing : Tween.easings[this.type];\n      this.duration = duration;\n      this.running = false;\n      this._then = null;\n      this._startTime = null;\n      var state = from || to;\n      this._keys = state ? Object.keys(state) : [];\n      this._parsedKeys = this._parseKeys(this._keys);\n      this._from = state && this._getState(from);\n      this._to = state && this._getState(to);\n      if (start !== false) {\n        this.start();\n      }\n    },\n    then: function (then) {\n      this._then = then;\n      return this;\n    },\n    start: function () {\n      this._startTime = null;\n      this.running = true;\n      return this;\n    },\n    stop: function () {\n      this.running = false;\n      return this;\n    },\n    update: function (progress) {\n      if (this.running) {\n        if (progress >= 1) {\n          progress = 1;\n          this.running = false;\n        }\n        var factor = this.easing(progress),\n          keys = this._keys,\n          getValue = function (value) {\n            return typeof value === 'function' ? value(factor, progress) : value;\n          };\n        for (var i = 0, l = keys && keys.length; i < l; i++) {\n          var key = keys[i],\n            from = getValue(this._from[key]),\n            to = getValue(this._to[key]),\n            value = from && to && from.__add && to.__add ? to.__subtract(from).__multiply(factor).__add(from) : (to - from) * factor + from;\n          this._setProperty(this._parsedKeys[key], value);\n        }\n        if (this.responds('update')) {\n          this.emit('update', new Base({\n            progress: progress,\n            factor: factor\n          }));\n        }\n        if (!this.running && this._then) {\n          this._then(this.object);\n        }\n      }\n      return this;\n    },\n    _events: {\n      onUpdate: {}\n    },\n    _handleFrame: function (time) {\n      var startTime = this._startTime,\n        progress = startTime ? (time - startTime) / this.duration : 0;\n      if (!startTime) {\n        this._startTime = time;\n      }\n      this.update(progress);\n    },\n    _getState: function (state) {\n      var keys = this._keys,\n        result = {};\n      for (var i = 0, l = keys.length; i < l; i++) {\n        var key = keys[i],\n          path = this._parsedKeys[key],\n          current = this._getProperty(path),\n          value;\n        if (state) {\n          var resolved = this._resolveValue(current, state[key]);\n          this._setProperty(path, resolved);\n          value = this._getProperty(path);\n          value = value && value.clone ? value.clone() : value;\n          this._setProperty(path, current);\n        } else {\n          value = current && current.clone ? current.clone() : current;\n        }\n        result[key] = value;\n      }\n      return result;\n    },\n    _resolveValue: function (current, value) {\n      if (value) {\n        if (Array.isArray(value) && value.length === 2) {\n          var operator = value[0];\n          return operator && operator.match && operator.match(/^[+\\-\\*\\/]=/) ? this._calculate(current, operator[0], value[1]) : value;\n        } else if (typeof value === 'string') {\n          var match = value.match(/^[+\\-*/]=(.*)/);\n          if (match) {\n            var parsed = JSON.parse(match[1].replace(/(['\"])?([a-zA-Z0-9_]+)(['\"])?:/g, '\"$2\": '));\n            return this._calculate(current, value[0], parsed);\n          }\n        }\n      }\n      return value;\n    },\n    _calculate: function (left, operator, right) {\n      return paper.PaperScript.calculateBinary(left, operator, right);\n    },\n    _parseKeys: function (keys) {\n      var parsed = {};\n      for (var i = 0, l = keys.length; i < l; i++) {\n        var key = keys[i],\n          path = key.replace(/\\.([^.]*)/g, '/$1').replace(/\\[['\"]?([^'\"\\]]*)['\"]?\\]/g, '/$1');\n        parsed[key] = path.split('/');\n      }\n      return parsed;\n    },\n    _getProperty: function (path, offset) {\n      var obj = this.object;\n      for (var i = 0, l = path.length - (offset || 0); i < l && obj; i++) {\n        obj = obj[path[i]];\n      }\n      return obj;\n    },\n    _setProperty: function (path, value) {\n      var dest = this._getProperty(path, 1);\n      if (dest) {\n        dest[path[path.length - 1]] = value;\n      }\n    }\n  });\n  var Http = {\n    request: function (options) {\n      var xhr = new self.XMLHttpRequest();\n      xhr.open((options.method || 'get').toUpperCase(), options.url, Base.pick(options.async, true));\n      if (options.mimeType) xhr.overrideMimeType(options.mimeType);\n      xhr.onload = function () {\n        var status = xhr.status;\n        if (status === 0 || status === 200) {\n          if (options.onLoad) {\n            options.onLoad.call(xhr, xhr.responseText);\n          }\n        } else {\n          xhr.onerror();\n        }\n      };\n      xhr.onerror = function () {\n        var status = xhr.status,\n          message = 'Could not load \"' + options.url + '\" (Status: ' + status + ')';\n        if (options.onError) {\n          options.onError(message, status);\n        } else {\n          throw new Error(message);\n        }\n      };\n      return xhr.send(null);\n    }\n  };\n  var CanvasProvider = Base.exports.CanvasProvider = {\n    canvases: [],\n    getCanvas: function (width, height) {\n      if (!window) return null;\n      var canvas,\n        clear = true;\n      if (typeof width === 'object') {\n        height = width.height;\n        width = width.width;\n      }\n      if (this.canvases.length) {\n        canvas = this.canvases.pop();\n      } else {\n        canvas = document.createElement('canvas');\n        clear = false;\n      }\n      var ctx = canvas.getContext('2d');\n      if (!ctx) {\n        throw new Error('Canvas ' + canvas + ' is unable to provide a 2D context.');\n      }\n      if (canvas.width === width && canvas.height === height) {\n        if (clear) ctx.clearRect(0, 0, width + 1, height + 1);\n      } else {\n        canvas.width = width;\n        canvas.height = height;\n      }\n      ctx.save();\n      return canvas;\n    },\n    getContext: function (width, height) {\n      var canvas = this.getCanvas(width, height);\n      return canvas ? canvas.getContext('2d') : null;\n    },\n    release: function (obj) {\n      var canvas = obj && obj.canvas ? obj.canvas : obj;\n      if (canvas && canvas.getContext) {\n        canvas.getContext('2d').restore();\n        this.canvases.push(canvas);\n      }\n    }\n  };\n  var BlendMode = new function () {\n    var min = Math.min,\n      max = Math.max,\n      abs = Math.abs,\n      sr,\n      sg,\n      sb,\n      sa,\n      br,\n      bg,\n      bb,\n      ba,\n      dr,\n      dg,\n      db;\n    function getLum(r, g, b) {\n      return 0.2989 * r + 0.587 * g + 0.114 * b;\n    }\n    function setLum(r, g, b, l) {\n      var d = l - getLum(r, g, b);\n      dr = r + d;\n      dg = g + d;\n      db = b + d;\n      var l = getLum(dr, dg, db),\n        mn = min(dr, dg, db),\n        mx = max(dr, dg, db);\n      if (mn < 0) {\n        var lmn = l - mn;\n        dr = l + (dr - l) * l / lmn;\n        dg = l + (dg - l) * l / lmn;\n        db = l + (db - l) * l / lmn;\n      }\n      if (mx > 255) {\n        var ln = 255 - l,\n          mxl = mx - l;\n        dr = l + (dr - l) * ln / mxl;\n        dg = l + (dg - l) * ln / mxl;\n        db = l + (db - l) * ln / mxl;\n      }\n    }\n    function getSat(r, g, b) {\n      return max(r, g, b) - min(r, g, b);\n    }\n    function setSat(r, g, b, s) {\n      var col = [r, g, b],\n        mx = max(r, g, b),\n        mn = min(r, g, b),\n        md;\n      mn = mn === r ? 0 : mn === g ? 1 : 2;\n      mx = mx === r ? 0 : mx === g ? 1 : 2;\n      md = min(mn, mx) === 0 ? max(mn, mx) === 1 ? 2 : 1 : 0;\n      if (col[mx] > col[mn]) {\n        col[md] = (col[md] - col[mn]) * s / (col[mx] - col[mn]);\n        col[mx] = s;\n      } else {\n        col[md] = col[mx] = 0;\n      }\n      col[mn] = 0;\n      dr = col[0];\n      dg = col[1];\n      db = col[2];\n    }\n    var modes = {\n      multiply: function () {\n        dr = br * sr / 255;\n        dg = bg * sg / 255;\n        db = bb * sb / 255;\n      },\n      screen: function () {\n        dr = br + sr - br * sr / 255;\n        dg = bg + sg - bg * sg / 255;\n        db = bb + sb - bb * sb / 255;\n      },\n      overlay: function () {\n        dr = br < 128 ? 2 * br * sr / 255 : 255 - 2 * (255 - br) * (255 - sr) / 255;\n        dg = bg < 128 ? 2 * bg * sg / 255 : 255 - 2 * (255 - bg) * (255 - sg) / 255;\n        db = bb < 128 ? 2 * bb * sb / 255 : 255 - 2 * (255 - bb) * (255 - sb) / 255;\n      },\n      'soft-light': function () {\n        var t = sr * br / 255;\n        dr = t + br * (255 - (255 - br) * (255 - sr) / 255 - t) / 255;\n        t = sg * bg / 255;\n        dg = t + bg * (255 - (255 - bg) * (255 - sg) / 255 - t) / 255;\n        t = sb * bb / 255;\n        db = t + bb * (255 - (255 - bb) * (255 - sb) / 255 - t) / 255;\n      },\n      'hard-light': function () {\n        dr = sr < 128 ? 2 * sr * br / 255 : 255 - 2 * (255 - sr) * (255 - br) / 255;\n        dg = sg < 128 ? 2 * sg * bg / 255 : 255 - 2 * (255 - sg) * (255 - bg) / 255;\n        db = sb < 128 ? 2 * sb * bb / 255 : 255 - 2 * (255 - sb) * (255 - bb) / 255;\n      },\n      'color-dodge': function () {\n        dr = br === 0 ? 0 : sr === 255 ? 255 : min(255, 255 * br / (255 - sr));\n        dg = bg === 0 ? 0 : sg === 255 ? 255 : min(255, 255 * bg / (255 - sg));\n        db = bb === 0 ? 0 : sb === 255 ? 255 : min(255, 255 * bb / (255 - sb));\n      },\n      'color-burn': function () {\n        dr = br === 255 ? 255 : sr === 0 ? 0 : max(0, 255 - (255 - br) * 255 / sr);\n        dg = bg === 255 ? 255 : sg === 0 ? 0 : max(0, 255 - (255 - bg) * 255 / sg);\n        db = bb === 255 ? 255 : sb === 0 ? 0 : max(0, 255 - (255 - bb) * 255 / sb);\n      },\n      darken: function () {\n        dr = br < sr ? br : sr;\n        dg = bg < sg ? bg : sg;\n        db = bb < sb ? bb : sb;\n      },\n      lighten: function () {\n        dr = br > sr ? br : sr;\n        dg = bg > sg ? bg : sg;\n        db = bb > sb ? bb : sb;\n      },\n      difference: function () {\n        dr = br - sr;\n        if (dr < 0) dr = -dr;\n        dg = bg - sg;\n        if (dg < 0) dg = -dg;\n        db = bb - sb;\n        if (db < 0) db = -db;\n      },\n      exclusion: function () {\n        dr = br + sr * (255 - br - br) / 255;\n        dg = bg + sg * (255 - bg - bg) / 255;\n        db = bb + sb * (255 - bb - bb) / 255;\n      },\n      hue: function () {\n        setSat(sr, sg, sb, getSat(br, bg, bb));\n        setLum(dr, dg, db, getLum(br, bg, bb));\n      },\n      saturation: function () {\n        setSat(br, bg, bb, getSat(sr, sg, sb));\n        setLum(dr, dg, db, getLum(br, bg, bb));\n      },\n      luminosity: function () {\n        setLum(br, bg, bb, getLum(sr, sg, sb));\n      },\n      color: function () {\n        setLum(sr, sg, sb, getLum(br, bg, bb));\n      },\n      add: function () {\n        dr = min(br + sr, 255);\n        dg = min(bg + sg, 255);\n        db = min(bb + sb, 255);\n      },\n      subtract: function () {\n        dr = max(br - sr, 0);\n        dg = max(bg - sg, 0);\n        db = max(bb - sb, 0);\n      },\n      average: function () {\n        dr = (br + sr) / 2;\n        dg = (bg + sg) / 2;\n        db = (bb + sb) / 2;\n      },\n      negation: function () {\n        dr = 255 - abs(255 - sr - br);\n        dg = 255 - abs(255 - sg - bg);\n        db = 255 - abs(255 - sb - bb);\n      }\n    };\n    var nativeModes = this.nativeModes = Base.each(['source-over', 'source-in', 'source-out', 'source-atop', 'destination-over', 'destination-in', 'destination-out', 'destination-atop', 'lighter', 'darker', 'copy', 'xor'], function (mode) {\n      this[mode] = true;\n    }, {});\n    var ctx = CanvasProvider.getContext(1, 1);\n    if (ctx) {\n      Base.each(modes, function (func, mode) {\n        var darken = mode === 'darken',\n          ok = false;\n        ctx.save();\n        try {\n          ctx.fillStyle = darken ? '#300' : '#a00';\n          ctx.fillRect(0, 0, 1, 1);\n          ctx.globalCompositeOperation = mode;\n          if (ctx.globalCompositeOperation === mode) {\n            ctx.fillStyle = darken ? '#a00' : '#300';\n            ctx.fillRect(0, 0, 1, 1);\n            ok = ctx.getImageData(0, 0, 1, 1).data[0] !== darken ? 170 : 51;\n          }\n        } catch (e) {}\n        ctx.restore();\n        nativeModes[mode] = ok;\n      });\n      CanvasProvider.release(ctx);\n    }\n    this.process = function (mode, srcContext, dstContext, alpha, offset) {\n      var srcCanvas = srcContext.canvas,\n        normal = mode === 'normal';\n      if (normal || nativeModes[mode]) {\n        dstContext.save();\n        dstContext.setTransform(1, 0, 0, 1, 0, 0);\n        dstContext.globalAlpha = alpha;\n        if (!normal) dstContext.globalCompositeOperation = mode;\n        dstContext.drawImage(srcCanvas, offset.x, offset.y);\n        dstContext.restore();\n      } else {\n        var process = modes[mode];\n        if (!process) return;\n        var dstData = dstContext.getImageData(offset.x, offset.y, srcCanvas.width, srcCanvas.height),\n          dst = dstData.data,\n          src = srcContext.getImageData(0, 0, srcCanvas.width, srcCanvas.height).data;\n        for (var i = 0, l = dst.length; i < l; i += 4) {\n          sr = src[i];\n          br = dst[i];\n          sg = src[i + 1];\n          bg = dst[i + 1];\n          sb = src[i + 2];\n          bb = dst[i + 2];\n          sa = src[i + 3];\n          ba = dst[i + 3];\n          process();\n          var a1 = sa * alpha / 255,\n            a2 = 1 - a1;\n          dst[i] = a1 * dr + a2 * br;\n          dst[i + 1] = a1 * dg + a2 * bg;\n          dst[i + 2] = a1 * db + a2 * bb;\n          dst[i + 3] = sa * alpha + a2 * ba;\n        }\n        dstContext.putImageData(dstData, offset.x, offset.y);\n      }\n    };\n  }();\n  var SvgElement = new function () {\n    var svg = 'http://www.w3.org/2000/svg',\n      xmlns = 'http://www.w3.org/2000/xmlns',\n      xlink = 'http://www.w3.org/1999/xlink',\n      attributeNamespace = {\n        href: xlink,\n        xlink: xmlns,\n        xmlns: xmlns + '/',\n        'xmlns:xlink': xmlns + '/'\n      };\n    function create(tag, attributes, formatter) {\n      return set(document.createElementNS(svg, tag), attributes, formatter);\n    }\n    function get(node, name) {\n      var namespace = attributeNamespace[name],\n        value = namespace ? node.getAttributeNS(namespace, name) : node.getAttribute(name);\n      return value === 'null' ? null : value;\n    }\n    function set(node, attributes, formatter) {\n      for (var name in attributes) {\n        var value = attributes[name],\n          namespace = attributeNamespace[name];\n        if (typeof value === 'number' && formatter) value = formatter.number(value);\n        if (namespace) {\n          node.setAttributeNS(namespace, name, value);\n        } else {\n          node.setAttribute(name, value);\n        }\n      }\n      return node;\n    }\n    return {\n      svg: svg,\n      xmlns: xmlns,\n      xlink: xlink,\n      create: create,\n      get: get,\n      set: set\n    };\n  }();\n  var SvgStyles = Base.each({\n    fillColor: ['fill', 'color'],\n    fillRule: ['fill-rule', 'string'],\n    strokeColor: ['stroke', 'color'],\n    strokeWidth: ['stroke-width', 'number'],\n    strokeCap: ['stroke-linecap', 'string'],\n    strokeJoin: ['stroke-linejoin', 'string'],\n    strokeScaling: ['vector-effect', 'lookup', {\n      true: 'none',\n      false: 'non-scaling-stroke'\n    }, function (item, value) {\n      return !value && (item instanceof PathItem || item instanceof Shape || item instanceof TextItem);\n    }],\n    miterLimit: ['stroke-miterlimit', 'number'],\n    dashArray: ['stroke-dasharray', 'array'],\n    dashOffset: ['stroke-dashoffset', 'number'],\n    fontFamily: ['font-family', 'string'],\n    fontWeight: ['font-weight', 'string'],\n    fontSize: ['font-size', 'number'],\n    justification: ['text-anchor', 'lookup', {\n      left: 'start',\n      center: 'middle',\n      right: 'end'\n    }],\n    opacity: ['opacity', 'number'],\n    blendMode: ['mix-blend-mode', 'style']\n  }, function (entry, key) {\n    var part = Base.capitalize(key),\n      lookup = entry[2];\n    this[key] = {\n      type: entry[1],\n      property: key,\n      attribute: entry[0],\n      toSVG: lookup,\n      fromSVG: lookup && Base.each(lookup, function (value, name) {\n        this[value] = name;\n      }, {}),\n      exportFilter: entry[3],\n      get: 'get' + part,\n      set: 'set' + part\n    };\n  }, {});\n  new function () {\n    var formatter;\n    function getTransform(matrix, coordinates, center) {\n      var attrs = new Base(),\n        trans = matrix.getTranslation();\n      if (coordinates) {\n        var point;\n        if (matrix.isInvertible()) {\n          matrix = matrix._shiftless();\n          point = matrix._inverseTransform(trans);\n          trans = null;\n        } else {\n          point = new Point();\n        }\n        attrs[center ? 'cx' : 'x'] = point.x;\n        attrs[center ? 'cy' : 'y'] = point.y;\n      }\n      if (!matrix.isIdentity()) {\n        var decomposed = matrix.decompose();\n        if (decomposed) {\n          var parts = [],\n            angle = decomposed.rotation,\n            scale = decomposed.scaling,\n            skew = decomposed.skewing;\n          if (trans && !trans.isZero()) parts.push('translate(' + formatter.point(trans) + ')');\n          if (angle) parts.push('rotate(' + formatter.number(angle) + ')');\n          if (!Numerical.isZero(scale.x - 1) || !Numerical.isZero(scale.y - 1)) parts.push('scale(' + formatter.point(scale) + ')');\n          if (skew.x) parts.push('skewX(' + formatter.number(skew.x) + ')');\n          if (skew.y) parts.push('skewY(' + formatter.number(skew.y) + ')');\n          attrs.transform = parts.join(' ');\n        } else {\n          attrs.transform = 'matrix(' + matrix.getValues().join(',') + ')';\n        }\n      }\n      return attrs;\n    }\n    function exportGroup(item, options) {\n      var attrs = getTransform(item._matrix),\n        children = item._children;\n      var node = SvgElement.create('g', attrs, formatter);\n      for (var i = 0, l = children.length; i < l; i++) {\n        var child = children[i];\n        var childNode = exportSVG(child, options);\n        if (childNode) {\n          if (child.isClipMask()) {\n            var clip = SvgElement.create('clipPath');\n            clip.appendChild(childNode);\n            setDefinition(child, clip, 'clip');\n            SvgElement.set(node, {\n              'clip-path': 'url(#' + clip.id + ')'\n            });\n          } else {\n            node.appendChild(childNode);\n          }\n        }\n      }\n      return node;\n    }\n    function exportRaster(item, options) {\n      var attrs = getTransform(item._matrix, true),\n        size = item.getSize(),\n        image = item.getImage();\n      attrs.x -= size.width / 2;\n      attrs.y -= size.height / 2;\n      attrs.width = size.width;\n      attrs.height = size.height;\n      attrs.href = options.embedImages == false && image && image.src || item.toDataURL();\n      return SvgElement.create('image', attrs, formatter);\n    }\n    function exportPath(item, options) {\n      var matchShapes = options.matchShapes;\n      if (matchShapes) {\n        var shape = item.toShape(false);\n        if (shape) return exportShape(shape, options);\n      }\n      var segments = item._segments,\n        length = segments.length,\n        type,\n        attrs = getTransform(item._matrix);\n      if (matchShapes && length >= 2 && !item.hasHandles()) {\n        if (length > 2) {\n          type = item._closed ? 'polygon' : 'polyline';\n          var parts = [];\n          for (var i = 0; i < length; i++) {\n            parts.push(formatter.point(segments[i]._point));\n          }\n          attrs.points = parts.join(' ');\n        } else {\n          type = 'line';\n          var start = segments[0]._point,\n            end = segments[1]._point;\n          attrs.set({\n            x1: start.x,\n            y1: start.y,\n            x2: end.x,\n            y2: end.y\n          });\n        }\n      } else {\n        type = 'path';\n        attrs.d = item.getPathData(null, options.precision);\n      }\n      return SvgElement.create(type, attrs, formatter);\n    }\n    function exportShape(item) {\n      var type = item._type,\n        radius = item._radius,\n        attrs = getTransform(item._matrix, true, type !== 'rectangle');\n      if (type === 'rectangle') {\n        type = 'rect';\n        var size = item._size,\n          width = size.width,\n          height = size.height;\n        attrs.x -= width / 2;\n        attrs.y -= height / 2;\n        attrs.width = width;\n        attrs.height = height;\n        if (radius.isZero()) radius = null;\n      }\n      if (radius) {\n        if (type === 'circle') {\n          attrs.r = radius;\n        } else {\n          attrs.rx = radius.width;\n          attrs.ry = radius.height;\n        }\n      }\n      return SvgElement.create(type, attrs, formatter);\n    }\n    function exportCompoundPath(item, options) {\n      var attrs = getTransform(item._matrix);\n      var data = item.getPathData(null, options.precision);\n      if (data) attrs.d = data;\n      return SvgElement.create('path', attrs, formatter);\n    }\n    function exportSymbolItem(item, options) {\n      var attrs = getTransform(item._matrix, true),\n        definition = item._definition,\n        node = getDefinition(definition, 'symbol'),\n        definitionItem = definition._item,\n        bounds = definitionItem.getStrokeBounds();\n      if (!node) {\n        node = SvgElement.create('symbol', {\n          viewBox: formatter.rectangle(bounds)\n        });\n        node.appendChild(exportSVG(definitionItem, options));\n        setDefinition(definition, node, 'symbol');\n      }\n      attrs.href = '#' + node.id;\n      attrs.x += bounds.x;\n      attrs.y += bounds.y;\n      attrs.width = bounds.width;\n      attrs.height = bounds.height;\n      attrs.overflow = 'visible';\n      return SvgElement.create('use', attrs, formatter);\n    }\n    function exportGradient(color) {\n      var gradientNode = getDefinition(color, 'color');\n      if (!gradientNode) {\n        var gradient = color.getGradient(),\n          radial = gradient._radial,\n          origin = color.getOrigin(),\n          destination = color.getDestination(),\n          attrs;\n        if (radial) {\n          attrs = {\n            cx: origin.x,\n            cy: origin.y,\n            r: origin.getDistance(destination)\n          };\n          var highlight = color.getHighlight();\n          if (highlight) {\n            attrs.fx = highlight.x;\n            attrs.fy = highlight.y;\n          }\n        } else {\n          attrs = {\n            x1: origin.x,\n            y1: origin.y,\n            x2: destination.x,\n            y2: destination.y\n          };\n        }\n        attrs.gradientUnits = 'userSpaceOnUse';\n        gradientNode = SvgElement.create((radial ? 'radial' : 'linear') + 'Gradient', attrs, formatter);\n        var stops = gradient._stops;\n        for (var i = 0, l = stops.length; i < l; i++) {\n          var stop = stops[i],\n            stopColor = stop._color,\n            alpha = stopColor.getAlpha(),\n            offset = stop._offset;\n          attrs = {\n            offset: offset == null ? i / (l - 1) : offset\n          };\n          if (stopColor) attrs['stop-color'] = stopColor.toCSS(true);\n          if (alpha < 1) attrs['stop-opacity'] = alpha;\n          gradientNode.appendChild(SvgElement.create('stop', attrs, formatter));\n        }\n        setDefinition(color, gradientNode, 'color');\n      }\n      return 'url(#' + gradientNode.id + ')';\n    }\n    function exportText(item) {\n      var node = SvgElement.create('text', getTransform(item._matrix, true), formatter);\n      node.textContent = item._content;\n      return node;\n    }\n    var exporters = {\n      Group: exportGroup,\n      Layer: exportGroup,\n      Raster: exportRaster,\n      Path: exportPath,\n      Shape: exportShape,\n      CompoundPath: exportCompoundPath,\n      SymbolItem: exportSymbolItem,\n      PointText: exportText\n    };\n    function applyStyle(item, node, isRoot) {\n      var attrs = {},\n        parent = !isRoot && item.getParent(),\n        style = [];\n      if (item._name != null) attrs.id = item._name;\n      Base.each(SvgStyles, function (entry) {\n        var get = entry.get,\n          type = entry.type,\n          value = item[get]();\n        if (entry.exportFilter ? entry.exportFilter(item, value) : !parent || !Base.equals(parent[get](), value)) {\n          if (type === 'color' && value != null) {\n            var alpha = value.getAlpha();\n            if (alpha < 1) attrs[entry.attribute + '-opacity'] = alpha;\n          }\n          if (type === 'style') {\n            style.push(entry.attribute + ': ' + value);\n          } else {\n            attrs[entry.attribute] = value == null ? 'none' : type === 'color' ? value.gradient ? exportGradient(value, item) : value.toCSS(true) : type === 'array' ? value.join(',') : type === 'lookup' ? entry.toSVG[value] : value;\n          }\n        }\n      });\n      if (style.length) attrs.style = style.join(';');\n      if (attrs.opacity === 1) delete attrs.opacity;\n      if (!item._visible) attrs.visibility = 'hidden';\n      return SvgElement.set(node, attrs, formatter);\n    }\n    var definitions;\n    function getDefinition(item, type) {\n      if (!definitions) definitions = {\n        ids: {},\n        svgs: {}\n      };\n      return item && definitions.svgs[type + '-' + (item._id || item.__id || (item.__id = UID.get('svg')))];\n    }\n    function setDefinition(item, node, type) {\n      if (!definitions) getDefinition();\n      var typeId = definitions.ids[type] = (definitions.ids[type] || 0) + 1;\n      node.id = type + '-' + typeId;\n      definitions.svgs[type + '-' + (item._id || item.__id)] = node;\n    }\n    function exportDefinitions(node, options) {\n      var svg = node,\n        defs = null;\n      if (definitions) {\n        svg = node.nodeName.toLowerCase() === 'svg' && node;\n        for (var i in definitions.svgs) {\n          if (!defs) {\n            if (!svg) {\n              svg = SvgElement.create('svg');\n              svg.appendChild(node);\n            }\n            defs = svg.insertBefore(SvgElement.create('defs'), svg.firstChild);\n          }\n          defs.appendChild(definitions.svgs[i]);\n        }\n        definitions = null;\n      }\n      return options.asString ? new self.XMLSerializer().serializeToString(svg) : svg;\n    }\n    function exportSVG(item, options, isRoot) {\n      var exporter = exporters[item._class],\n        node = exporter && exporter(item, options);\n      if (node) {\n        var onExport = options.onExport;\n        if (onExport) node = onExport(item, node, options) || node;\n        var data = JSON.stringify(item._data);\n        if (data && data !== '{}' && data !== 'null') node.setAttribute('data-paper-data', data);\n      }\n      return node && applyStyle(item, node, isRoot);\n    }\n    function setOptions(options) {\n      if (!options) options = {};\n      formatter = new Formatter(options.precision);\n      return options;\n    }\n    Item.inject({\n      exportSVG: function (options) {\n        options = setOptions(options);\n        return exportDefinitions(exportSVG(this, options, true), options);\n      }\n    });\n    Project.inject({\n      exportSVG: function (options) {\n        options = setOptions(options);\n        var children = this._children,\n          view = this.getView(),\n          bounds = Base.pick(options.bounds, 'view'),\n          mx = options.matrix || bounds === 'view' && view._matrix,\n          matrix = mx && Matrix.read([mx]),\n          rect = bounds === 'view' ? new Rectangle([0, 0], view.getViewSize()) : bounds === 'content' ? Item._getBounds(children, matrix, {\n            stroke: true\n          }).rect : Rectangle.read([bounds], 0, {\n            readNull: true\n          }),\n          attrs = {\n            version: '1.1',\n            xmlns: SvgElement.svg,\n            'xmlns:xlink': SvgElement.xlink\n          };\n        if (rect) {\n          attrs.width = rect.width;\n          attrs.height = rect.height;\n          if (rect.x || rect.x === 0 || rect.y || rect.y === 0) attrs.viewBox = formatter.rectangle(rect);\n        }\n        var node = SvgElement.create('svg', attrs, formatter),\n          parent = node;\n        if (matrix && !matrix.isIdentity()) {\n          parent = node.appendChild(SvgElement.create('g', getTransform(matrix), formatter));\n        }\n        for (var i = 0, l = children.length; i < l; i++) {\n          parent.appendChild(exportSVG(children[i], options, true));\n        }\n        return exportDefinitions(node, options);\n      }\n    });\n  }();\n  new function () {\n    var definitions = {},\n      rootSize;\n    function getValue(node, name, isString, allowNull, allowPercent, defaultValue) {\n      var value = SvgElement.get(node, name) || defaultValue,\n        res = value == null ? allowNull ? null : isString ? '' : 0 : isString ? value : parseFloat(value);\n      return /%\\s*$/.test(value) ? res / 100 * (allowPercent ? 1 : rootSize[/x|^width/.test(name) ? 'width' : 'height']) : res;\n    }\n    function getPoint(node, x, y, allowNull, allowPercent, defaultX, defaultY) {\n      x = getValue(node, x || 'x', false, allowNull, allowPercent, defaultX);\n      y = getValue(node, y || 'y', false, allowNull, allowPercent, defaultY);\n      return allowNull && (x == null || y == null) ? null : new Point(x, y);\n    }\n    function getSize(node, w, h, allowNull, allowPercent) {\n      w = getValue(node, w || 'width', false, allowNull, allowPercent);\n      h = getValue(node, h || 'height', false, allowNull, allowPercent);\n      return allowNull && (w == null || h == null) ? null : new Size(w, h);\n    }\n    function convertValue(value, type, lookup) {\n      return value === 'none' ? null : type === 'number' ? parseFloat(value) : type === 'array' ? value ? value.split(/[\\s,]+/g).map(parseFloat) : [] : type === 'color' ? getDefinition(value) || value : type === 'lookup' ? lookup[value] : value;\n    }\n    function importGroup(node, type, options, isRoot) {\n      var nodes = node.childNodes,\n        isClip = type === 'clippath',\n        isDefs = type === 'defs',\n        item = new Group(),\n        project = item._project,\n        currentStyle = project._currentStyle,\n        children = [];\n      if (!isClip && !isDefs) {\n        item = applyAttributes(item, node, isRoot);\n        project._currentStyle = item._style.clone();\n      }\n      if (isRoot) {\n        var defs = node.querySelectorAll('defs');\n        for (var i = 0, l = defs.length; i < l; i++) {\n          importNode(defs[i], options, false);\n        }\n      }\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        var childNode = nodes[i],\n          child;\n        if (childNode.nodeType === 1 && !/^defs$/i.test(childNode.nodeName) && (child = importNode(childNode, options, false)) && !(child instanceof SymbolDefinition)) children.push(child);\n      }\n      item.addChildren(children);\n      if (isClip) item = applyAttributes(item.reduce(), node, isRoot);\n      project._currentStyle = currentStyle;\n      if (isClip || isDefs) {\n        item.remove();\n        item = null;\n      }\n      return item;\n    }\n    function importPoly(node, type) {\n      var coords = node.getAttribute('points').match(/[+-]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?/g),\n        points = [];\n      for (var i = 0, l = coords.length; i < l; i += 2) points.push(new Point(parseFloat(coords[i]), parseFloat(coords[i + 1])));\n      var path = new Path(points);\n      if (type === 'polygon') path.closePath();\n      return path;\n    }\n    function importPath(node) {\n      return PathItem.create(node.getAttribute('d'));\n    }\n    function importGradient(node, type) {\n      var id = (getValue(node, 'href', true) || '').substring(1),\n        radial = type === 'radialgradient',\n        gradient;\n      if (id) {\n        gradient = definitions[id].getGradient();\n        if (gradient._radial ^ radial) {\n          gradient = gradient.clone();\n          gradient._radial = radial;\n        }\n      } else {\n        var nodes = node.childNodes,\n          stops = [];\n        for (var i = 0, l = nodes.length; i < l; i++) {\n          var child = nodes[i];\n          if (child.nodeType === 1) stops.push(applyAttributes(new GradientStop(), child));\n        }\n        gradient = new Gradient(stops, radial);\n      }\n      var origin,\n        destination,\n        highlight,\n        scaleToBounds = getValue(node, 'gradientUnits', true) !== 'userSpaceOnUse';\n      if (radial) {\n        origin = getPoint(node, 'cx', 'cy', false, scaleToBounds, '50%', '50%');\n        destination = origin.add(getValue(node, 'r', false, false, scaleToBounds, '50%'), 0);\n        highlight = getPoint(node, 'fx', 'fy', true, scaleToBounds);\n      } else {\n        origin = getPoint(node, 'x1', 'y1', false, scaleToBounds, '0%', '0%');\n        destination = getPoint(node, 'x2', 'y2', false, scaleToBounds, '100%', '0%');\n      }\n      var color = applyAttributes(new Color(gradient, origin, destination, highlight), node);\n      color._scaleToBounds = scaleToBounds;\n      return null;\n    }\n    var importers = {\n      '#document': function (node, type, options, isRoot) {\n        var nodes = node.childNodes;\n        for (var i = 0, l = nodes.length; i < l; i++) {\n          var child = nodes[i];\n          if (child.nodeType === 1) return importNode(child, options, isRoot);\n        }\n      },\n      g: importGroup,\n      svg: importGroup,\n      clippath: importGroup,\n      polygon: importPoly,\n      polyline: importPoly,\n      path: importPath,\n      lineargradient: importGradient,\n      radialgradient: importGradient,\n      image: function (node) {\n        var raster = new Raster(getValue(node, 'href', true));\n        raster.on('load', function () {\n          var size = getSize(node);\n          this.setSize(size);\n          var center = getPoint(node).add(size.divide(2));\n          this._matrix.append(new Matrix().translate(center));\n        });\n        return raster;\n      },\n      symbol: function (node, type, options, isRoot) {\n        return new SymbolDefinition(importGroup(node, type, options, isRoot), true);\n      },\n      defs: importGroup,\n      use: function (node) {\n        var id = (getValue(node, 'href', true) || '').substring(1),\n          definition = definitions[id],\n          point = getPoint(node);\n        return definition ? definition instanceof SymbolDefinition ? definition.place(point) : definition.clone().translate(point) : null;\n      },\n      circle: function (node) {\n        return new Shape.Circle(getPoint(node, 'cx', 'cy'), getValue(node, 'r'));\n      },\n      ellipse: function (node) {\n        return new Shape.Ellipse({\n          center: getPoint(node, 'cx', 'cy'),\n          radius: getSize(node, 'rx', 'ry')\n        });\n      },\n      rect: function (node) {\n        return new Shape.Rectangle(new Rectangle(getPoint(node), getSize(node)), getSize(node, 'rx', 'ry'));\n      },\n      line: function (node) {\n        return new Path.Line(getPoint(node, 'x1', 'y1'), getPoint(node, 'x2', 'y2'));\n      },\n      text: function (node) {\n        var text = new PointText(getPoint(node).add(getPoint(node, 'dx', 'dy')));\n        text.setContent(node.textContent.trim() || '');\n        return text;\n      },\n      switch: importGroup\n    };\n    function applyTransform(item, value, name, node) {\n      if (item.transform) {\n        var transforms = (node.getAttribute(name) || '').split(/\\)\\s*/g),\n          matrix = new Matrix();\n        for (var i = 0, l = transforms.length; i < l; i++) {\n          var transform = transforms[i];\n          if (!transform) break;\n          var parts = transform.split(/\\(\\s*/),\n            command = parts[0],\n            v = parts[1].split(/[\\s,]+/g);\n          for (var j = 0, m = v.length; j < m; j++) v[j] = parseFloat(v[j]);\n          switch (command) {\n            case 'matrix':\n              matrix.append(new Matrix(v[0], v[1], v[2], v[3], v[4], v[5]));\n              break;\n            case 'rotate':\n              matrix.rotate(v[0], v[1] || 0, v[2] || 0);\n              break;\n            case 'translate':\n              matrix.translate(v[0], v[1] || 0);\n              break;\n            case 'scale':\n              matrix.scale(v);\n              break;\n            case 'skewX':\n              matrix.skew(v[0], 0);\n              break;\n            case 'skewY':\n              matrix.skew(0, v[0]);\n              break;\n          }\n        }\n        item.transform(matrix);\n      }\n    }\n    function applyOpacity(item, value, name) {\n      var key = name === 'fill-opacity' ? 'getFillColor' : 'getStrokeColor',\n        color = item[key] && item[key]();\n      if (color) color.setAlpha(parseFloat(value));\n    }\n    var attributes = Base.set(Base.each(SvgStyles, function (entry) {\n      this[entry.attribute] = function (item, value) {\n        if (item[entry.set]) {\n          item[entry.set](convertValue(value, entry.type, entry.fromSVG));\n          if (entry.type === 'color') {\n            var color = item[entry.get]();\n            if (color) {\n              if (color._scaleToBounds) {\n                var bounds = item.getBounds();\n                color.transform(new Matrix().translate(bounds.getPoint()).scale(bounds.getSize()));\n              }\n            }\n          }\n        }\n      };\n    }, {}), {\n      id: function (item, value) {\n        definitions[value] = item;\n        if (item.setName) item.setName(value);\n      },\n      'clip-path': function (item, value) {\n        var clip = getDefinition(value);\n        if (clip) {\n          clip = clip.clone();\n          clip.setClipMask(true);\n          if (item instanceof Group) {\n            item.insertChild(0, clip);\n          } else {\n            return new Group(clip, item);\n          }\n        }\n      },\n      gradientTransform: applyTransform,\n      transform: applyTransform,\n      'fill-opacity': applyOpacity,\n      'stroke-opacity': applyOpacity,\n      visibility: function (item, value) {\n        if (item.setVisible) item.setVisible(value === 'visible');\n      },\n      display: function (item, value) {\n        if (item.setVisible) item.setVisible(value !== null);\n      },\n      'stop-color': function (item, value) {\n        if (item.setColor) item.setColor(value);\n      },\n      'stop-opacity': function (item, value) {\n        if (item._color) item._color.setAlpha(parseFloat(value));\n      },\n      offset: function (item, value) {\n        if (item.setOffset) {\n          var percent = value.match(/(.*)%$/);\n          item.setOffset(percent ? percent[1] / 100 : parseFloat(value));\n        }\n      },\n      viewBox: function (item, value, name, node, styles) {\n        var rect = new Rectangle(convertValue(value, 'array')),\n          size = getSize(node, null, null, true),\n          group,\n          matrix;\n        if (item instanceof Group) {\n          var scale = size ? size.divide(rect.getSize()) : 1,\n            matrix = new Matrix().scale(scale).translate(rect.getPoint().negate());\n          group = item;\n        } else if (item instanceof SymbolDefinition) {\n          if (size) rect.setSize(size);\n          group = item._item;\n        }\n        if (group) {\n          if (getAttribute(node, 'overflow', styles) !== 'visible') {\n            var clip = new Shape.Rectangle(rect);\n            clip.setClipMask(true);\n            group.addChild(clip);\n          }\n          if (matrix) group.transform(matrix);\n        }\n      }\n    });\n    function getAttribute(node, name, styles) {\n      var attr = node.attributes[name],\n        value = attr && attr.value;\n      if (!value && node.style) {\n        var style = Base.camelize(name);\n        value = node.style[style];\n        if (!value && styles.node[style] !== styles.parent[style]) value = styles.node[style];\n      }\n      return !value ? undefined : value === 'none' ? null : value;\n    }\n    function applyAttributes(item, node, isRoot) {\n      var parent = node.parentNode,\n        styles = {\n          node: DomElement.getStyles(node) || {},\n          parent: !isRoot && !/^defs$/i.test(parent.tagName) && DomElement.getStyles(parent) || {}\n        };\n      Base.each(attributes, function (apply, name) {\n        var value = getAttribute(node, name, styles);\n        item = value !== undefined && apply(item, value, name, node, styles) || item;\n      });\n      return item;\n    }\n    function getDefinition(value) {\n      var match = value && value.match(/\\((?:[\"'#]*)([^\"')]+)/),\n        name = match && match[1],\n        res = name && definitions[window ? name.replace(window.location.href.split('#')[0] + '#', '') : name];\n      if (res && res._scaleToBounds) {\n        res = res.clone();\n        res._scaleToBounds = true;\n      }\n      return res;\n    }\n    function importNode(node, options, isRoot) {\n      var type = node.nodeName.toLowerCase(),\n        isElement = type !== '#document',\n        body = document.body,\n        container,\n        parent,\n        next;\n      if (isRoot && isElement) {\n        rootSize = paper.getView().getSize();\n        rootSize = getSize(node, null, null, true) || rootSize;\n        container = SvgElement.create('svg', {\n          style: 'stroke-width: 1px; stroke-miterlimit: 10'\n        });\n        parent = node.parentNode;\n        next = node.nextSibling;\n        container.appendChild(node);\n        body.appendChild(container);\n      }\n      var settings = paper.settings,\n        applyMatrix = settings.applyMatrix,\n        insertItems = settings.insertItems;\n      settings.applyMatrix = false;\n      settings.insertItems = false;\n      var importer = importers[type],\n        item = importer && importer(node, type, options, isRoot) || null;\n      settings.insertItems = insertItems;\n      settings.applyMatrix = applyMatrix;\n      if (item) {\n        if (isElement && !(item instanceof Group)) item = applyAttributes(item, node, isRoot);\n        var onImport = options.onImport,\n          data = isElement && node.getAttribute('data-paper-data');\n        if (onImport) item = onImport(node, item, options) || item;\n        if (options.expandShapes && item instanceof Shape) {\n          item.remove();\n          item = item.toPath();\n        }\n        if (data) item._data = JSON.parse(data);\n      }\n      if (container) {\n        body.removeChild(container);\n        if (parent) {\n          if (next) {\n            parent.insertBefore(node, next);\n          } else {\n            parent.appendChild(node);\n          }\n        }\n      }\n      if (isRoot) {\n        definitions = {};\n        if (item && Base.pick(options.applyMatrix, applyMatrix)) item.matrix.apply(true, true);\n      }\n      return item;\n    }\n    function importSVG(source, options, owner) {\n      if (!source) return null;\n      options = typeof options === 'function' ? {\n        onLoad: options\n      } : options || {};\n      var scope = paper,\n        item = null;\n      function onLoad(svg) {\n        try {\n          var node = typeof svg === 'object' ? svg : new self.DOMParser().parseFromString(svg.trim(), 'image/svg+xml');\n          if (!node.nodeName) {\n            node = null;\n            throw new Error('Unsupported SVG source: ' + source);\n          }\n          paper = scope;\n          item = importNode(node, options, true);\n          if (!options || options.insert !== false) {\n            owner._insertItem(undefined, item);\n          }\n          var onLoad = options.onLoad;\n          if (onLoad) onLoad(item, svg);\n        } catch (e) {\n          onError(e);\n        }\n      }\n      function onError(message, status) {\n        var onError = options.onError;\n        if (onError) {\n          onError(message, status);\n        } else {\n          throw new Error(message);\n        }\n      }\n      if (typeof source === 'string' && !/^[\\s\\S]*</.test(source)) {\n        var node = document.getElementById(source);\n        if (node) {\n          onLoad(node);\n        } else {\n          Http.request({\n            url: source,\n            async: true,\n            onLoad: onLoad,\n            onError: onError\n          });\n        }\n      } else if (typeof File !== 'undefined' && source instanceof File) {\n        var reader = new FileReader();\n        reader.onload = function () {\n          onLoad(reader.result);\n        };\n        reader.onerror = function () {\n          onError(reader.error);\n        };\n        return reader.readAsText(source);\n      } else {\n        onLoad(source);\n      }\n      return item;\n    }\n    Item.inject({\n      importSVG: function (node, options) {\n        return importSVG(node, options, this);\n      }\n    });\n    Project.inject({\n      importSVG: function (node, options) {\n        this.activate();\n        return importSVG(node, options, this);\n      }\n    });\n  }();\n  Base.exports.PaperScript = function () {\n    var global = this,\n      acorn = global.acorn;\n    if (!acorn && typeof require !== 'undefined') {\n      try {\n        acorn = require('acorn');\n      } catch (e) {}\n    }\n    if (!acorn) {\n      var exports, module;\n      acorn = exports = module = {};\n      (function (root, mod) {\n        if (typeof exports == \"object\" && typeof module == \"object\") return mod(exports);\n        if (typeof define == \"function\" && define.amd) return define([\"exports\"], mod);\n        mod(root.acorn || (root.acorn = {}));\n      })(this, function (exports) {\n        \"use strict\";\n\n        exports.version = \"0.5.0\";\n        var options, input, inputLen, sourceFile;\n        exports.parse = function (inpt, opts) {\n          input = String(inpt);\n          inputLen = input.length;\n          setOptions(opts);\n          initTokenState();\n          return parseTopLevel(options.program);\n        };\n        var defaultOptions = exports.defaultOptions = {\n          ecmaVersion: 5,\n          strictSemicolons: false,\n          allowTrailingCommas: true,\n          forbidReserved: false,\n          allowReturnOutsideFunction: false,\n          locations: false,\n          onComment: null,\n          ranges: false,\n          program: null,\n          sourceFile: null,\n          directSourceFile: null\n        };\n        function setOptions(opts) {\n          options = opts || {};\n          for (var opt in defaultOptions) if (!Object.prototype.hasOwnProperty.call(options, opt)) options[opt] = defaultOptions[opt];\n          sourceFile = options.sourceFile || null;\n        }\n        var getLineInfo = exports.getLineInfo = function (input, offset) {\n          for (var line = 1, cur = 0;;) {\n            lineBreak.lastIndex = cur;\n            var match = lineBreak.exec(input);\n            if (match && match.index < offset) {\n              ++line;\n              cur = match.index + match[0].length;\n            } else break;\n          }\n          return {\n            line: line,\n            column: offset - cur\n          };\n        };\n        exports.tokenize = function (inpt, opts) {\n          input = String(inpt);\n          inputLen = input.length;\n          setOptions(opts);\n          initTokenState();\n          var t = {};\n          function getToken(forceRegexp) {\n            lastEnd = tokEnd;\n            readToken(forceRegexp);\n            t.start = tokStart;\n            t.end = tokEnd;\n            t.startLoc = tokStartLoc;\n            t.endLoc = tokEndLoc;\n            t.type = tokType;\n            t.value = tokVal;\n            return t;\n          }\n          getToken.jumpTo = function (pos, reAllowed) {\n            tokPos = pos;\n            if (options.locations) {\n              tokCurLine = 1;\n              tokLineStart = lineBreak.lastIndex = 0;\n              var match;\n              while ((match = lineBreak.exec(input)) && match.index < pos) {\n                ++tokCurLine;\n                tokLineStart = match.index + match[0].length;\n              }\n            }\n            tokRegexpAllowed = reAllowed;\n            skipSpace();\n          };\n          return getToken;\n        };\n        var tokPos;\n        var tokStart, tokEnd;\n        var tokStartLoc, tokEndLoc;\n        var tokType, tokVal;\n        var tokRegexpAllowed;\n        var tokCurLine, tokLineStart;\n        var lastStart, lastEnd, lastEndLoc;\n        var inFunction, labels, strict;\n        function raise(pos, message) {\n          var loc = getLineInfo(input, pos);\n          message += \" (\" + loc.line + \":\" + loc.column + \")\";\n          var err = new SyntaxError(message);\n          err.pos = pos;\n          err.loc = loc;\n          err.raisedAt = tokPos;\n          throw err;\n        }\n        var empty = [];\n        var _num = {\n            type: \"num\"\n          },\n          _regexp = {\n            type: \"regexp\"\n          },\n          _string = {\n            type: \"string\"\n          };\n        var _name = {\n            type: \"name\"\n          },\n          _eof = {\n            type: \"eof\"\n          };\n        var _break = {\n            keyword: \"break\"\n          },\n          _case = {\n            keyword: \"case\",\n            beforeExpr: true\n          },\n          _catch = {\n            keyword: \"catch\"\n          };\n        var _continue = {\n            keyword: \"continue\"\n          },\n          _debugger = {\n            keyword: \"debugger\"\n          },\n          _default = {\n            keyword: \"default\"\n          };\n        var _do = {\n            keyword: \"do\",\n            isLoop: true\n          },\n          _else = {\n            keyword: \"else\",\n            beforeExpr: true\n          };\n        var _finally = {\n            keyword: \"finally\"\n          },\n          _for = {\n            keyword: \"for\",\n            isLoop: true\n          },\n          _function = {\n            keyword: \"function\"\n          };\n        var _if = {\n            keyword: \"if\"\n          },\n          _return = {\n            keyword: \"return\",\n            beforeExpr: true\n          },\n          _switch = {\n            keyword: \"switch\"\n          };\n        var _throw = {\n            keyword: \"throw\",\n            beforeExpr: true\n          },\n          _try = {\n            keyword: \"try\"\n          },\n          _var = {\n            keyword: \"var\"\n          };\n        var _while = {\n            keyword: \"while\",\n            isLoop: true\n          },\n          _with = {\n            keyword: \"with\"\n          },\n          _new = {\n            keyword: \"new\",\n            beforeExpr: true\n          };\n        var _this = {\n          keyword: \"this\"\n        };\n        var _null = {\n            keyword: \"null\",\n            atomValue: null\n          },\n          _true = {\n            keyword: \"true\",\n            atomValue: true\n          };\n        var _false = {\n          keyword: \"false\",\n          atomValue: false\n        };\n        var _in = {\n          keyword: \"in\",\n          binop: 7,\n          beforeExpr: true\n        };\n        var keywordTypes = {\n          \"break\": _break,\n          \"case\": _case,\n          \"catch\": _catch,\n          \"continue\": _continue,\n          \"debugger\": _debugger,\n          \"default\": _default,\n          \"do\": _do,\n          \"else\": _else,\n          \"finally\": _finally,\n          \"for\": _for,\n          \"function\": _function,\n          \"if\": _if,\n          \"return\": _return,\n          \"switch\": _switch,\n          \"throw\": _throw,\n          \"try\": _try,\n          \"var\": _var,\n          \"while\": _while,\n          \"with\": _with,\n          \"null\": _null,\n          \"true\": _true,\n          \"false\": _false,\n          \"new\": _new,\n          \"in\": _in,\n          \"instanceof\": {\n            keyword: \"instanceof\",\n            binop: 7,\n            beforeExpr: true\n          },\n          \"this\": _this,\n          \"typeof\": {\n            keyword: \"typeof\",\n            prefix: true,\n            beforeExpr: true\n          },\n          \"void\": {\n            keyword: \"void\",\n            prefix: true,\n            beforeExpr: true\n          },\n          \"delete\": {\n            keyword: \"delete\",\n            prefix: true,\n            beforeExpr: true\n          }\n        };\n        var _bracketL = {\n            type: \"[\",\n            beforeExpr: true\n          },\n          _bracketR = {\n            type: \"]\"\n          },\n          _braceL = {\n            type: \"{\",\n            beforeExpr: true\n          };\n        var _braceR = {\n            type: \"}\"\n          },\n          _parenL = {\n            type: \"(\",\n            beforeExpr: true\n          },\n          _parenR = {\n            type: \")\"\n          };\n        var _comma = {\n            type: \",\",\n            beforeExpr: true\n          },\n          _semi = {\n            type: \";\",\n            beforeExpr: true\n          };\n        var _colon = {\n            type: \":\",\n            beforeExpr: true\n          },\n          _dot = {\n            type: \".\"\n          },\n          _question = {\n            type: \"?\",\n            beforeExpr: true\n          };\n        var _slash = {\n            binop: 10,\n            beforeExpr: true\n          },\n          _eq = {\n            isAssign: true,\n            beforeExpr: true\n          };\n        var _assign = {\n          isAssign: true,\n          beforeExpr: true\n        };\n        var _incDec = {\n            postfix: true,\n            prefix: true,\n            isUpdate: true\n          },\n          _prefix = {\n            prefix: true,\n            beforeExpr: true\n          };\n        var _logicalOR = {\n          binop: 1,\n          beforeExpr: true\n        };\n        var _logicalAND = {\n          binop: 2,\n          beforeExpr: true\n        };\n        var _bitwiseOR = {\n          binop: 3,\n          beforeExpr: true\n        };\n        var _bitwiseXOR = {\n          binop: 4,\n          beforeExpr: true\n        };\n        var _bitwiseAND = {\n          binop: 5,\n          beforeExpr: true\n        };\n        var _equality = {\n          binop: 6,\n          beforeExpr: true\n        };\n        var _relational = {\n          binop: 7,\n          beforeExpr: true\n        };\n        var _bitShift = {\n          binop: 8,\n          beforeExpr: true\n        };\n        var _plusMin = {\n          binop: 9,\n          prefix: true,\n          beforeExpr: true\n        };\n        var _multiplyModulo = {\n          binop: 10,\n          beforeExpr: true\n        };\n        exports.tokTypes = {\n          bracketL: _bracketL,\n          bracketR: _bracketR,\n          braceL: _braceL,\n          braceR: _braceR,\n          parenL: _parenL,\n          parenR: _parenR,\n          comma: _comma,\n          semi: _semi,\n          colon: _colon,\n          dot: _dot,\n          question: _question,\n          slash: _slash,\n          eq: _eq,\n          name: _name,\n          eof: _eof,\n          num: _num,\n          regexp: _regexp,\n          string: _string\n        };\n        for (var kw in keywordTypes) exports.tokTypes[\"_\" + kw] = keywordTypes[kw];\n        function makePredicate(words) {\n          words = words.split(\" \");\n          var f = \"\",\n            cats = [];\n          out: for (var i = 0; i < words.length; ++i) {\n            for (var j = 0; j < cats.length; ++j) if (cats[j][0].length == words[i].length) {\n              cats[j].push(words[i]);\n              continue out;\n            }\n            cats.push([words[i]]);\n          }\n          function compareTo(arr) {\n            if (arr.length == 1) return f += \"return str === \" + JSON.stringify(arr[0]) + \";\";\n            f += \"switch(str){\";\n            for (var i = 0; i < arr.length; ++i) f += \"case \" + JSON.stringify(arr[i]) + \":\";\n            f += \"return true}return false;\";\n          }\n          if (cats.length > 3) {\n            cats.sort(function (a, b) {\n              return b.length - a.length;\n            });\n            f += \"switch(str.length){\";\n            for (var i = 0; i < cats.length; ++i) {\n              var cat = cats[i];\n              f += \"case \" + cat[0].length + \":\";\n              compareTo(cat);\n            }\n            f += \"}\";\n          } else {\n            compareTo(words);\n          }\n          return new Function(\"str\", f);\n        }\n        var isReservedWord3 = makePredicate(\"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\");\n        var isReservedWord5 = makePredicate(\"class enum extends super const export import\");\n        var isStrictReservedWord = makePredicate(\"implements interface let package private protected public static yield\");\n        var isStrictBadIdWord = makePredicate(\"eval arguments\");\n        var isKeyword = makePredicate(\"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\");\n        var nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n        var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n        var nonASCIIidentifierChars = \"\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n        var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\n        var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n        var newline = /[\\n\\r\\u2028\\u2029]/;\n        var lineBreak = /\\r\\n|[\\n\\r\\u2028\\u2029]/g;\n        var isIdentifierStart = exports.isIdentifierStart = function (code) {\n          if (code < 65) return code === 36;\n          if (code < 91) return true;\n          if (code < 97) return code === 95;\n          if (code < 123) return true;\n          return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n        };\n        var isIdentifierChar = exports.isIdentifierChar = function (code) {\n          if (code < 48) return code === 36;\n          if (code < 58) return true;\n          if (code < 65) return false;\n          if (code < 91) return true;\n          if (code < 97) return code === 95;\n          if (code < 123) return true;\n          return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n        };\n        function line_loc_t() {\n          this.line = tokCurLine;\n          this.column = tokPos - tokLineStart;\n        }\n        function initTokenState() {\n          tokCurLine = 1;\n          tokPos = tokLineStart = 0;\n          tokRegexpAllowed = true;\n          skipSpace();\n        }\n        function finishToken(type, val) {\n          tokEnd = tokPos;\n          if (options.locations) tokEndLoc = new line_loc_t();\n          tokType = type;\n          skipSpace();\n          tokVal = val;\n          tokRegexpAllowed = type.beforeExpr;\n        }\n        function skipBlockComment() {\n          var startLoc = options.onComment && options.locations && new line_loc_t();\n          var start = tokPos,\n            end = input.indexOf(\"*/\", tokPos += 2);\n          if (end === -1) raise(tokPos - 2, \"Unterminated comment\");\n          tokPos = end + 2;\n          if (options.locations) {\n            lineBreak.lastIndex = start;\n            var match;\n            while ((match = lineBreak.exec(input)) && match.index < tokPos) {\n              ++tokCurLine;\n              tokLineStart = match.index + match[0].length;\n            }\n          }\n          if (options.onComment) options.onComment(true, input.slice(start + 2, end), start, tokPos, startLoc, options.locations && new line_loc_t());\n        }\n        function skipLineComment() {\n          var start = tokPos;\n          var startLoc = options.onComment && options.locations && new line_loc_t();\n          var ch = input.charCodeAt(tokPos += 2);\n          while (tokPos < inputLen && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n            ++tokPos;\n            ch = input.charCodeAt(tokPos);\n          }\n          if (options.onComment) options.onComment(false, input.slice(start + 2, tokPos), start, tokPos, startLoc, options.locations && new line_loc_t());\n        }\n        function skipSpace() {\n          while (tokPos < inputLen) {\n            var ch = input.charCodeAt(tokPos);\n            if (ch === 32) {\n              ++tokPos;\n            } else if (ch === 13) {\n              ++tokPos;\n              var next = input.charCodeAt(tokPos);\n              if (next === 10) {\n                ++tokPos;\n              }\n              if (options.locations) {\n                ++tokCurLine;\n                tokLineStart = tokPos;\n              }\n            } else if (ch === 10 || ch === 8232 || ch === 8233) {\n              ++tokPos;\n              if (options.locations) {\n                ++tokCurLine;\n                tokLineStart = tokPos;\n              }\n            } else if (ch > 8 && ch < 14) {\n              ++tokPos;\n            } else if (ch === 47) {\n              var next = input.charCodeAt(tokPos + 1);\n              if (next === 42) {\n                skipBlockComment();\n              } else if (next === 47) {\n                skipLineComment();\n              } else break;\n            } else if (ch === 160) {\n              ++tokPos;\n            } else if (ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n              ++tokPos;\n            } else {\n              break;\n            }\n          }\n        }\n        function readToken_dot() {\n          var next = input.charCodeAt(tokPos + 1);\n          if (next >= 48 && next <= 57) return readNumber(true);\n          ++tokPos;\n          return finishToken(_dot);\n        }\n        function readToken_slash() {\n          var next = input.charCodeAt(tokPos + 1);\n          if (tokRegexpAllowed) {\n            ++tokPos;\n            return readRegexp();\n          }\n          if (next === 61) return finishOp(_assign, 2);\n          return finishOp(_slash, 1);\n        }\n        function readToken_mult_modulo() {\n          var next = input.charCodeAt(tokPos + 1);\n          if (next === 61) return finishOp(_assign, 2);\n          return finishOp(_multiplyModulo, 1);\n        }\n        function readToken_pipe_amp(code) {\n          var next = input.charCodeAt(tokPos + 1);\n          if (next === code) return finishOp(code === 124 ? _logicalOR : _logicalAND, 2);\n          if (next === 61) return finishOp(_assign, 2);\n          return finishOp(code === 124 ? _bitwiseOR : _bitwiseAND, 1);\n        }\n        function readToken_caret() {\n          var next = input.charCodeAt(tokPos + 1);\n          if (next === 61) return finishOp(_assign, 2);\n          return finishOp(_bitwiseXOR, 1);\n        }\n        function readToken_plus_min(code) {\n          var next = input.charCodeAt(tokPos + 1);\n          if (next === code) {\n            if (next == 45 && input.charCodeAt(tokPos + 2) == 62 && newline.test(input.slice(lastEnd, tokPos))) {\n              tokPos += 3;\n              skipLineComment();\n              skipSpace();\n              return readToken();\n            }\n            return finishOp(_incDec, 2);\n          }\n          if (next === 61) return finishOp(_assign, 2);\n          return finishOp(_plusMin, 1);\n        }\n        function readToken_lt_gt(code) {\n          var next = input.charCodeAt(tokPos + 1);\n          var size = 1;\n          if (next === code) {\n            size = code === 62 && input.charCodeAt(tokPos + 2) === 62 ? 3 : 2;\n            if (input.charCodeAt(tokPos + size) === 61) return finishOp(_assign, size + 1);\n            return finishOp(_bitShift, size);\n          }\n          if (next == 33 && code == 60 && input.charCodeAt(tokPos + 2) == 45 && input.charCodeAt(tokPos + 3) == 45) {\n            tokPos += 4;\n            skipLineComment();\n            skipSpace();\n            return readToken();\n          }\n          if (next === 61) size = input.charCodeAt(tokPos + 2) === 61 ? 3 : 2;\n          return finishOp(_relational, size);\n        }\n        function readToken_eq_excl(code) {\n          var next = input.charCodeAt(tokPos + 1);\n          if (next === 61) return finishOp(_equality, input.charCodeAt(tokPos + 2) === 61 ? 3 : 2);\n          return finishOp(code === 61 ? _eq : _prefix, 1);\n        }\n        function getTokenFromCode(code) {\n          switch (code) {\n            case 46:\n              return readToken_dot();\n            case 40:\n              ++tokPos;\n              return finishToken(_parenL);\n            case 41:\n              ++tokPos;\n              return finishToken(_parenR);\n            case 59:\n              ++tokPos;\n              return finishToken(_semi);\n            case 44:\n              ++tokPos;\n              return finishToken(_comma);\n            case 91:\n              ++tokPos;\n              return finishToken(_bracketL);\n            case 93:\n              ++tokPos;\n              return finishToken(_bracketR);\n            case 123:\n              ++tokPos;\n              return finishToken(_braceL);\n            case 125:\n              ++tokPos;\n              return finishToken(_braceR);\n            case 58:\n              ++tokPos;\n              return finishToken(_colon);\n            case 63:\n              ++tokPos;\n              return finishToken(_question);\n            case 48:\n              var next = input.charCodeAt(tokPos + 1);\n              if (next === 120 || next === 88) return readHexNumber();\n            case 49:\n            case 50:\n            case 51:\n            case 52:\n            case 53:\n            case 54:\n            case 55:\n            case 56:\n            case 57:\n              return readNumber(false);\n            case 34:\n            case 39:\n              return readString(code);\n            case 47:\n              return readToken_slash(code);\n            case 37:\n            case 42:\n              return readToken_mult_modulo();\n            case 124:\n            case 38:\n              return readToken_pipe_amp(code);\n            case 94:\n              return readToken_caret();\n            case 43:\n            case 45:\n              return readToken_plus_min(code);\n            case 60:\n            case 62:\n              return readToken_lt_gt(code);\n            case 61:\n            case 33:\n              return readToken_eq_excl(code);\n            case 126:\n              return finishOp(_prefix, 1);\n          }\n          return false;\n        }\n        function readToken(forceRegexp) {\n          if (!forceRegexp) tokStart = tokPos;else tokPos = tokStart + 1;\n          if (options.locations) tokStartLoc = new line_loc_t();\n          if (forceRegexp) return readRegexp();\n          if (tokPos >= inputLen) return finishToken(_eof);\n          var code = input.charCodeAt(tokPos);\n          if (isIdentifierStart(code) || code === 92) return readWord();\n          var tok = getTokenFromCode(code);\n          if (tok === false) {\n            var ch = String.fromCharCode(code);\n            if (ch === \"\\\\\" || nonASCIIidentifierStart.test(ch)) return readWord();\n            raise(tokPos, \"Unexpected character '\" + ch + \"'\");\n          }\n          return tok;\n        }\n        function finishOp(type, size) {\n          var str = input.slice(tokPos, tokPos + size);\n          tokPos += size;\n          finishToken(type, str);\n        }\n        function readRegexp() {\n          var content = \"\",\n            escaped,\n            inClass,\n            start = tokPos;\n          for (;;) {\n            if (tokPos >= inputLen) raise(start, \"Unterminated regular expression\");\n            var ch = input.charAt(tokPos);\n            if (newline.test(ch)) raise(start, \"Unterminated regular expression\");\n            if (!escaped) {\n              if (ch === \"[\") inClass = true;else if (ch === \"]\" && inClass) inClass = false;else if (ch === \"/\" && !inClass) break;\n              escaped = ch === \"\\\\\";\n            } else escaped = false;\n            ++tokPos;\n          }\n          var content = input.slice(start, tokPos);\n          ++tokPos;\n          var mods = readWord1();\n          if (mods && !/^[gmsiy]*$/.test(mods)) raise(start, \"Invalid regexp flag\");\n          try {\n            var value = new RegExp(content, mods);\n          } catch (e) {\n            if (e instanceof SyntaxError) raise(start, e.message);\n            raise(e);\n          }\n          return finishToken(_regexp, value);\n        }\n        function readInt(radix, len) {\n          var start = tokPos,\n            total = 0;\n          for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n            var code = input.charCodeAt(tokPos),\n              val;\n            if (code >= 97) val = code - 97 + 10;else if (code >= 65) val = code - 65 + 10;else if (code >= 48 && code <= 57) val = code - 48;else val = Infinity;\n            if (val >= radix) break;\n            ++tokPos;\n            total = total * radix + val;\n          }\n          if (tokPos === start || len != null && tokPos - start !== len) return null;\n          return total;\n        }\n        function readHexNumber() {\n          tokPos += 2;\n          var val = readInt(16);\n          if (val == null) raise(tokStart + 2, \"Expected hexadecimal number\");\n          if (isIdentifierStart(input.charCodeAt(tokPos))) raise(tokPos, \"Identifier directly after number\");\n          return finishToken(_num, val);\n        }\n        function readNumber(startsWithDot) {\n          var start = tokPos,\n            isFloat = false,\n            octal = input.charCodeAt(tokPos) === 48;\n          if (!startsWithDot && readInt(10) === null) raise(start, \"Invalid number\");\n          if (input.charCodeAt(tokPos) === 46) {\n            ++tokPos;\n            readInt(10);\n            isFloat = true;\n          }\n          var next = input.charCodeAt(tokPos);\n          if (next === 69 || next === 101) {\n            next = input.charCodeAt(++tokPos);\n            if (next === 43 || next === 45) ++tokPos;\n            if (readInt(10) === null) raise(start, \"Invalid number\");\n            isFloat = true;\n          }\n          if (isIdentifierStart(input.charCodeAt(tokPos))) raise(tokPos, \"Identifier directly after number\");\n          var str = input.slice(start, tokPos),\n            val;\n          if (isFloat) val = parseFloat(str);else if (!octal || str.length === 1) val = parseInt(str, 10);else if (/[89]/.test(str) || strict) raise(start, \"Invalid number\");else val = parseInt(str, 8);\n          return finishToken(_num, val);\n        }\n        function readString(quote) {\n          tokPos++;\n          var out = \"\";\n          for (;;) {\n            if (tokPos >= inputLen) raise(tokStart, \"Unterminated string constant\");\n            var ch = input.charCodeAt(tokPos);\n            if (ch === quote) {\n              ++tokPos;\n              return finishToken(_string, out);\n            }\n            if (ch === 92) {\n              ch = input.charCodeAt(++tokPos);\n              var octal = /^[0-7]+/.exec(input.slice(tokPos, tokPos + 3));\n              if (octal) octal = octal[0];\n              while (octal && parseInt(octal, 8) > 255) octal = octal.slice(0, -1);\n              if (octal === \"0\") octal = null;\n              ++tokPos;\n              if (octal) {\n                if (strict) raise(tokPos - 2, \"Octal literal in strict mode\");\n                out += String.fromCharCode(parseInt(octal, 8));\n                tokPos += octal.length - 1;\n              } else {\n                switch (ch) {\n                  case 110:\n                    out += \"\\n\";\n                    break;\n                  case 114:\n                    out += \"\\r\";\n                    break;\n                  case 120:\n                    out += String.fromCharCode(readHexChar(2));\n                    break;\n                  case 117:\n                    out += String.fromCharCode(readHexChar(4));\n                    break;\n                  case 85:\n                    out += String.fromCharCode(readHexChar(8));\n                    break;\n                  case 116:\n                    out += \"\\t\";\n                    break;\n                  case 98:\n                    out += \"\\b\";\n                    break;\n                  case 118:\n                    out += \"\\u000b\";\n                    break;\n                  case 102:\n                    out += \"\\f\";\n                    break;\n                  case 48:\n                    out += \"\\0\";\n                    break;\n                  case 13:\n                    if (input.charCodeAt(tokPos) === 10) ++tokPos;\n                  case 10:\n                    if (options.locations) {\n                      tokLineStart = tokPos;\n                      ++tokCurLine;\n                    }\n                    break;\n                  default:\n                    out += String.fromCharCode(ch);\n                    break;\n                }\n              }\n            } else {\n              if (ch === 13 || ch === 10 || ch === 8232 || ch === 8233) raise(tokStart, \"Unterminated string constant\");\n              out += String.fromCharCode(ch);\n              ++tokPos;\n            }\n          }\n        }\n        function readHexChar(len) {\n          var n = readInt(16, len);\n          if (n === null) raise(tokStart, \"Bad character escape sequence\");\n          return n;\n        }\n        var containsEsc;\n        function readWord1() {\n          containsEsc = false;\n          var word,\n            first = true,\n            start = tokPos;\n          for (;;) {\n            var ch = input.charCodeAt(tokPos);\n            if (isIdentifierChar(ch)) {\n              if (containsEsc) word += input.charAt(tokPos);\n              ++tokPos;\n            } else if (ch === 92) {\n              if (!containsEsc) word = input.slice(start, tokPos);\n              containsEsc = true;\n              if (input.charCodeAt(++tokPos) != 117) raise(tokPos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n              ++tokPos;\n              var esc = readHexChar(4);\n              var escStr = String.fromCharCode(esc);\n              if (!escStr) raise(tokPos - 1, \"Invalid Unicode escape\");\n              if (!(first ? isIdentifierStart(esc) : isIdentifierChar(esc))) raise(tokPos - 4, \"Invalid Unicode escape\");\n              word += escStr;\n            } else {\n              break;\n            }\n            first = false;\n          }\n          return containsEsc ? word : input.slice(start, tokPos);\n        }\n        function readWord() {\n          var word = readWord1();\n          var type = _name;\n          if (!containsEsc && isKeyword(word)) type = keywordTypes[word];\n          return finishToken(type, word);\n        }\n        function next() {\n          lastStart = tokStart;\n          lastEnd = tokEnd;\n          lastEndLoc = tokEndLoc;\n          readToken();\n        }\n        function setStrict(strct) {\n          strict = strct;\n          tokPos = tokStart;\n          if (options.locations) {\n            while (tokPos < tokLineStart) {\n              tokLineStart = input.lastIndexOf(\"\\n\", tokLineStart - 2) + 1;\n              --tokCurLine;\n            }\n          }\n          skipSpace();\n          readToken();\n        }\n        function node_t() {\n          this.type = null;\n          this.start = tokStart;\n          this.end = null;\n        }\n        function node_loc_t() {\n          this.start = tokStartLoc;\n          this.end = null;\n          if (sourceFile !== null) this.source = sourceFile;\n        }\n        function startNode() {\n          var node = new node_t();\n          if (options.locations) node.loc = new node_loc_t();\n          if (options.directSourceFile) node.sourceFile = options.directSourceFile;\n          if (options.ranges) node.range = [tokStart, 0];\n          return node;\n        }\n        function startNodeFrom(other) {\n          var node = new node_t();\n          node.start = other.start;\n          if (options.locations) {\n            node.loc = new node_loc_t();\n            node.loc.start = other.loc.start;\n          }\n          if (options.ranges) node.range = [other.range[0], 0];\n          return node;\n        }\n        function finishNode(node, type) {\n          node.type = type;\n          node.end = lastEnd;\n          if (options.locations) node.loc.end = lastEndLoc;\n          if (options.ranges) node.range[1] = lastEnd;\n          return node;\n        }\n        function isUseStrict(stmt) {\n          return options.ecmaVersion >= 5 && stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && stmt.expression.value === \"use strict\";\n        }\n        function eat(type) {\n          if (tokType === type) {\n            next();\n            return true;\n          }\n        }\n        function canInsertSemicolon() {\n          return !options.strictSemicolons && (tokType === _eof || tokType === _braceR || newline.test(input.slice(lastEnd, tokStart)));\n        }\n        function semicolon() {\n          if (!eat(_semi) && !canInsertSemicolon()) unexpected();\n        }\n        function expect(type) {\n          if (tokType === type) next();else unexpected();\n        }\n        function unexpected() {\n          raise(tokStart, \"Unexpected token\");\n        }\n        function checkLVal(expr) {\n          if (expr.type !== \"Identifier\" && expr.type !== \"MemberExpression\") raise(expr.start, \"Assigning to rvalue\");\n          if (strict && expr.type === \"Identifier\" && isStrictBadIdWord(expr.name)) raise(expr.start, \"Assigning to \" + expr.name + \" in strict mode\");\n        }\n        function parseTopLevel(program) {\n          lastStart = lastEnd = tokPos;\n          if (options.locations) lastEndLoc = new line_loc_t();\n          inFunction = strict = null;\n          labels = [];\n          readToken();\n          var node = program || startNode(),\n            first = true;\n          if (!program) node.body = [];\n          while (tokType !== _eof) {\n            var stmt = parseStatement();\n            node.body.push(stmt);\n            if (first && isUseStrict(stmt)) setStrict(true);\n            first = false;\n          }\n          return finishNode(node, \"Program\");\n        }\n        var loopLabel = {\n            kind: \"loop\"\n          },\n          switchLabel = {\n            kind: \"switch\"\n          };\n        function parseStatement() {\n          if (tokType === _slash || tokType === _assign && tokVal == \"/=\") readToken(true);\n          var starttype = tokType,\n            node = startNode();\n          switch (starttype) {\n            case _break:\n            case _continue:\n              next();\n              var isBreak = starttype === _break;\n              if (eat(_semi) || canInsertSemicolon()) node.label = null;else if (tokType !== _name) unexpected();else {\n                node.label = parseIdent();\n                semicolon();\n              }\n              for (var i = 0; i < labels.length; ++i) {\n                var lab = labels[i];\n                if (node.label == null || lab.name === node.label.name) {\n                  if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n                  if (node.label && isBreak) break;\n                }\n              }\n              if (i === labels.length) raise(node.start, \"Unsyntactic \" + starttype.keyword);\n              return finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n            case _debugger:\n              next();\n              semicolon();\n              return finishNode(node, \"DebuggerStatement\");\n            case _do:\n              next();\n              labels.push(loopLabel);\n              node.body = parseStatement();\n              labels.pop();\n              expect(_while);\n              node.test = parseParenExpression();\n              semicolon();\n              return finishNode(node, \"DoWhileStatement\");\n            case _for:\n              next();\n              labels.push(loopLabel);\n              expect(_parenL);\n              if (tokType === _semi) return parseFor(node, null);\n              if (tokType === _var) {\n                var init = startNode();\n                next();\n                parseVar(init, true);\n                finishNode(init, \"VariableDeclaration\");\n                if (init.declarations.length === 1 && eat(_in)) return parseForIn(node, init);\n                return parseFor(node, init);\n              }\n              var init = parseExpression(false, true);\n              if (eat(_in)) {\n                checkLVal(init);\n                return parseForIn(node, init);\n              }\n              return parseFor(node, init);\n            case _function:\n              next();\n              return parseFunction(node, true);\n            case _if:\n              next();\n              node.test = parseParenExpression();\n              node.consequent = parseStatement();\n              node.alternate = eat(_else) ? parseStatement() : null;\n              return finishNode(node, \"IfStatement\");\n            case _return:\n              if (!inFunction && !options.allowReturnOutsideFunction) raise(tokStart, \"'return' outside of function\");\n              next();\n              if (eat(_semi) || canInsertSemicolon()) node.argument = null;else {\n                node.argument = parseExpression();\n                semicolon();\n              }\n              return finishNode(node, \"ReturnStatement\");\n            case _switch:\n              next();\n              node.discriminant = parseParenExpression();\n              node.cases = [];\n              expect(_braceL);\n              labels.push(switchLabel);\n              for (var cur, sawDefault; tokType != _braceR;) {\n                if (tokType === _case || tokType === _default) {\n                  var isCase = tokType === _case;\n                  if (cur) finishNode(cur, \"SwitchCase\");\n                  node.cases.push(cur = startNode());\n                  cur.consequent = [];\n                  next();\n                  if (isCase) cur.test = parseExpression();else {\n                    if (sawDefault) raise(lastStart, \"Multiple default clauses\");\n                    sawDefault = true;\n                    cur.test = null;\n                  }\n                  expect(_colon);\n                } else {\n                  if (!cur) unexpected();\n                  cur.consequent.push(parseStatement());\n                }\n              }\n              if (cur) finishNode(cur, \"SwitchCase\");\n              next();\n              labels.pop();\n              return finishNode(node, \"SwitchStatement\");\n            case _throw:\n              next();\n              if (newline.test(input.slice(lastEnd, tokStart))) raise(lastEnd, \"Illegal newline after throw\");\n              node.argument = parseExpression();\n              semicolon();\n              return finishNode(node, \"ThrowStatement\");\n            case _try:\n              next();\n              node.block = parseBlock();\n              node.handler = null;\n              if (tokType === _catch) {\n                var clause = startNode();\n                next();\n                expect(_parenL);\n                clause.param = parseIdent();\n                if (strict && isStrictBadIdWord(clause.param.name)) raise(clause.param.start, \"Binding \" + clause.param.name + \" in strict mode\");\n                expect(_parenR);\n                clause.guard = null;\n                clause.body = parseBlock();\n                node.handler = finishNode(clause, \"CatchClause\");\n              }\n              node.guardedHandlers = empty;\n              node.finalizer = eat(_finally) ? parseBlock() : null;\n              if (!node.handler && !node.finalizer) raise(node.start, \"Missing catch or finally clause\");\n              return finishNode(node, \"TryStatement\");\n            case _var:\n              next();\n              parseVar(node);\n              semicolon();\n              return finishNode(node, \"VariableDeclaration\");\n            case _while:\n              next();\n              node.test = parseParenExpression();\n              labels.push(loopLabel);\n              node.body = parseStatement();\n              labels.pop();\n              return finishNode(node, \"WhileStatement\");\n            case _with:\n              if (strict) raise(tokStart, \"'with' in strict mode\");\n              next();\n              node.object = parseParenExpression();\n              node.body = parseStatement();\n              return finishNode(node, \"WithStatement\");\n            case _braceL:\n              return parseBlock();\n            case _semi:\n              next();\n              return finishNode(node, \"EmptyStatement\");\n            default:\n              var maybeName = tokVal,\n                expr = parseExpression();\n              if (starttype === _name && expr.type === \"Identifier\" && eat(_colon)) {\n                for (var i = 0; i < labels.length; ++i) if (labels[i].name === maybeName) raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n                var kind = tokType.isLoop ? \"loop\" : tokType === _switch ? \"switch\" : null;\n                labels.push({\n                  name: maybeName,\n                  kind: kind\n                });\n                node.body = parseStatement();\n                labels.pop();\n                node.label = expr;\n                return finishNode(node, \"LabeledStatement\");\n              } else {\n                node.expression = expr;\n                semicolon();\n                return finishNode(node, \"ExpressionStatement\");\n              }\n          }\n        }\n        function parseParenExpression() {\n          expect(_parenL);\n          var val = parseExpression();\n          expect(_parenR);\n          return val;\n        }\n        function parseBlock(allowStrict) {\n          var node = startNode(),\n            first = true,\n            strict = false,\n            oldStrict;\n          node.body = [];\n          expect(_braceL);\n          while (!eat(_braceR)) {\n            var stmt = parseStatement();\n            node.body.push(stmt);\n            if (first && allowStrict && isUseStrict(stmt)) {\n              oldStrict = strict;\n              setStrict(strict = true);\n            }\n            first = false;\n          }\n          if (strict && !oldStrict) setStrict(false);\n          return finishNode(node, \"BlockStatement\");\n        }\n        function parseFor(node, init) {\n          node.init = init;\n          expect(_semi);\n          node.test = tokType === _semi ? null : parseExpression();\n          expect(_semi);\n          node.update = tokType === _parenR ? null : parseExpression();\n          expect(_parenR);\n          node.body = parseStatement();\n          labels.pop();\n          return finishNode(node, \"ForStatement\");\n        }\n        function parseForIn(node, init) {\n          node.left = init;\n          node.right = parseExpression();\n          expect(_parenR);\n          node.body = parseStatement();\n          labels.pop();\n          return finishNode(node, \"ForInStatement\");\n        }\n        function parseVar(node, noIn) {\n          node.declarations = [];\n          node.kind = \"var\";\n          for (;;) {\n            var decl = startNode();\n            decl.id = parseIdent();\n            if (strict && isStrictBadIdWord(decl.id.name)) raise(decl.id.start, \"Binding \" + decl.id.name + \" in strict mode\");\n            decl.init = eat(_eq) ? parseExpression(true, noIn) : null;\n            node.declarations.push(finishNode(decl, \"VariableDeclarator\"));\n            if (!eat(_comma)) break;\n          }\n          return node;\n        }\n        function parseExpression(noComma, noIn) {\n          var expr = parseMaybeAssign(noIn);\n          if (!noComma && tokType === _comma) {\n            var node = startNodeFrom(expr);\n            node.expressions = [expr];\n            while (eat(_comma)) node.expressions.push(parseMaybeAssign(noIn));\n            return finishNode(node, \"SequenceExpression\");\n          }\n          return expr;\n        }\n        function parseMaybeAssign(noIn) {\n          var left = parseMaybeConditional(noIn);\n          if (tokType.isAssign) {\n            var node = startNodeFrom(left);\n            node.operator = tokVal;\n            node.left = left;\n            next();\n            node.right = parseMaybeAssign(noIn);\n            checkLVal(left);\n            return finishNode(node, \"AssignmentExpression\");\n          }\n          return left;\n        }\n        function parseMaybeConditional(noIn) {\n          var expr = parseExprOps(noIn);\n          if (eat(_question)) {\n            var node = startNodeFrom(expr);\n            node.test = expr;\n            node.consequent = parseExpression(true);\n            expect(_colon);\n            node.alternate = parseExpression(true, noIn);\n            return finishNode(node, \"ConditionalExpression\");\n          }\n          return expr;\n        }\n        function parseExprOps(noIn) {\n          return parseExprOp(parseMaybeUnary(), -1, noIn);\n        }\n        function parseExprOp(left, minPrec, noIn) {\n          var prec = tokType.binop;\n          if (prec != null && (!noIn || tokType !== _in)) {\n            if (prec > minPrec) {\n              var node = startNodeFrom(left);\n              node.left = left;\n              node.operator = tokVal;\n              var op = tokType;\n              next();\n              node.right = parseExprOp(parseMaybeUnary(), prec, noIn);\n              var exprNode = finishNode(node, op === _logicalOR || op === _logicalAND ? \"LogicalExpression\" : \"BinaryExpression\");\n              return parseExprOp(exprNode, minPrec, noIn);\n            }\n          }\n          return left;\n        }\n        function parseMaybeUnary() {\n          if (tokType.prefix) {\n            var node = startNode(),\n              update = tokType.isUpdate;\n            node.operator = tokVal;\n            node.prefix = true;\n            tokRegexpAllowed = true;\n            next();\n            node.argument = parseMaybeUnary();\n            if (update) checkLVal(node.argument);else if (strict && node.operator === \"delete\" && node.argument.type === \"Identifier\") raise(node.start, \"Deleting local variable in strict mode\");\n            return finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n          }\n          var expr = parseExprSubscripts();\n          while (tokType.postfix && !canInsertSemicolon()) {\n            var node = startNodeFrom(expr);\n            node.operator = tokVal;\n            node.prefix = false;\n            node.argument = expr;\n            checkLVal(expr);\n            next();\n            expr = finishNode(node, \"UpdateExpression\");\n          }\n          return expr;\n        }\n        function parseExprSubscripts() {\n          return parseSubscripts(parseExprAtom());\n        }\n        function parseSubscripts(base, noCalls) {\n          if (eat(_dot)) {\n            var node = startNodeFrom(base);\n            node.object = base;\n            node.property = parseIdent(true);\n            node.computed = false;\n            return parseSubscripts(finishNode(node, \"MemberExpression\"), noCalls);\n          } else if (eat(_bracketL)) {\n            var node = startNodeFrom(base);\n            node.object = base;\n            node.property = parseExpression();\n            node.computed = true;\n            expect(_bracketR);\n            return parseSubscripts(finishNode(node, \"MemberExpression\"), noCalls);\n          } else if (!noCalls && eat(_parenL)) {\n            var node = startNodeFrom(base);\n            node.callee = base;\n            node.arguments = parseExprList(_parenR, false);\n            return parseSubscripts(finishNode(node, \"CallExpression\"), noCalls);\n          } else return base;\n        }\n        function parseExprAtom() {\n          switch (tokType) {\n            case _this:\n              var node = startNode();\n              next();\n              return finishNode(node, \"ThisExpression\");\n            case _name:\n              return parseIdent();\n            case _num:\n            case _string:\n            case _regexp:\n              var node = startNode();\n              node.value = tokVal;\n              node.raw = input.slice(tokStart, tokEnd);\n              next();\n              return finishNode(node, \"Literal\");\n            case _null:\n            case _true:\n            case _false:\n              var node = startNode();\n              node.value = tokType.atomValue;\n              node.raw = tokType.keyword;\n              next();\n              return finishNode(node, \"Literal\");\n            case _parenL:\n              var tokStartLoc1 = tokStartLoc,\n                tokStart1 = tokStart;\n              next();\n              var val = parseExpression();\n              val.start = tokStart1;\n              val.end = tokEnd;\n              if (options.locations) {\n                val.loc.start = tokStartLoc1;\n                val.loc.end = tokEndLoc;\n              }\n              if (options.ranges) val.range = [tokStart1, tokEnd];\n              expect(_parenR);\n              return val;\n            case _bracketL:\n              var node = startNode();\n              next();\n              node.elements = parseExprList(_bracketR, true, true);\n              return finishNode(node, \"ArrayExpression\");\n            case _braceL:\n              return parseObj();\n            case _function:\n              var node = startNode();\n              next();\n              return parseFunction(node, false);\n            case _new:\n              return parseNew();\n            default:\n              unexpected();\n          }\n        }\n        function parseNew() {\n          var node = startNode();\n          next();\n          node.callee = parseSubscripts(parseExprAtom(), true);\n          if (eat(_parenL)) node.arguments = parseExprList(_parenR, false);else node.arguments = empty;\n          return finishNode(node, \"NewExpression\");\n        }\n        function parseObj() {\n          var node = startNode(),\n            first = true,\n            sawGetSet = false;\n          node.properties = [];\n          next();\n          while (!eat(_braceR)) {\n            if (!first) {\n              expect(_comma);\n              if (options.allowTrailingCommas && eat(_braceR)) break;\n            } else first = false;\n            var prop = {\n                key: parsePropertyName()\n              },\n              isGetSet = false,\n              kind;\n            if (eat(_colon)) {\n              prop.value = parseExpression(true);\n              kind = prop.kind = \"init\";\n            } else if (options.ecmaVersion >= 5 && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\")) {\n              isGetSet = sawGetSet = true;\n              kind = prop.kind = prop.key.name;\n              prop.key = parsePropertyName();\n              if (tokType !== _parenL) unexpected();\n              prop.value = parseFunction(startNode(), false);\n            } else unexpected();\n            if (prop.key.type === \"Identifier\" && (strict || sawGetSet)) {\n              for (var i = 0; i < node.properties.length; ++i) {\n                var other = node.properties[i];\n                if (other.key.name === prop.key.name) {\n                  var conflict = kind == other.kind || isGetSet && other.kind === \"init\" || kind === \"init\" && (other.kind === \"get\" || other.kind === \"set\");\n                  if (conflict && !strict && kind === \"init\" && other.kind === \"init\") conflict = false;\n                  if (conflict) raise(prop.key.start, \"Redefinition of property\");\n                }\n              }\n            }\n            node.properties.push(prop);\n          }\n          return finishNode(node, \"ObjectExpression\");\n        }\n        function parsePropertyName() {\n          if (tokType === _num || tokType === _string) return parseExprAtom();\n          return parseIdent(true);\n        }\n        function parseFunction(node, isStatement) {\n          if (tokType === _name) node.id = parseIdent();else if (isStatement) unexpected();else node.id = null;\n          node.params = [];\n          var first = true;\n          expect(_parenL);\n          while (!eat(_parenR)) {\n            if (!first) expect(_comma);else first = false;\n            node.params.push(parseIdent());\n          }\n          var oldInFunc = inFunction,\n            oldLabels = labels;\n          inFunction = true;\n          labels = [];\n          node.body = parseBlock(true);\n          inFunction = oldInFunc;\n          labels = oldLabels;\n          if (strict || node.body.body.length && isUseStrict(node.body.body[0])) {\n            for (var i = node.id ? -1 : 0; i < node.params.length; ++i) {\n              var id = i < 0 ? node.id : node.params[i];\n              if (isStrictReservedWord(id.name) || isStrictBadIdWord(id.name)) raise(id.start, \"Defining '\" + id.name + \"' in strict mode\");\n              if (i >= 0) for (var j = 0; j < i; ++j) if (id.name === node.params[j].name) raise(id.start, \"Argument name clash in strict mode\");\n            }\n          }\n          return finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n        }\n        function parseExprList(close, allowTrailingComma, allowEmpty) {\n          var elts = [],\n            first = true;\n          while (!eat(close)) {\n            if (!first) {\n              expect(_comma);\n              if (allowTrailingComma && options.allowTrailingCommas && eat(close)) break;\n            } else first = false;\n            if (allowEmpty && tokType === _comma) elts.push(null);else elts.push(parseExpression(true));\n          }\n          return elts;\n        }\n        function parseIdent(liberal) {\n          var node = startNode();\n          if (liberal && options.forbidReserved == \"everywhere\") liberal = false;\n          if (tokType === _name) {\n            if (!liberal && (options.forbidReserved && (options.ecmaVersion === 3 ? isReservedWord3 : isReservedWord5)(tokVal) || strict && isStrictReservedWord(tokVal)) && input.slice(tokStart, tokEnd).indexOf(\"\\\\\") == -1) raise(tokStart, \"The keyword '\" + tokVal + \"' is reserved\");\n            node.name = tokVal;\n          } else if (liberal && tokType.keyword) {\n            node.name = tokType.keyword;\n          } else {\n            unexpected();\n          }\n          tokRegexpAllowed = false;\n          next();\n          return finishNode(node, \"Identifier\");\n        }\n      });\n      if (!acorn.version) acorn = null;\n    }\n    function parse(code, options) {\n      return (global.acorn || acorn).parse(code, options);\n    }\n    var binaryOperators = {\n      '+': '__add',\n      '-': '__subtract',\n      '*': '__multiply',\n      '/': '__divide',\n      '%': '__modulo',\n      '==': '__equals',\n      '!=': '__equals'\n    };\n    var unaryOperators = {\n      '-': '__negate',\n      '+': '__self'\n    };\n    var fields = Base.each(['add', 'subtract', 'multiply', 'divide', 'modulo', 'equals', 'negate'], function (name) {\n      this['__' + name] = '#' + name;\n    }, {\n      __self: function () {\n        return this;\n      }\n    });\n    Point.inject(fields);\n    Size.inject(fields);\n    Color.inject(fields);\n    function __$__(left, operator, right) {\n      var handler = binaryOperators[operator];\n      if (left && left[handler]) {\n        var res = left[handler](right);\n        return operator === '!=' ? !res : res;\n      }\n      switch (operator) {\n        case '+':\n          return left + right;\n        case '-':\n          return left - right;\n        case '*':\n          return left * right;\n        case '/':\n          return left / right;\n        case '%':\n          return left % right;\n        case '==':\n          return left == right;\n        case '!=':\n          return left != right;\n      }\n    }\n    function $__(operator, value) {\n      var handler = unaryOperators[operator];\n      if (value && value[handler]) return value[handler]();\n      switch (operator) {\n        case '+':\n          return +value;\n        case '-':\n          return -value;\n      }\n    }\n    function compile(code, options) {\n      if (!code) return '';\n      options = options || {};\n      var insertions = [];\n      function getOffset(offset) {\n        for (var i = 0, l = insertions.length; i < l; i++) {\n          var insertion = insertions[i];\n          if (insertion[0] >= offset) break;\n          offset += insertion[1];\n        }\n        return offset;\n      }\n      function getCode(node) {\n        return code.substring(getOffset(node.range[0]), getOffset(node.range[1]));\n      }\n      function getBetween(left, right) {\n        return code.substring(getOffset(left.range[1]), getOffset(right.range[0]));\n      }\n      function replaceCode(node, str) {\n        var start = getOffset(node.range[0]),\n          end = getOffset(node.range[1]),\n          insert = 0;\n        for (var i = insertions.length - 1; i >= 0; i--) {\n          if (start > insertions[i][0]) {\n            insert = i + 1;\n            break;\n          }\n        }\n        insertions.splice(insert, 0, [start, str.length - end + start]);\n        code = code.substring(0, start) + str + code.substring(end);\n      }\n      function handleOverloading(node, parent) {\n        switch (node.type) {\n          case 'UnaryExpression':\n            if (node.operator in unaryOperators && node.argument.type !== 'Literal') {\n              var arg = getCode(node.argument);\n              replaceCode(node, '$__(\"' + node.operator + '\", ' + arg + ')');\n            }\n            break;\n          case 'BinaryExpression':\n            if (node.operator in binaryOperators && node.left.type !== 'Literal') {\n              var left = getCode(node.left),\n                right = getCode(node.right),\n                between = getBetween(node.left, node.right),\n                operator = node.operator;\n              replaceCode(node, '__$__(' + left + ',' + between.replace(new RegExp('\\\\' + operator), '\"' + operator + '\"') + ', ' + right + ')');\n            }\n            break;\n          case 'UpdateExpression':\n          case 'AssignmentExpression':\n            var parentType = parent && parent.type;\n            if (!(parentType === 'ForStatement' || parentType === 'BinaryExpression' && /^[=!<>]/.test(parent.operator) || parentType === 'MemberExpression' && parent.computed)) {\n              if (node.type === 'UpdateExpression') {\n                var arg = getCode(node.argument),\n                  exp = '__$__(' + arg + ', \"' + node.operator[0] + '\", 1)',\n                  str = arg + ' = ' + exp;\n                if (node.prefix) {\n                  str = '(' + str + ')';\n                } else if (parentType === 'AssignmentExpression' || parentType === 'VariableDeclarator' || parentType === 'BinaryExpression') {\n                  if (getCode(parent.left || parent.id) === arg) str = exp;\n                  str = arg + '; ' + str;\n                }\n                replaceCode(node, str);\n              } else {\n                if (/^.=$/.test(node.operator) && node.left.type !== 'Literal') {\n                  var left = getCode(node.left),\n                    right = getCode(node.right),\n                    exp = left + ' = __$__(' + left + ', \"' + node.operator[0] + '\", ' + right + ')';\n                  replaceCode(node, /^\\(.*\\)$/.test(getCode(node)) ? '(' + exp + ')' : exp);\n                }\n              }\n            }\n            break;\n        }\n      }\n      function handleExports(node) {\n        switch (node.type) {\n          case 'ExportDefaultDeclaration':\n            replaceCode({\n              range: [node.start, node.declaration.start]\n            }, 'module.exports = ');\n            break;\n          case 'ExportNamedDeclaration':\n            var declaration = node.declaration;\n            var specifiers = node.specifiers;\n            if (declaration) {\n              var declarations = declaration.declarations;\n              if (declarations) {\n                declarations.forEach(function (dec) {\n                  replaceCode(dec, 'module.exports.' + getCode(dec));\n                });\n                replaceCode({\n                  range: [node.start, declaration.start + declaration.kind.length]\n                }, '');\n              }\n            } else if (specifiers) {\n              var exports = specifiers.map(function (specifier) {\n                var name = getCode(specifier);\n                return 'module.exports.' + name + ' = ' + name + '; ';\n              }).join('');\n              if (exports) {\n                replaceCode(node, exports);\n              }\n            }\n            break;\n        }\n      }\n      function walkAST(node, parent, paperFeatures) {\n        if (node) {\n          for (var key in node) {\n            if (key !== 'range' && key !== 'loc') {\n              var value = node[key];\n              if (Array.isArray(value)) {\n                for (var i = 0, l = value.length; i < l; i++) {\n                  walkAST(value[i], node, paperFeatures);\n                }\n              } else if (value && typeof value === 'object') {\n                walkAST(value, node, paperFeatures);\n              }\n            }\n          }\n          if (paperFeatures.operatorOverloading !== false) {\n            handleOverloading(node, parent);\n          }\n          if (paperFeatures.moduleExports !== false) {\n            handleExports(node);\n          }\n        }\n      }\n      function encodeVLQ(value) {\n        var res = '',\n          base64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n        value = (Math.abs(value) << 1) + (value < 0 ? 1 : 0);\n        while (value || !res) {\n          var next = value & 32 - 1;\n          value >>= 5;\n          if (value) next |= 32;\n          res += base64[next];\n        }\n        return res;\n      }\n      var url = options.url || '',\n        sourceMaps = options.sourceMaps,\n        paperFeatures = options.paperFeatures || {},\n        source = options.source || code,\n        offset = options.offset || 0,\n        agent = paper.agent,\n        version = agent.versionNumber,\n        offsetCode = false,\n        lineBreaks = /\\r\\n|\\n|\\r/mg,\n        map;\n      if (sourceMaps && (agent.chrome && version >= 30 || agent.webkit && version >= 537.76 || agent.firefox && version >= 23 || agent.node)) {\n        if (agent.node) {\n          offset -= 2;\n        } else if (window && url && !window.location.href.indexOf(url)) {\n          var html = document.getElementsByTagName('html')[0].innerHTML;\n          offset = html.substr(0, html.indexOf(code) + 1).match(lineBreaks).length + 1;\n        }\n        offsetCode = offset > 0 && !(agent.chrome && version >= 36 || agent.safari && version >= 600 || agent.firefox && version >= 40 || agent.node);\n        var mappings = ['AA' + encodeVLQ(offsetCode ? 0 : offset) + 'A'];\n        mappings.length = (code.match(lineBreaks) || []).length + 1 + (offsetCode ? offset : 0);\n        map = {\n          version: 3,\n          file: url,\n          names: [],\n          mappings: mappings.join(';AACA'),\n          sourceRoot: '',\n          sources: [url],\n          sourcesContent: [source]\n        };\n      }\n      if (paperFeatures.operatorOverloading !== false || paperFeatures.moduleExports !== false) {\n        walkAST(parse(code, {\n          ranges: true,\n          preserveParens: true,\n          sourceType: 'module'\n        }), null, paperFeatures);\n      }\n      if (map) {\n        if (offsetCode) {\n          code = new Array(offset + 1).join('\\n') + code;\n        }\n        if (/^(inline|both)$/.test(sourceMaps)) {\n          code += \"\\n//# sourceMappingURL=data:application/json;base64,\" + self.btoa(unescape(encodeURIComponent(JSON.stringify(map))));\n        }\n        code += \"\\n//# sourceURL=\" + (url || 'paperscript');\n      }\n      return {\n        url: url,\n        source: source,\n        code: code,\n        map: map\n      };\n    }\n    function execute(code, scope, options) {\n      paper = scope;\n      var view = scope.getView(),\n        tool = /\\btool\\.\\w+|\\s+on(?:Key|Mouse)(?:Up|Down|Move|Drag)\\b/.test(code) && !/\\bnew\\s+Tool\\b/.test(code) ? new Tool() : null,\n        toolHandlers = tool ? tool._events : [],\n        handlers = ['onFrame', 'onResize'].concat(toolHandlers),\n        params = [],\n        args = [],\n        func,\n        compiled = typeof code === 'object' ? code : compile(code, options);\n      code = compiled.code;\n      function expose(scope, hidden) {\n        for (var key in scope) {\n          if ((hidden || !/^_/.test(key)) && new RegExp('([\\\\b\\\\s\\\\W]|^)' + key.replace(/\\$/g, '\\\\$') + '\\\\b').test(code)) {\n            params.push(key);\n            args.push(scope[key]);\n          }\n        }\n      }\n      expose({\n        __$__: __$__,\n        $__: $__,\n        paper: scope,\n        tool: tool\n      }, true);\n      expose(scope);\n      code = 'var module = { exports: {} }; ' + code;\n      var exports = Base.each(handlers, function (key) {\n        if (new RegExp('\\\\s+' + key + '\\\\b').test(code)) {\n          params.push(key);\n          this.push('module.exports.' + key + ' = ' + key + ';');\n        }\n      }, []).join('\\n');\n      if (exports) {\n        code += '\\n' + exports;\n      }\n      code += '\\nreturn module.exports;';\n      var agent = paper.agent;\n      if (document && (agent.chrome || agent.firefox && agent.versionNumber < 40)) {\n        var script = document.createElement('script'),\n          head = document.head || document.getElementsByTagName('head')[0];\n        if (agent.firefox) code = '\\n' + code;\n        script.appendChild(document.createTextNode('document.__paperscript__ = function(' + params + ') {' + code + '\\n}'));\n        head.appendChild(script);\n        func = document.__paperscript__;\n        delete document.__paperscript__;\n        head.removeChild(script);\n      } else {\n        func = Function(params, code);\n      }\n      var exports = func && func.apply(scope, args);\n      var obj = exports || {};\n      Base.each(toolHandlers, function (key) {\n        var value = obj[key];\n        if (value) tool[key] = value;\n      });\n      if (view) {\n        if (obj.onResize) view.setOnResize(obj.onResize);\n        view.emit('resize', {\n          size: view.size,\n          delta: new Point()\n        });\n        if (obj.onFrame) view.setOnFrame(obj.onFrame);\n        view.requestUpdate();\n      }\n      return exports;\n    }\n    function loadScript(script) {\n      if (/^text\\/(?:x-|)paperscript$/.test(script.type) && PaperScope.getAttribute(script, 'ignore') !== 'true') {\n        var canvasId = PaperScope.getAttribute(script, 'canvas'),\n          canvas = document.getElementById(canvasId),\n          src = script.src || script.getAttribute('data-src'),\n          async = PaperScope.hasAttribute(script, 'async'),\n          scopeAttribute = 'data-paper-scope';\n        if (!canvas) throw new Error('Unable to find canvas with id \"' + canvasId + '\"');\n        var scope = PaperScope.get(canvas.getAttribute(scopeAttribute)) || new PaperScope().setup(canvas);\n        canvas.setAttribute(scopeAttribute, scope._id);\n        if (src) {\n          Http.request({\n            url: src,\n            async: async,\n            mimeType: 'text/plain',\n            onLoad: function (code) {\n              execute(code, scope, src);\n            }\n          });\n        } else {\n          execute(script.innerHTML, scope, script.baseURI);\n        }\n        script.setAttribute('data-paper-ignore', 'true');\n        return scope;\n      }\n    }\n    function loadAll() {\n      Base.each(document && document.getElementsByTagName('script'), loadScript);\n    }\n    function load(script) {\n      return script ? loadScript(script) : loadAll();\n    }\n    if (window) {\n      if (document.readyState === 'complete') {\n        setTimeout(loadAll);\n      } else {\n        DomEvent.add(window, {\n          load: loadAll\n        });\n      }\n    }\n    return {\n      compile: compile,\n      execute: execute,\n      load: load,\n      parse: parse,\n      calculateBinary: __$__,\n      calculateUnary: $__\n    };\n  }.call(this);\n  var paper = new (PaperScope.inject(Base.exports, {\n    Base: Base,\n    Numerical: Numerical,\n    Key: Key,\n    DomEvent: DomEvent,\n    DomElement: DomElement,\n    document: document,\n    window: window,\n    Symbol: SymbolDefinition,\n    PlacedSymbol: SymbolItem\n  }))();\n  if (paper.agent.node) {\n    require('./node/extend.js')(paper);\n  }\n  if (typeof define === 'function' && define.amd) {\n    define('paper', paper);\n  } else if (typeof module === 'object' && module) {\n    module.exports = paper;\n  }\n  return paper;\n}.call(this, typeof self === 'object' ? self : null);","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}