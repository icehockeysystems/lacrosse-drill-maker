{"ast":null,"code":"var shorterNames = require('./shorter-css-color-names');\nvar REGEX = {\n  whitespace: /\\s+/g,\n  urlHexPairs: /%[\\dA-F]{2}/g,\n  quotes: /\"/g\n};\nfunction collapseWhitespace(str) {\n  return str.trim().replace(REGEX.whitespace, ' ');\n}\nfunction dataURIPayload(string) {\n  return encodeURIComponent(string).replace(REGEX.urlHexPairs, specialHexEncode);\n}\n\n// `#` gets converted to `%23`, so quite a few CSS named colors are shorter than\n// their equivalent URL-encoded hex codes.\nfunction colorCodeToShorterNames(string) {\n  Object.keys(shorterNames).forEach(function (key) {\n    if (shorterNames[key].test(string)) {\n      string = string.replace(shorterNames[key], key);\n    }\n  });\n  return string;\n}\nfunction specialHexEncode(match) {\n  switch (match) {\n    // Browsers tolerate these characters, and they're frequent\n    case '%20':\n      return ' ';\n    case '%3D':\n      return '=';\n    case '%3A':\n      return ':';\n    case '%2F':\n      return '/';\n    default:\n      return match.toLowerCase();\n    // compresses better\n  }\n}\n\nfunction svgToTinyDataUri(svgString) {\n  if (typeof svgString !== 'string') {\n    throw new TypeError('Expected a string, but received ' + typeof svgString);\n  }\n  // Strip the Byte-Order Mark if the SVG has one\n  if (svgString.charCodeAt(0) === 0xfeff) {\n    svgString = svgString.slice(1);\n  }\n  var body = colorCodeToShorterNames(collapseWhitespace(svgString)).replace(REGEX.quotes, \"'\");\n  return 'data:image/svg+xml,' + dataURIPayload(body);\n}\nsvgToTinyDataUri.toSrcset = function toSrcset(svgString) {\n  return svgToTinyDataUri(svgString).replace(/ /g, '%20');\n};\nmodule.exports = svgToTinyDataUri;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}