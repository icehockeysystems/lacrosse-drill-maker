{"ast":null,"code":"import paper, { view, project, tools, tool, Tool, Group, Path, Point, PointText, Color, Rectangle, Size, Raster } from \"paper\";\nimport miniSvgDataUri from \"mini-svg-data-uri\";\nvar index = 0;\nclass Canvas {\n  // Initialize the canvas with paper.js.\n  init(element, modeStrokeWidth, onChange) {\n    var that = this;\n\n    // Initialize canvas with paper.js.\n    paper.setup(element);\n    this.handleChange = onChange;\n    this.view = view;\n    this.project = project;\n    this.index = project.getIndex();\n\n    // Set initial scale.\n    this.scale = this.view.size.width / this.scalingWidth;\n\n    // Set stroke width.\n    this.strokeWidth = modeStrokeWidth;\n\n    // Resize when resizing. :)\n    this.view.onResize = () => {\n      this.resize();\n    };\n\n    // Add a background fill item, which helps with resizing.\n    this.bgFillItem = new Path.Rectangle(this.view.bounds);\n    this.bgFillItem.locked = true;\n    this.bgFillItem.name = \"background-fill\";\n\n    // Add each tool and set the tool name and cursor as arbitrary properties.\n    this.customTools.forEach(tool => {\n      let _tool = new Tool(tool.props);\n      _tool.name = tool.name;\n      _tool.cursor = tool.cursor;\n      _tool.index = that.index;\n    });\n  }\n\n  // Find active variants.\n  findActiveVariant(variants) {\n    // Return active variant if it was saved in layer name.\n    if (this.project.activeLayer.name) {\n      for (let i = 0; i <= variants.length; i++) {\n        if (variants[i].name === this.project.activeLayer.name) {\n          return variants[i];\n        }\n      }\n    }\n    return variants[0];\n  }\n\n  // Sets the background image.\n  setBackground(svg, variantLogo, modeLogo, customLogo, variantName) {\n    var that = this;\n\n    // Save variant name to layer name.\n    this.project.activeLayer.name = variantName;\n\n    // Remove previous background and logo items.\n    if (this.project.activeLayer.children.background) {\n      this.project.activeLayer.children.background.remove();\n    }\n    if (this.project.activeLayer.children.logo) {\n      this.project.activeLayer.children.logo.remove();\n    }\n\n    // Add the background image, lock it (to disable its mouse interactions),\n    // name it (so we can access it more easily), and expand it to fit the paper\n    // bounds.\n    this.bgItem = this.project.importSVG(svg);\n    this.bgItem.locked = true;\n    this.bgItem.name = \"background\";\n    this.bgItem.fitBounds(this.view.bounds);\n\n    // Define function to be executed after importing the logo. Needed because\n    // the raster import requires an onLoad function, which can cause a state\n    // saving issue if done out of order.\n    const finishSetBackground = () => {\n      // Lock, name, rotate, and set opacity of logo.\n      that.logoItem.locked = true;\n      that.logoItem.name = \"logo\";\n      if (variantLogo.rotate) {\n        that.logoItem.rotate(variantLogo.rotate);\n      }\n      that.logoItem.opacity = .5;\n\n      // Send logo, background, and the background rectangle to the back.\n      that.logoItem.sendToBack();\n      that.bgItem.sendToBack();\n      if (that.bgFillItem) {\n        that.bgFillItem.sendToBack();\n      }\n      that.saveState();\n    };\n\n    // Add the logo. A custom logo is a raster image and needs to be positioned\n    // with a center point and then scaled.\n    if (customLogo) {\n      this.logoItem = new Raster(customLogo);\n      this.logoItem.onLoad = () => {\n        this.logoItem.position = new Point(variantLogo.position[0] * this.view.size.width, variantLogo.position[1] * this.view.size.height);\n        this.logoItem.scale(variantLogo.width * this.view.size.width / Math.max(this.logoItem.width, this.logoItem.height));\n        finishSetBackground();\n      };\n    }\n\n    // A mode logo is a SVG of 100x100 and needs to be positioned and scaled with\n    // bounds.\n    else {\n      this.logoItem = this.project.importSVG(modeLogo);\n      const logoItemWidth = variantLogo.width * this.view.size.width;\n      this.logoItem.bounds = new Rectangle(variantLogo.position[0] * this.view.size.width - logoItemWidth / 2, variantLogo.position[1] * this.view.size.height - logoItemWidth / 2, logoItemWidth, logoItemWidth);\n      finishSetBackground();\n    }\n  }\n\n  // Activates a tool.\n  activateTool(toolName, props, color, icon) {\n    var that = this;\n\n    // Activate tool.\n    const tool = tools.find(tool => tool.name === toolName && tool.index === that.index);\n    tool.activate();\n\n    // Tool settings.\n    this.toolActive = tool;\n    this.toolProps = props;\n    this.toolColor = color;\n    this.toolIcon = icon;\n\n    // Set cursor. For \"icon\", use the SVG icon as the cursor, temporarily\n    // setting it to something else to avoid Safari showing the old cursor.\n    if (tool.cursor === \"icon\") {\n      this.view.element.style.setProperty(\"cursor\", \"pointer\");\n      this.view.element.style.setProperty(\"cursor\", this.svgCursor(this.toolIcon, this.toolProps.size, this.toolColor));\n    } else {\n      this.view.element.style.setProperty(\"cursor\", tool.cursor);\n    }\n  }\n\n  // Transforms the active layer to fit the paper bounds and adjusts scaling.\n  resize() {\n    var that = this;\n    this.project.activeLayer.fitBounds(this.view.bounds);\n    this.scale = this.view.size.width / this.scalingWidth;\n\n    // Find all \"path\" tools and scale the stroke width and dash array.\n    this.project.activeLayer.children.forEach(item => {\n      if (item.data.tool === \"path\") {\n        item.children.forEach(child => {\n          if (child.strokeWidth) {\n            child.strokeWidth = that.strokeWidth * that.scale;\n          }\n          if (child.dashArray.length) {\n            child.dashArray = [5 * that.scale, 7 * that.scale];\n          }\n        });\n      }\n    });\n  }\n\n  // Sets active canvas.\n  setActive() {\n    paper.project = this.project;\n    this.toolActive.activate();\n  }\n\n  // Sets project state to previous state.\n  undo() {\n    if (this.stateIndex > 0) {\n      this.project.clear();\n      this.project.importJSON(this.states[--this.stateIndex]);\n      this.resize();\n      this.handleChange(this.states[this.stateIndex]);\n    }\n  }\n\n  // Sets project state to next state.\n  redo() {\n    if (this.stateIndex + 1 < this.states.length) {\n      this.project.clear();\n      this.project.importJSON(this.states[++this.stateIndex]);\n      this.resize();\n      this.handleChange(this.states[this.stateIndex]);\n    }\n  }\n\n  // Imports JSON.\n  importJSON(json) {\n    this.project.clear();\n    this.project.importJSON(json);\n    this.resize();\n    this.saveState();\n  }\n\n  // Erases canvas by restoring initial state.\n  erase() {\n    this.states.length = 1;\n    this.stateIndex = 0;\n    this.project.clear();\n    this.project.importJSON(this.states[this.stateIndex]);\n    this.resize();\n    this.handleChange(this.states[this.stateIndex]);\n  }\n\n  // Is empty if we only have locked items (the background images).\n  isEmpty() {\n    if (!this.project) {\n      this.project = project;\n    }\n    return !this.project.activeLayer.children.reduce((count, item) => !item.locked ? count + 1 : count, 0);\n  }\n\n  // Prints project SVG to the console.\n  debugSVG() {\n    console.log(this.project.exportSVG({\n      asString: true\n    }));\n  }\n\n  // Saves project state, then manually updates the view to ensure canvas is\n  // drawn and up-to-date so it can be exported (e.g. toDataURL).\n  saveState() {\n    this.states.length = this.stateIndex + 1;\n    this.states.push(this.project.exportJSON({\n      asString: false\n    }));\n    this.stateIndex++;\n    this.view.update();\n    this.handleChange(this.states[this.stateIndex]);\n  }\n\n  // Sets cursor to SVG.\n  svgCursor(svg, size, color) {\n    const sizeScaled = (size || 30) * this.scale;\n    const svgReplaced = svg.replace(/1em/g, sizeScaled + \"px\").replace(/currentColor/g, color).replace(/ data-paper-data='[^']+'/g, \"\");\n    const uri = miniSvgDataUri(svgReplaced);\n    return `url(\"${uri}\") ${sizeScaled / 2} ${sizeScaled / 2}, auto`;\n  }\n\n  // Updates stroke and fill color for item and item's children, skipping as\n  // necessary. Useful to avoid filling in a white area within a shape.\n  paintItem(item, color) {\n    var that = this;\n    const _color = color || this.toolColor;\n    item.children.forEach(child => {\n      if (child.strokeColor && !child.data.skipStroke) {\n        child.strokeColor = _color;\n      }\n      if (child.fillColor && !child.data.skipFill) {\n        child.fillColor = _color;\n      }\n      if (child.hasChildren()) {\n        that.paintItem(child, _color);\n      }\n    });\n  }\n\n  // Performs hit test and returns top level parent non-layer item, optionally\n  // matched by tool type.\n  getHitTestItem(point, toolType) {\n    const hitResult = this.project.hitTest(point, {\n      segments: false,\n      stroke: true,\n      fill: true,\n      tolerance: 10\n    });\n    if (hitResult) {\n      let item = hitResult.item;\n      do {\n        item = item.parent;\n      } while (item.parent.className !== \"Layer\" && (!toolType || item.data.tool === toolType));\n      return item;\n    }\n  }\n\n  // Given an array of sizes, find the next size in an array. This is done by\n  // finding the nearest size down, and then the next size up from that, wrapping\n  // to the lowest size if needed.\n  getNextSize(sizes, currentSize) {\n    const nearestSizeDown = sizes.slice().reverse().concat(0).reduce((a, b) => currentSize < a ? b : a);\n    return sizes[(sizes.indexOf(nearestSizeDown) + 1) % sizes.length];\n  }\n\n  // Define our tools.\n\n  constructor() {\n    // Variables.\n    this.index = 0;\n    this.view = null;\n    this.project = null;\n    // Settings.\n    this.scalingWidth = 900;\n    this.strokeWidth = 1;\n    // Tool settings.\n    this.toolActive = null;\n    this.toolProps = {};\n    this.toolColor = \"black\";\n    this.toolIcon = \"\";\n    // State variables.\n    this.pathGroup = null;\n    this.path1 = null;\n    this.path2 = null;\n    this.arrowPath = null;\n    this.stopPath1 = null;\n    this.stopPath2 = null;\n    this.arcClockwise = true;\n    this.bgItem = null;\n    this.logoItem = null;\n    this.bgFillItem = null;\n    this.activeItem = null;\n    this.activeItemOffset = null;\n    this.states = [];\n    this.stateIndex = -1;\n    this.handleChange = () => {};\n    this.scale = 1;\n    this.customTools = [];\n    var that = this;\n    this.index = index++;\n\n    // Path tool.\n    this.customTools.push({\n      name: \"path\",\n      cursor: \"crosshair\",\n      props: {\n        onMouseDown: event => {\n          // Define min and max distance.\n          switch (that.toolProps.type) {\n            case \"waves\":\n            case \"waves-straight\":\n            case \"ladder\":\n              that.toolActive.minDistance = 10 * that.scale;\n              that.toolActive.maxDistance = 10 * that.scale;\n              break;\n            case \"arcs\":\n              that.toolActive.minDistance = 20 * that.scale;\n              that.toolActive.maxDistance = 20 * that.scale;\n              break;\n            default:\n              that.toolActive.minDistance = 4 * that.scale;\n              break;\n          }\n\n          // Initialize path group.\n          that.pathGroup = new Group({\n            data: {\n              tool: \"path\",\n              type: that.toolProps.type,\n              arrow: that.toolProps.arrow,\n              stop: that.toolProps.stop,\n              withDot: that.toolProps.withDot\n            }\n          });\n          that.pathGroup.scale(that.scale);\n\n          // Initialize the path(s).\n          if (!that.toolProps.type || [\"straight\", \"dashed\", \"dashed-straight\", \"waves\", \"waves-straight\", \"double\"].includes(that.toolProps.type)) {\n            that.path1 = new Path({\n              strokeColor: that.toolColor,\n              strokeWidth: that.strokeWidth * that.scale\n            });\n            that.pathGroup.addChild(that.path1);\n            if ([\"dashed\", \"dashed-straight\"].includes(that.toolProps.type)) {\n              that.path1.strokeCap = \"round\";\n              that.path1.dashArray = [5 * that.scale, 7 * that.scale];\n            }\n            if ([\"waves\", \"waves-straight\"].includes(that.toolProps.type)) {\n              that.arcClockwise = false;\n              that.path1.moveTo(event.point);\n            }\n            if (that.toolProps.type === \"double\") {\n              that.path2 = new Path({\n                strokeColor: that.toolColor,\n                strokeWidth: that.strokeWidth * that.scale\n              });\n              that.pathGroup.addChild(that.path2);\n            }\n          }\n\n          // Initialize the arrow.\n          if (that.toolProps.arrow) {\n            that.arrowPath = new Path({\n              strokeColor: that.toolColor,\n              strokeWidth: that.strokeWidth * that.scale\n            });\n            that.pathGroup.addChild(that.arrowPath);\n          }\n\n          // Initialize the stop.\n          if (that.toolProps.stop) {\n            that.stopPath1 = new Path({\n              strokeColor: that.toolColor,\n              strokeWidth: that.strokeWidth * that.scale\n            });\n            that.pathGroup.addChild(that.stopPath1);\n            that.stopPath2 = new Path({\n              strokeColor: that.toolColor,\n              strokeWidth: that.strokeWidth * that.scale\n            });\n            that.pathGroup.addChild(that.stopPath2);\n          }\n        },\n        onMouseDrag: event => {\n          // Draw the path.\n          switch (that.toolProps.type) {\n            case \"straight\":\n            case \"dashed-straight\":\n              that.path1.removeSegments();\n              that.path1.add(event.downPoint, event.point);\n              break;\n            case \"double\":\n              let offset = event.delta;\n              offset.length = 3 * that.scale;\n              offset.angle = event.downPoint.subtract(event.point).angle + 90;\n              that.path1.removeSegments();\n              that.path2.removeSegments();\n              that.path1.add(event.downPoint.subtract(offset), event.point.subtract(offset));\n              that.path2.add(event.downPoint.add(offset), event.point.add(offset));\n              break;\n            case \"waves\":\n              that.arcClockwise = !that.arcClockwise;\n              that.path1.arcTo(event.point, that.arcClockwise);\n              break;\n            case \"waves-straight\":\n              const points = Math.round(event.point.getDistance(event.downPoint) / (10 * that.scale));\n              const angle = event.point.subtract(event.downPoint).angle;\n              that.arcClockwise = false;\n              that.path1.removeSegments();\n              that.path1.add(event.downPoint);\n              for (let i = 1; i <= points; i++) {\n                const nextPoint = event.downPoint.add(new Point({\n                  length: 10 * that.scale * i,\n                  angle: angle\n                }));\n                that.path1.arcTo(nextPoint, that.arcClockwise);\n                that.arcClockwise = !that.arcClockwise;\n              }\n              break;\n            case \"arcs\":\n              that.path1 = new Path({\n                strokeColor: that.toolColor,\n                strokeWidth: that.strokeWidth * that.scale,\n                segments: [new Point(0, that.strokeWidth * that.scale)]\n              });\n              that.path2 = new Path({\n                strokeColor: that.toolColor,\n                strokeWidth: that.strokeWidth * that.scale,\n                segments: [new Point(5 * that.scale, that.strokeWidth * 2 * that.scale)]\n              });\n              that.path1.arcTo(new Point(10 * that.scale, that.strokeWidth * that.scale));\n              that.path2.arcTo(new Point(15 * that.scale, that.strokeWidth * 2 * that.scale), false);\n              let arcGroup = that.pathGroup.addChild(new Group([that.path2, that.path1]));\n              if (that.toolProps.withDot) {\n                arcGroup.addChild(new Path.Circle({\n                  center: new Point(10 * that.scale, that.strokeWidth * that.scale),\n                  radius: that.strokeWidth * that.scale,\n                  fillColor: that.toolColor,\n                  strokeWidth: that.strokeWidth * that.scale,\n                  strokeColor: that.toolColor\n                }));\n              }\n              arcGroup.position = event.middlePoint;\n              arcGroup.rotate(event.lastPoint.subtract(event.middlePoint).angle);\n              break;\n            case \"ladder\":\n              that.path1 = new Path({\n                strokeColor: that.toolColor,\n                strokeWidth: that.strokeWidth * that.scale\n              });\n              that.pathGroup.addChild(that.path1);\n              const vector = event.delta;\n              vector.angle += 90;\n              vector.length = 5 * that.scale;\n              that.path1.moveTo(event.middlePoint.subtract(vector));\n              that.path1.lineTo(event.middlePoint.add(vector));\n              break;\n            default:\n              that.path1.add(event.point);\n              break;\n          }\n\n          // Draw the arrow.\n          if (that.toolProps.arrow) {\n            const vector = ([\"straight\", \"dashed-straight\", \"waves-straight\", \"double\"].includes(that.toolProps.type) ? event.downPoint.subtract(event.point) : event.middlePoint.subtract(event.point)).normalize();\n            const avector = vector.normalize(10 * that.scale);\n            that.arrowPath.removeSegments();\n            if ([\"dashed\", \"dashed-straight\", \"double\", \"waves\", \"waves-straight\", \"ladder\", \"arcs\"].includes(that.toolProps.type)) {\n              const addvector = vector.normalize(10 * that.scale);\n              that.arrowPath.add(event.point.subtract(addvector).add(avector.rotate(45)));\n              that.arrowPath.add(event.point.subtract(addvector));\n              that.arrowPath.add(event.point.subtract(addvector).subtract(avector.rotate(135)));\n            } else {\n              that.arrowPath.add(event.point.add(avector.rotate(45)));\n              that.arrowPath.add(event.point);\n              that.arrowPath.add(event.point.subtract(avector.rotate(135)));\n            }\n          }\n\n          // Draw the stop.\n          if (that.toolProps.stop) {\n            const avector = ([\"straight\", \"dashed-straight\", \"waves-straight\", \"double\"].includes(that.toolProps.type) ? event.downPoint.subtract(event.point) : event.middlePoint.subtract(event.point)).normalize();\n            const vector = event.point;\n            vector.angle = avector.angle + 90;\n            vector.length = 10 * that.scale;\n            const normalize1 = ([\"dashed\", \"dashed-straight\", \"double\", \"waves\", \"waves-straight\", \"ladder\", \"arcs\"].includes(that.toolProps.type) ? 20 : 8) * that.scale;\n            const normalize2 = ([\"dashed\", \"dashed-straight\", \"double\", \"waves\", \"waves-straight\", \"ladder\", \"arcs\"].includes(that.toolProps.type) ? 16 : 4) * that.scale;\n            that.stopPath1.removeSegments();\n            that.stopPath1.add(event.point.subtract(avector.normalize(normalize1)).subtract(vector));\n            that.stopPath1.add(event.point.subtract(avector.normalize(normalize1)).add(vector));\n            that.stopPath2.removeSegments();\n            that.stopPath2.add(event.point.subtract(avector.normalize(normalize2)).subtract(vector));\n            that.stopPath2.add(event.point.subtract(avector.normalize(normalize2)).add(vector));\n          }\n        },\n        onMouseUp: event => {\n          if (!that.toolProps.type) {\n            that.path1.smooth(10 * that.scale);\n            that.path1.simplify(10 * that.scale);\n          }\n          that.saveState();\n        }\n      }\n    });\n\n    // Dot tool.\n    this.customTools.push({\n      name: \"dot\",\n      cursor: \"icon\",\n      props: {\n        onMouseUp: event => {\n          const dotItem = new Path.Circle({\n            position: event.point,\n            center: new Point(0, 0),\n            radius: that.toolProps.radius || 3,\n            fillColor: that.toolColor,\n            strokeWidth: 1,\n            strokeColor: new Color(255, 255, 255, .5),\n            data: {\n              skipStroke: true\n            }\n          });\n          that.pathGroup = new Group({\n            children: [dotItem],\n            data: {\n              tool: \"dot\",\n              radius: that.toolProps.radius,\n              count: that.toolProps.count\n            }\n          });\n          if (that.toolProps.count > 1) {\n            for (var i = 1; i < that.toolProps.count; i++) {\n              let dotItem2 = dotItem.clone();\n              const offset1 = i % 2 === 0 ? 15 : -15;\n              const offset2 = i % 3 === 0 || i % 4 === 0 ? 15 : -15;\n              dotItem2.position = event.point.add(new Point(Math.random() * offset1, Math.random() * offset2));\n              that.pathGroup.addChild(dotItem2);\n            }\n          }\n          that.pathGroup.scale(that.scale);\n          that.saveState();\n        }\n      }\n    });\n\n    // SVG tool.\n    this.customTools.push({\n      name: \"svg\",\n      cursor: \"icon\",\n      props: {\n        onMouseUp: event => {\n          const size = that.toolProps.size || 30;\n          const svgItem = that.project.importSVG(that.toolIcon);\n          svgItem.bounds = new Rectangle(event.point.subtract(size / 2), new Size(size, size));\n          that.pathGroup = new Group({\n            children: [svgItem],\n            data: {\n              tool: \"svg\",\n              id: that.toolProps.id,\n              size: that.toolProps.size\n            }\n          });\n          that.pathGroup.scale(that.scale);\n          that.paintItem(that.pathGroup);\n          that.saveState();\n        }\n      }\n    });\n\n    // Text tool.\n    this.customTools.push({\n      name: \"text\",\n      cursor: null,\n      props: {\n        onMouseMove: event => {\n          that.view.element.style.setProperty(\"cursor\", that.getHitTestItem(event.point, \"text\") ? \"pointer\" : that.svgCursor(that.toolIcon, that.toolProps.size, that.toolColor));\n        },\n        onMouseUp: event => {\n          const item = that.getHitTestItem(event.point, \"text\");\n          const text = window.prompt(\"Enter text:\", item ? item.data.text : \"\");\n          const point = (item ? item.position : event.point).add(new Point(0, 5));\n          const color = item ? item.data.color : that.toolColor;\n          if (text) {\n            if (item) {\n              item.remove();\n            }\n            const textItem = new PointText({\n              point: point,\n              content: text,\n              justification: \"center\",\n              fontFamily: \"Roboto, Arial, sans-serif\",\n              fontSize: 16,\n              fontWeight: \"normal\",\n              strokeWidth: .2,\n              shadowColor: \"white\",\n              shadowBlur: 2,\n              shadowOffset: 1\n            });\n            that.pathGroup = new Group({\n              children: [textItem],\n              data: {\n                tool: \"text\",\n                text: text,\n                color: that.toolColor\n              }\n            });\n            that.pathGroup.scale(that.scale);\n            that.paintItem(that.pathGroup, color);\n            that.saveState();\n          }\n        }\n      }\n    });\n\n    // Shape tool.\n    this.customTools.push({\n      name: \"shape\",\n      cursor: \"crosshair\",\n      props: {\n        onMouseDown: event => {\n          that.pathGroup = new Group({\n            data: {\n              tool: \"shape\",\n              shape: that.toolProps.shape,\n              background: that.toolProps.background,\n              opacity: that.toolProps.opacity,\n              bordered: that.toolProps.bordered\n            }\n          });\n\n          // Place below other objects, just above the background item.\n          if (that.toolProps.background) {\n            that.pathGroup.insertAbove(that.project.activeLayer.children.background);\n          }\n        },\n        onMouseDrag: event => {\n          that.pathGroup.removeChildren();\n\n          // Rectangle.\n          if (that.toolProps.shape === \"rectangle\") {\n            that.pathGroup.addChild(new Path.Rectangle({\n              from: event.downPoint,\n              to: event.point,\n              fillColor: that.toolProps.bordered ? null : that.toolColor,\n              opacity: that.toolProps.opacity || 1,\n              strokeWidth: that.toolProps.bordered ? that.strokeWidth * that.scale : 0,\n              strokeColor: that.toolProps.bordered ? that.toolColor : null\n            }));\n          }\n\n          // Circle.\n          else if (that.toolProps.shape === \"circle\") {\n            that.pathGroup.addChild(new Path.Circle({\n              center: event.downPoint,\n              radius: event.point.subtract(event.downPoint).length,\n              fillColor: that.toolProps.bordered ? null : that.toolColor,\n              opacity: that.toolProps.opacity || 1,\n              strokeWidth: that.toolProps.bordered ? that.strokeWidth * that.scale : 0,\n              strokeColor: that.toolProps.bordered ? that.toolColor : null\n            }));\n          }\n\n          // Triangle.\n          else if (that.toolProps.shape === \"triangle\") {\n            that.pathGroup.addChild(new Path.RegularPolygon({\n              center: event.downPoint,\n              sides: 3,\n              radius: event.point.subtract(event.downPoint).length,\n              fillColor: that.toolProps.bordered ? null : that.toolColor,\n              opacity: that.toolProps.opacity || 1,\n              strokeWidth: that.toolProps.bordered ? that.strokeWidth * that.scale : 0,\n              strokeColor: that.toolProps.bordered ? that.toolColor : null\n            }));\n          }\n        },\n        onMouseUp: event => {\n          that.saveState();\n        }\n      }\n    });\n\n    // Paint tool.\n    this.customTools.push({\n      name: \"paint\",\n      cursor: null,\n      props: {\n        onMouseMove: event => {\n          that.view.element.style.setProperty(\"cursor\", that.getHitTestItem(event.point) ? \"pointer\" : null);\n        },\n        onMouseUp: event => {\n          const item = that.getHitTestItem(event.point);\n          if (item) {\n            that.paintItem(item);\n            that.saveState();\n          }\n        }\n      }\n    });\n\n    // Move tool.\n    this.customTools.push({\n      name: \"move\",\n      cursor: null,\n      props: {\n        onMouseDown: event => {\n          that.activeItem = that.getHitTestItem(event.point);\n          that.activeItemOffset = that.activeItem ? that.activeItem.position.subtract(event.point) : null;\n        },\n        onMouseMove: event => {\n          that.view.element.style.setProperty(\"cursor\", that.getHitTestItem(event.point) ? \"grab\" : null);\n        },\n        onMouseDrag: event => {\n          if (that.activeItem) {\n            that.view.element.style.setProperty(\"cursor\", \"grabbing\");\n            that.activeItem.position = event.point.add(that.activeItemOffset);\n          }\n        },\n        onMouseUp: event => {\n          that.activeItem = null;\n          that.view.element.style.setProperty(\"cursor\", that.getHitTestItem(event.point) ? \"grab\" : null);\n          that.saveState();\n        }\n      }\n    });\n\n    // Rotate tool.\n    this.customTools.push({\n      name: \"rotate\",\n      cursor: null,\n      props: {\n        onMouseMove: event => {\n          that.view.element.style.setProperty(\"cursor\", that.getHitTestItem(event.point) ? \"pointer\" : null);\n        },\n        onMouseUp: event => {\n          const item = that.getHitTestItem(event.point);\n          if (item) {\n            item.rotate(30);\n            that.saveState();\n          }\n        }\n      }\n    });\n\n    // Scale tool.\n    this.customTools.push({\n      name: \"scale\",\n      cursor: null,\n      props: {\n        onMouseMove: event => {\n          that.view.element.style.setProperty(\"cursor\", that.getHitTestItem(event.point) ? \"pointer\" : null);\n        },\n        onMouseUp: event => {\n          const item = that.getHitTestItem(event.point);\n          if (item) {\n            // Scale stroke only.\n            if (that.toolProps.strokeOnly) {\n              const strokeScaleOld = item.data.strokeScale || 1;\n              let strokeScaleNew = that.getNextSize([.67, 1, 1.5, 2, 2.5], strokeScaleOld);\n              strokeScaleNew = Math.round((strokeScaleNew + Number.EPSILON) * 100) / 100;\n              if (strokeScaleNew !== strokeScaleOld) {\n                item.data.strokeScale = strokeScaleNew;\n                item.children.forEach(child => {\n                  if (child.strokeWidth && !child.data.skipStroke) {\n                    child.strokeWidth = that.strokeWidth * strokeScaleNew * that.scale;\n                  }\n                });\n                that.saveState();\n              }\n            }\n\n            // Scale entire item.\n            else {\n              const scaleOld = item.data.scale || item.data.resize || 1;\n              let scaleNew = that.getNextSize([.33, .66, 1, 1.33, 1.66, 2], scaleOld);\n              scaleNew = Math.round((scaleNew + Number.EPSILON) * 100) / 100;\n              if (scaleNew !== scaleOld) {\n                item.data.scale = scaleNew;\n                item.applyMatrix = false;\n                item.scale(scaleNew / scaleOld);\n                that.saveState();\n              }\n            }\n          }\n        }\n      }\n    });\n\n    // Erase tool.\n    this.customTools.push({\n      name: \"erase\",\n      cursor: null,\n      props: {\n        onMouseMove: event => {\n          that.view.element.style.setProperty(\"cursor\", that.getHitTestItem(event.point) ? \"pointer\" : null);\n        },\n        onMouseUp: event => {\n          const item = that.getHitTestItem(event.point);\n          if (item) {\n            item.remove();\n            that.saveState();\n          }\n        }\n      }\n    });\n  }\n}\nexport default Canvas;","map":{"version":3,"names":["paper","view","project","tools","tool","Tool","Group","Path","Point","PointText","Color","Rectangle","Size","Raster","miniSvgDataUri","index","Canvas","init","element","modeStrokeWidth","onChange","that","setup","handleChange","getIndex","scale","size","width","scalingWidth","strokeWidth","onResize","resize","bgFillItem","bounds","locked","name","customTools","forEach","_tool","props","cursor","findActiveVariant","variants","activeLayer","i","length","setBackground","svg","variantLogo","modeLogo","customLogo","variantName","children","background","remove","logo","bgItem","importSVG","fitBounds","finishSetBackground","logoItem","rotate","opacity","sendToBack","saveState","onLoad","position","height","Math","max","logoItemWidth","activateTool","toolName","color","icon","find","activate","toolActive","toolProps","toolColor","toolIcon","style","setProperty","svgCursor","item","data","child","dashArray","setActive","undo","stateIndex","clear","importJSON","states","redo","json","erase","isEmpty","reduce","count","debugSVG","console","log","exportSVG","asString","push","exportJSON","update","sizeScaled","svgReplaced","replace","uri","paintItem","_color","strokeColor","skipStroke","fillColor","skipFill","hasChildren","getHitTestItem","point","toolType","hitResult","hitTest","segments","stroke","fill","tolerance","parent","className","getNextSize","sizes","currentSize","nearestSizeDown","slice","reverse","concat","a","b","indexOf","constructor","pathGroup","path1","path2","arrowPath","stopPath1","stopPath2","arcClockwise","activeItem","activeItemOffset","onMouseDown","event","type","minDistance","maxDistance","arrow","stop","withDot","includes","addChild","strokeCap","moveTo","onMouseDrag","removeSegments","add","downPoint","offset","delta","angle","subtract","arcTo","points","round","getDistance","nextPoint","arcGroup","Circle","center","radius","middlePoint","lastPoint","vector","lineTo","normalize","avector","addvector","normalize1","normalize2","onMouseUp","smooth","simplify","dotItem","dotItem2","clone","offset1","offset2","random","svgItem","id","onMouseMove","text","window","prompt","textItem","content","justification","fontFamily","fontSize","fontWeight","shadowColor","shadowBlur","shadowOffset","shape","bordered","insertAbove","removeChildren","from","to","RegularPolygon","sides","strokeOnly","strokeScaleOld","strokeScale","strokeScaleNew","Number","EPSILON","scaleOld","scaleNew","applyMatrix"],"sources":["C:/Users/nilss/Desktop/Drill Maker/20241211-IHS-Drill-Maker/drill-maker/src/paper.js"],"sourcesContent":["import paper, {\n  view,\n  project,\n  tools,\n  tool,\n  Tool,\n  Group,\n  Path,\n  Point,\n  PointText,\n  Color,\n  Rectangle,\n  Size,\n  Raster,\n} from \"paper\"\nimport miniSvgDataUri from \"mini-svg-data-uri\"\n\nvar index = 0;\n\nclass Canvas {\n\n  // Variables.\n  index = 0;\n  view = null\n  project = null\n\n  // Settings.\n  scalingWidth = 900\n  strokeWidth = 1\n\n  // Tool settings.\n  toolActive = null\n  toolProps = {}\n  toolColor = \"black\"\n  toolIcon = \"\"\n\n  // State variables.\n  pathGroup = null\n  path1 = null\n  path2 = null\n  arrowPath = null\n  stopPath1 = null\n  stopPath2 = null\n  arcClockwise = true\n  bgItem = null\n  logoItem = null\n  bgFillItem = null\n  activeItem = null\n  activeItemOffset = null\n  states = []\n  stateIndex = -1\n  handleChange = () => {}\n  scale = 1\n\n  // Initialize the canvas with paper.js.\n  init(element, modeStrokeWidth, onChange) {\n    var that = this\n\n    // Initialize canvas with paper.js.\n    paper.setup(element)\n    this.handleChange = onChange\n\n    this.view = view\n    this.project = project\n    this.index = project.getIndex()\n\n    // Set initial scale.\n    this.scale = this.view.size.width / this.scalingWidth\n\n    // Set stroke width.\n    this.strokeWidth = modeStrokeWidth\n\n    // Resize when resizing. :)\n    this.view.onResize = () => {\n      this.resize()\n    }\n\n    // Add a background fill item, which helps with resizing.\n    this.bgFillItem = new Path.Rectangle(this.view.bounds)\n    this.bgFillItem.locked = true\n    this.bgFillItem.name = \"background-fill\"\n\n    // Add each tool and set the tool name and cursor as arbitrary properties.\n    this.customTools.forEach(tool => {\n      let _tool = new Tool(tool.props)\n      _tool.name = tool.name\n      _tool.cursor = tool.cursor\n      _tool.index = that.index\n    })\n  }\n\n  // Find active variants.\n  findActiveVariant(variants) {\n    // Return active variant if it was saved in layer name.\n    if (this.project.activeLayer.name) {\n      for (let i = 0; i <= variants.length; i++) {\n        if (variants[i].name === this.project.activeLayer.name) {\n          return variants[i]\n        }\n      }\n    }\n\n    return variants[0]\n  }\n\n  // Sets the background image.\n  setBackground(svg, variantLogo, modeLogo, customLogo, variantName) {\n    var that = this;\n\n    // Save variant name to layer name.\n    this.project.activeLayer.name = variantName;\n\n    // Remove previous background and logo items.\n    if (this.project.activeLayer.children.background) {\n      this.project.activeLayer.children.background.remove()\n    }\n    if (this.project.activeLayer.children.logo) {\n      this.project.activeLayer.children.logo.remove()\n    }\n\n    // Add the background image, lock it (to disable its mouse interactions),\n    // name it (so we can access it more easily), and expand it to fit the paper\n    // bounds.\n    this.bgItem = this.project.importSVG(svg)\n    this.bgItem.locked = true\n    this.bgItem.name = \"background\"\n    this.bgItem.fitBounds(this.view.bounds)\n\n    // Define function to be executed after importing the logo. Needed because\n    // the raster import requires an onLoad function, which can cause a state\n    // saving issue if done out of order.\n    const finishSetBackground = () => {\n      // Lock, name, rotate, and set opacity of logo.\n      that.logoItem.locked = true\n      that.logoItem.name = \"logo\"\n      if (variantLogo.rotate) {\n        that.logoItem.rotate(variantLogo.rotate)\n      }\n      that.logoItem.opacity = .5\n\n      // Send logo, background, and the background rectangle to the back.\n      that.logoItem.sendToBack()\n      that.bgItem.sendToBack()\n      if (that.bgFillItem) {\n        that.bgFillItem.sendToBack()\n      }\n\n      that.saveState()\n    }\n\n    // Add the logo. A custom logo is a raster image and needs to be positioned\n    // with a center point and then scaled.\n    if (customLogo) {\n      this.logoItem = new Raster(customLogo)\n      this.logoItem.onLoad = () => {\n        this.logoItem.position = new Point(variantLogo.position[0] * this.view.size.width, variantLogo.position[1] * this.view.size.height)\n        this.logoItem.scale((variantLogo.width * this.view.size.width) / Math.max(this.logoItem.width, this.logoItem.height))\n        finishSetBackground()\n      }\n    }\n\n    // A mode logo is a SVG of 100x100 and needs to be positioned and scaled with\n    // bounds.\n    else {\n      this.logoItem = this.project.importSVG(modeLogo)\n      const logoItemWidth = variantLogo.width * this.view.size.width\n      this.logoItem.bounds = new Rectangle((variantLogo.position[0] * this.view.size.width) - (logoItemWidth / 2), (variantLogo.position[1] * this.view.size.height) - (logoItemWidth / 2), logoItemWidth, logoItemWidth)\n      finishSetBackground()\n    }\n  }\n\n  // Activates a tool.\n  activateTool(toolName, props, color, icon) {\n    var that = this\n\n    // Activate tool.\n    const tool = tools.find(tool => tool.name === toolName && tool.index === that.index)\n    tool.activate()\n\n    // Tool settings.\n    this.toolActive = tool\n    this.toolProps = props\n    this.toolColor = color\n    this.toolIcon = icon\n\n    // Set cursor. For \"icon\", use the SVG icon as the cursor, temporarily\n    // setting it to something else to avoid Safari showing the old cursor.\n    if (tool.cursor === \"icon\") {\n      this.view.element.style.setProperty(\"cursor\", \"pointer\")\n      this.view.element.style.setProperty(\"cursor\", this.svgCursor(this.toolIcon, this.toolProps.size, this.toolColor))\n    }\n    else {\n      this.view.element.style.setProperty(\"cursor\", tool.cursor)\n    }\n  }\n\n  // Transforms the active layer to fit the paper bounds and adjusts scaling.\n  resize() {\n    var that = this;\n\n    this.project.activeLayer.fitBounds(this.view.bounds)\n    this.scale = this.view.size.width / this.scalingWidth\n\n    // Find all \"path\" tools and scale the stroke width and dash array.\n    this.project.activeLayer.children.forEach(item => {\n      if (item.data.tool === \"path\") {\n        item.children.forEach(child => {\n          if (child.strokeWidth) {\n            child.strokeWidth = that.strokeWidth * that.scale\n          }\n          if (child.dashArray.length) {\n            child.dashArray = [5 * that.scale, 7 * that.scale]\n          }\n        })\n      }\n    })\n  }\n\n  // Sets active canvas.\n  setActive() {\n    paper.project = this.project\n    this.toolActive.activate()\n  }\n\n  // Sets project state to previous state.\n  undo() {\n    if (this.stateIndex > 0) {\n      this.project.clear()\n      this.project.importJSON(this.states[--this.stateIndex])\n      this.resize()\n      this.handleChange(this.states[this.stateIndex])\n    }\n  }\n\n  // Sets project state to next state.\n  redo() {\n    if (this.stateIndex + 1 < this.states.length) {\n      this.project.clear()\n      this.project.importJSON(this.states[++this.stateIndex])\n      this.resize()\n      this.handleChange(this.states[this.stateIndex])\n    }\n  }\n\n  // Imports JSON.\n  importJSON(json) {\n    this.project.clear()\n    this.project.importJSON(json)\n    this.resize()\n    this.saveState()\n  }\n\n  // Erases canvas by restoring initial state.\n  erase() {\n    this.states.length = 1\n    this.stateIndex = 0\n    this.project.clear()\n    this.project.importJSON(this.states[this.stateIndex])\n    this.resize()\n    this.handleChange(this.states[this.stateIndex])\n  }\n\n  // Is empty if we only have locked items (the background images).\n  isEmpty() {\n    if (!this.project) {\n      this.project = project\n    }\n\n    return !this.project.activeLayer.children.reduce((count, item) => !item.locked ? count + 1 : count, 0)\n  }\n\n  // Prints project SVG to the console.\n  debugSVG() {\n    console.log(this.project.exportSVG({asString: true}))\n  }\n\n  // Saves project state, then manually updates the view to ensure canvas is\n  // drawn and up-to-date so it can be exported (e.g. toDataURL).\n  saveState() {\n    this.states.length = this.stateIndex + 1\n    this.states.push(this.project.exportJSON({asString: false}))\n    this.stateIndex++\n    this.view.update()\n    this.handleChange(this.states[this.stateIndex])\n  }\n\n  // Sets cursor to SVG.\n  svgCursor(svg, size, color) {\n    const sizeScaled = (size || 30) * this.scale\n    const svgReplaced = svg\n      .replace(/1em/g, sizeScaled + \"px\")\n      .replace(/currentColor/g, color)\n      .replace(/ data-paper-data='[^']+'/g, \"\")\n    const uri = miniSvgDataUri(svgReplaced)\n    return `url(\"${uri}\") ${sizeScaled / 2} ${sizeScaled / 2}, auto`\n  }\n\n  // Updates stroke and fill color for item and item's children, skipping as\n  // necessary. Useful to avoid filling in a white area within a shape.\n  paintItem(item, color) {\n    var that = this;\n    const _color = color || this.toolColor\n    item.children.forEach(child => {\n      if (child.strokeColor && !child.data.skipStroke) {\n        child.strokeColor = _color\n      }\n      if (child.fillColor && !child.data.skipFill) {\n        child.fillColor = _color\n      }\n      if (child.hasChildren()) {\n        that.paintItem(child, _color)\n      }\n    })\n  }\n\n  // Performs hit test and returns top level parent non-layer item, optionally\n  // matched by tool type.\n  getHitTestItem(point, toolType) {\n    const hitResult = this.project.hitTest(point, {\n      segments: false,\n      stroke: true,\n      fill: true,\n      tolerance: 10,\n    })\n    if (hitResult) {\n      let item = hitResult.item\n      do {\n        item = item.parent\n      } while (item.parent.className !== \"Layer\" && (!toolType || item.data.tool === toolType))\n      return item\n    }\n  }\n\n  // Given an array of sizes, find the next size in an array. This is done by\n  // finding the nearest size down, and then the next size up from that, wrapping\n  // to the lowest size if needed.\n  getNextSize(sizes, currentSize) {\n    const nearestSizeDown = sizes.slice().reverse().concat(0).reduce((a, b) => currentSize < a ? b : a)\n    return sizes[(sizes.indexOf(nearestSizeDown) + 1) % sizes.length]\n  }\n\n  // Define our tools.\n  customTools = []\n\n  constructor() {\n    var that = this;\n\n    this.index = index++\n\n    // Path tool.\n    this.customTools.push({\n      name: \"path\",\n      cursor: \"crosshair\",\n      props: {\n        onMouseDown: event => {\n          // Define min and max distance.\n          switch (that.toolProps.type) {\n            case \"waves\":\n            case \"waves-straight\":\n            case \"ladder\":\n              that.toolActive.minDistance = 10 * that.scale\n              that.toolActive.maxDistance = 10 * that.scale\n              break\n            case \"arcs\":\n              that.toolActive.minDistance = 20 * that.scale\n              that.toolActive.maxDistance = 20 * that.scale\n              break\n            default:\n              that.toolActive.minDistance = 4 * that.scale\n              break\n          }\n\n          // Initialize path group.\n          that.pathGroup = new Group({\n            data: {\n              tool: \"path\",\n              type: that.toolProps.type,\n              arrow: that.toolProps.arrow,\n              stop: that.toolProps.stop,\n              withDot: that.toolProps.withDot,\n            },\n          })\n          that.pathGroup.scale(that.scale)\n\n          // Initialize the path(s).\n          if (!that.toolProps.type || [\"straight\", \"dashed\", \"dashed-straight\", \"waves\", \"waves-straight\", \"double\"].includes(that.toolProps.type)) {\n            that.path1 = new Path({\n              strokeColor: that.toolColor,\n              strokeWidth: that.strokeWidth * that.scale,\n            })\n            that.pathGroup.addChild(that.path1)\n\n            if ([\"dashed\", \"dashed-straight\"].includes(that.toolProps.type)) {\n              that.path1.strokeCap = \"round\"\n              that.path1.dashArray = [5 * that.scale, 7 * that.scale]\n            }\n\n            if ([\"waves\", \"waves-straight\"].includes(that.toolProps.type)) {\n              that.arcClockwise = false\n              that.path1.moveTo(event.point)\n            }\n\n            if (that.toolProps.type === \"double\") {\n              that.path2 = new Path({\n                strokeColor: that.toolColor,\n                strokeWidth: that.strokeWidth * that.scale,\n              })\n              that.pathGroup.addChild(that.path2)\n            }\n          }\n\n          // Initialize the arrow.\n          if (that.toolProps.arrow) {\n            that.arrowPath = new Path({\n              strokeColor: that.toolColor,\n              strokeWidth: that.strokeWidth * that.scale,\n            })\n            that.pathGroup.addChild(that.arrowPath)\n          }\n\n          // Initialize the stop.\n          if (that.toolProps.stop) {\n            that.stopPath1 = new Path({\n              strokeColor: that.toolColor,\n              strokeWidth: that.strokeWidth * that.scale,\n            })\n            that.pathGroup.addChild(that.stopPath1)\n            that.stopPath2 = new Path({\n              strokeColor: that.toolColor,\n              strokeWidth: that.strokeWidth * that.scale,\n            })\n            that.pathGroup.addChild(that.stopPath2)\n          }\n        },\n        onMouseDrag: event => {\n          // Draw the path.\n          switch (that.toolProps.type) {\n            case \"straight\":\n            case \"dashed-straight\":\n              that.path1.removeSegments()\n              that.path1.add(event.downPoint, event.point)\n              break\n\n            case \"double\":\n              let offset = event.delta\n              offset.length = 3 * that.scale\n              offset.angle = event.downPoint.subtract(event.point).angle + 90\n\n              that.path1.removeSegments()\n              that.path2.removeSegments()\n              that.path1.add(event.downPoint.subtract(offset), event.point.subtract(offset))\n              that.path2.add(event.downPoint.add(offset), event.point.add(offset))\n              break\n\n            case \"waves\":\n              that.arcClockwise = !that.arcClockwise\n              that.path1.arcTo(event.point, that.arcClockwise)\n              break\n\n            case \"waves-straight\":\n              const points = Math.round(event.point.getDistance(event.downPoint) / (10 * that.scale))\n              const angle = event.point.subtract(event.downPoint).angle\n              that.arcClockwise = false\n              that.path1.removeSegments()\n              that.path1.add(event.downPoint)\n              for (let i = 1; i <= points; i++) {\n                const nextPoint = event.downPoint.add(new Point({\n                  length: 10 * that.scale * i,\n                  angle: angle,\n                }))\n                that.path1.arcTo(nextPoint, that.arcClockwise)\n                that.arcClockwise = !that.arcClockwise\n              }\n              break\n\n            case \"arcs\":\n              that.path1 = new Path({\n                strokeColor: that.toolColor,\n                strokeWidth: that.strokeWidth * that.scale,\n                segments: [new Point(0, that.strokeWidth * that.scale)],\n              })\n              that.path2 = new Path({\n                strokeColor: that.toolColor,\n                strokeWidth: that.strokeWidth * that.scale,\n                segments: [new Point(5 * that.scale, that.strokeWidth * 2 * that.scale)],\n              })\n\n              that.path1.arcTo(new Point(10 * that.scale, that.strokeWidth * that.scale))\n              that.path2.arcTo(new Point(15 * that.scale, that.strokeWidth * 2 * that.scale), false)\n\n              let arcGroup = that.pathGroup.addChild(new Group([that.path2, that.path1]))\n\n              if (that.toolProps.withDot) {\n                arcGroup.addChild(new Path.Circle({\n                  center: new Point(10 * that.scale, that.strokeWidth * that.scale),\n                  radius: that.strokeWidth * that.scale,\n                  fillColor: that.toolColor,\n                  strokeWidth: that.strokeWidth * that.scale,\n                  strokeColor: that.toolColor,\n                }))\n              }\n\n              arcGroup.position = event.middlePoint\n              arcGroup.rotate(event.lastPoint.subtract(event.middlePoint).angle)\n              break\n\n            case \"ladder\":\n              that.path1 = new Path({\n                strokeColor: that.toolColor,\n                strokeWidth: that.strokeWidth * that.scale,\n              })\n              that.pathGroup.addChild(that.path1)\n\n              const vector = event.delta\n              vector.angle += 90\n              vector.length = 5 * that.scale\n\n              that.path1.moveTo(event.middlePoint.subtract(vector))\n              that.path1.lineTo(event.middlePoint.add(vector))\n              break\n\n            default:\n              that.path1.add(event.point)\n              break\n          }\n\n          // Draw the arrow.\n          if (that.toolProps.arrow) {\n            const vector = ([\"straight\", \"dashed-straight\", \"waves-straight\", \"double\"].includes(that.toolProps.type)\n              ? event.downPoint.subtract(event.point)\n              : event.middlePoint.subtract(event.point)\n            ).normalize()\n            const avector = vector.normalize(10 * that.scale)\n            that.arrowPath.removeSegments()\n\n            if ([\"dashed\", \"dashed-straight\", \"double\", \"waves\", \"waves-straight\", \"ladder\", \"arcs\"].includes(that.toolProps.type)) {\n              const addvector = vector.normalize(10 * that.scale)\n              that.arrowPath.add(event.point.subtract(addvector).add(avector.rotate(45)))\n              that.arrowPath.add(event.point.subtract(addvector))\n              that.arrowPath.add(event.point.subtract(addvector).subtract(avector.rotate(135)))\n            }\n            else {\n              that.arrowPath.add(event.point.add(avector.rotate(45)))\n              that.arrowPath.add(event.point)\n              that.arrowPath.add(event.point.subtract(avector.rotate(135)))\n            }\n          }\n\n          // Draw the stop.\n          if (that.toolProps.stop) {\n            const avector = ([\"straight\", \"dashed-straight\", \"waves-straight\", \"double\"].includes(that.toolProps.type)\n              ? event.downPoint.subtract(event.point)\n              : event.middlePoint.subtract(event.point)\n            ).normalize()\n            const vector = event.point\n            vector.angle = avector.angle + 90\n            vector.length = 10 * that.scale\n\n            const normalize1 = ([\"dashed\", \"dashed-straight\", \"double\", \"waves\", \"waves-straight\", \"ladder\", \"arcs\"].includes(that.toolProps.type) ? 20 : 8) * that.scale\n            const normalize2 = ([\"dashed\", \"dashed-straight\", \"double\", \"waves\", \"waves-straight\", \"ladder\", \"arcs\"].includes(that.toolProps.type) ? 16 : 4) * that.scale\n\n            that.stopPath1.removeSegments()\n            that.stopPath1.add(event.point.subtract(avector.normalize(normalize1)).subtract(vector))\n            that.stopPath1.add(event.point.subtract(avector.normalize(normalize1)).add(vector))\n\n            that.stopPath2.removeSegments()\n            that.stopPath2.add(event.point.subtract(avector.normalize(normalize2)).subtract(vector))\n            that.stopPath2.add(event.point.subtract(avector.normalize(normalize2)).add(vector))\n          }\n        },\n        onMouseUp: event => {\n          if (!that.toolProps.type) {\n            that.path1.smooth(10 * that.scale)\n            that.path1.simplify(10 * that.scale)\n          }\n          that.saveState()\n        },\n      },\n    })\n\n    // Dot tool.\n    this.customTools.push({\n      name: \"dot\",\n      cursor: \"icon\",\n      props: {\n        onMouseUp: event => {\n          const dotItem = new Path.Circle({\n            position: event.point,\n            center: new Point(0, 0),\n            radius: that.toolProps.radius || 3,\n            fillColor: that.toolColor,\n            strokeWidth: 1,\n            strokeColor: new Color(255, 255, 255, .5),\n            data: {skipStroke: true},\n          })\n          that.pathGroup = new Group({\n            children: [dotItem],\n            data: {\n              tool: \"dot\",\n              radius: that.toolProps.radius,\n              count: that.toolProps.count,\n            },\n          })\n\n          if (that.toolProps.count > 1) {\n            for (var i = 1; i < that.toolProps.count; i++) {\n              let dotItem2 = dotItem.clone()\n              const offset1 = (i % 2) === 0 ? 15 : -15\n              const offset2 = (i % 3) === 0 || (i % 4) === 0 ? 15 : -15\n              dotItem2.position = event.point.add(new Point(Math.random() * offset1, Math.random() * offset2))\n              that.pathGroup.addChild(dotItem2)\n            }\n          }\n\n          that.pathGroup.scale(that.scale)\n          that.saveState()\n        },\n      },\n    })\n\n    // SVG tool.\n    this.customTools.push({\n      name: \"svg\",\n      cursor: \"icon\",\n      props: {\n        onMouseUp: event => {\n          const size = that.toolProps.size || 30\n          const svgItem = that.project.importSVG(that.toolIcon)\n          svgItem.bounds = new Rectangle(event.point.subtract(size / 2), new Size(size, size))\n          that.pathGroup = new Group({\n            children: [svgItem],\n            data: {\n              tool: \"svg\",\n              id: that.toolProps.id,\n              size: that.toolProps.size,\n            },\n          })\n          that.pathGroup.scale(that.scale)\n          that.paintItem(that.pathGroup)\n          that.saveState()\n        },\n      },\n    })\n\n    // Text tool.\n    this.customTools.push({\n      name: \"text\",\n      cursor: null,\n      props: {\n        onMouseMove: event => {\n          that.view.element.style.setProperty(\"cursor\", that.getHitTestItem(event.point, \"text\") ? \"pointer\" : that.svgCursor(that.toolIcon, that.toolProps.size, that.toolColor))\n        },\n        onMouseUp: event => {\n          const item = that.getHitTestItem(event.point, \"text\")\n          const text = window.prompt(\"Enter text:\", item ? item.data.text : \"\")\n          const point = (item ? item.position : event.point).add(new Point(0, 5))\n          const color = item ? item.data.color : that.toolColor\n          if (text) {\n            if (item) {\n              item.remove()\n            }\n            const textItem = new PointText({\n              point: point,\n              content: text,\n              justification: \"center\",\n              fontFamily: \"Roboto, Arial, sans-serif\",\n              fontSize: 16,\n              fontWeight: \"normal\",\n              strokeWidth: .2,\n              shadowColor: \"white\",\n              shadowBlur: 2,\n              shadowOffset: 1,\n            })\n            that.pathGroup = new Group({\n              children: [textItem],\n              data: {\n                tool: \"text\",\n                text: text,\n                color: that.toolColor,\n              },\n            })\n            that.pathGroup.scale(that.scale)\n            that.paintItem(that.pathGroup, color)\n            that.saveState()\n          }\n        },\n      },\n    })\n\n    // Shape tool.\n    this.customTools.push({\n      name: \"shape\",\n      cursor: \"crosshair\",\n      props: {\n        onMouseDown: event => {\n          that.pathGroup = new Group({data: {\n            tool: \"shape\",\n            shape: that.toolProps.shape,\n            background: that.toolProps.background,\n            opacity: that.toolProps.opacity,\n            bordered: that.toolProps.bordered,\n          }})\n\n          // Place below other objects, just above the background item.\n          if (that.toolProps.background) {\n            that.pathGroup.insertAbove(that.project.activeLayer.children.background)\n          }\n        },\n        onMouseDrag: event => {\n          that.pathGroup.removeChildren()\n\n          // Rectangle.\n          if (that.toolProps.shape === \"rectangle\") {\n            that.pathGroup.addChild(new Path.Rectangle({\n              from: event.downPoint,\n              to: event.point,\n              fillColor: that.toolProps.bordered ? null : that.toolColor,\n              opacity: that.toolProps.opacity || 1,\n              strokeWidth: that.toolProps.bordered ? that.strokeWidth * that.scale : 0,\n              strokeColor: that.toolProps.bordered ? that.toolColor : null,\n            }))\n          }\n\n          // Circle.\n          else if (that.toolProps.shape === \"circle\") {\n            that.pathGroup.addChild(new Path.Circle({\n              center: event.downPoint,\n              radius: event.point.subtract(event.downPoint).length,\n              fillColor: that.toolProps.bordered ? null : that.toolColor,\n              opacity: that.toolProps.opacity || 1,\n              strokeWidth: that.toolProps.bordered ? that.strokeWidth * that.scale : 0,\n              strokeColor: that.toolProps.bordered ? that.toolColor : null,\n            }))\n          }\n\n          // Triangle.\n          else if (that.toolProps.shape === \"triangle\") {\n            that.pathGroup.addChild(new Path.RegularPolygon({\n              center: event.downPoint,\n              sides: 3,\n              radius: event.point.subtract(event.downPoint).length,\n              fillColor: that.toolProps.bordered ? null : that.toolColor,\n              opacity: that.toolProps.opacity || 1,\n              strokeWidth: that.toolProps.bordered ? that.strokeWidth * that.scale : 0,\n              strokeColor: that.toolProps.bordered ? that.toolColor : null,\n            }))\n          }\n        },\n        onMouseUp: event => {\n          that.saveState()\n        },\n      },\n    })\n\n    // Paint tool.\n    this.customTools.push({\n      name: \"paint\",\n      cursor: null,\n      props: {\n        onMouseMove: event => {\n          that.view.element.style.setProperty(\"cursor\", that.getHitTestItem(event.point) ? \"pointer\" : null)\n        },\n        onMouseUp: event => {\n          const item = that.getHitTestItem(event.point)\n          if (item) {\n            that.paintItem(item)\n            that.saveState()\n          }\n        },\n      },\n    })\n\n    // Move tool.\n    this.customTools.push({\n      name: \"move\",\n      cursor: null,\n      props: {\n        onMouseDown: event => {\n          that.activeItem = that.getHitTestItem(event.point)\n          that.activeItemOffset = that.activeItem ? that.activeItem.position.subtract(event.point) : null\n        },\n        onMouseMove: event => {\n          that.view.element.style.setProperty(\"cursor\", that.getHitTestItem(event.point) ? \"grab\" : null)\n        },\n        onMouseDrag: event => {\n          if (that.activeItem) {\n            that.view.element.style.setProperty(\"cursor\", \"grabbing\")\n            that.activeItem.position = event.point.add(that.activeItemOffset)\n          }\n        },\n        onMouseUp: event => {\n          that.activeItem = null\n          that.view.element.style.setProperty(\"cursor\", that.getHitTestItem(event.point) ? \"grab\" : null)\n          that.saveState()\n        },\n      },\n    })\n\n    // Rotate tool.\n    this.customTools.push({\n      name: \"rotate\",\n      cursor: null,\n      props: {\n        onMouseMove: event => {\n          that.view.element.style.setProperty(\"cursor\", that.getHitTestItem(event.point) ? \"pointer\" : null)\n        },\n        onMouseUp: event => {\n          const item = that.getHitTestItem(event.point)\n          if (item) {\n            item.rotate(30)\n            that.saveState()\n          }\n        },\n      },\n    })\n\n    // Scale tool.\n    this.customTools.push({\n      name: \"scale\",\n      cursor: null,\n      props: {\n        onMouseMove: event => {\n          that.view.element.style.setProperty(\"cursor\", that.getHitTestItem(event.point) ? \"pointer\" : null)\n        },\n        onMouseUp: event => {\n          const item = that.getHitTestItem(event.point)\n          if (item) {\n            // Scale stroke only.\n            if (that.toolProps.strokeOnly) {\n              const strokeScaleOld = item.data.strokeScale || 1\n              let strokeScaleNew = that.getNextSize([.67, 1, 1.5, 2, 2.5], strokeScaleOld)\n              strokeScaleNew = Math.round((strokeScaleNew + Number.EPSILON) * 100) / 100\n              if (strokeScaleNew !== strokeScaleOld) {\n                item.data.strokeScale = strokeScaleNew\n                item.children.forEach(child => {\n                  if (child.strokeWidth && !child.data.skipStroke) {\n                    child.strokeWidth = that.strokeWidth * strokeScaleNew * that.scale\n                  }\n                })\n                that.saveState()\n              }\n            }\n\n            // Scale entire item.\n            else {\n              const scaleOld = item.data.scale || item.data.resize || 1\n              let scaleNew = that.getNextSize([.33, .66, 1, 1.33, 1.66, 2], scaleOld)\n              scaleNew = Math.round((scaleNew + Number.EPSILON) * 100) / 100\n              if (scaleNew !== scaleOld) {\n                item.data.scale = scaleNew\n                item.applyMatrix = false\n                item.scale(scaleNew / scaleOld)\n                that.saveState()\n              }\n            }\n          }\n        },\n      },\n    })\n\n    // Erase tool.\n    this.customTools.push({\n      name: \"erase\",\n      cursor: null,\n      props: {\n        onMouseMove: event => {\n          that.view.element.style.setProperty(\"cursor\", that.getHitTestItem(event.point) ? \"pointer\" : null)\n        },\n        onMouseUp: event => {\n          const item = that.getHitTestItem(event.point)\n          if (item) {\n            item.remove()\n            that.saveState()\n          }\n        },\n      },\n    })\n  }\n\n}\n\nexport default Canvas\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}